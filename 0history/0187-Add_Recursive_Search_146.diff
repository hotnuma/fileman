diff --git a/thunar/thunar-list-model.c b/thunar/thunar-list-model.c
index 0228afdf..a54a8cf4 100644
--- a/thunar/thunar-list-model.c
+++ b/thunar/thunar-list-model.c
@@ -37,6 +37,7 @@
 #include <thunar/thunar-preferences.h>
 #include <thunar/thunar-private.h>
 #include <thunar/thunar-user.h>
+#include <thunar/thunar-simple-job.h>
 
 
 
@@ -207,6 +208,14 @@ static void               thunar_list_model_set_date_custom_style (ThunarListMod
                                                                    const char             *date_custom_style);
 static gint               thunar_list_model_get_num_files         (ThunarListModel        *store);
 static gboolean           thunar_list_model_get_folders_first     (ThunarListModel        *store);
+static ThunarJob*         thunar_list_model_job_search_directory  (ThunarListModel        *model,
+                                                                   const gchar            *search_query_c,
+                                                                   ThunarFile             *directory);
+static void               thunar_list_model_search_folder         (ThunarListModel        *model,
+                                                                   ThunarJob              *job,
+                                                                   gchar                  *uri,
+                                                                   const gchar            *search_query_c);
+static void               thunar_list_model_cancel_search_job     (ThunarListModel        *model);
 
 
 
@@ -255,6 +264,18 @@ struct _ThunarListModel
   gboolean       sort_folders_first : 1;
   gint           sort_sign;   /* 1 = ascending, -1 descending */
   ThunarSortFunc sort_func;
+
+  /* searching runs in a separate thread which incrementally inserts results (files)
+   * in the files_to_add list.
+   * Periodically the main thread takes all the files in the files_to_add list
+   * and adds them in the model. The list is then emptied.
+   */
+  ThunarJob     *recursive_search_job;
+  GList         *files_to_add;
+  GMutex         mutex_files_to_add;
+
+  /* used to stop the periodic call to add_search_files when the search is finished/canceled */
+  guint          update_search_results_timeout_id;
 };
 
 
@@ -316,7 +337,7 @@ thunar_list_model_class_init (ThunarListModelClass *klass)
       g_param_spec_string ("date-custom-style",
                            "DateCustomStyle",
                            NULL,
-                           "%Y-%m-%d %H:%M:%S",
+                           "%Y-%mutex_files_to_add-%d %H:%M:%S",
                            EXO_PARAM_READWRITE);
 
   /**
@@ -458,6 +479,7 @@ thunar_list_model_init (ThunarListModel *store)
   store->sort_sign = 1;
   store->sort_func = thunar_file_compare_by_name;
   store->rows = g_sequence_new (g_object_unref);
+  g_mutex_init (&store->mutex_files_to_add);
 
   /* connect to the shared ThunarFileMonitor, so we don't need to
    * connect "changed" to every single ThunarFile we own.
@@ -485,7 +507,18 @@ thunar_list_model_finalize (GObject *object)
 {
   ThunarListModel *store = THUNAR_LIST_MODEL (object);
 
+  thunar_list_model_cancel_search_job (store);
+
+  if (store->update_search_results_timeout_id > 0)
+    {
+      g_source_remove (store->update_search_results_timeout_id);
+      store->update_search_results_timeout_id = 0;
+    }
+  thunar_g_list_free_full (store->files_to_add);
+  store->files_to_add = NULL;
+
   g_sequence_free (store->rows);
+  g_mutex_clear (&store->mutex_files_to_add);
 
   /* disconnect from the file monitor */
   g_signal_handlers_disconnect_by_func (G_OBJECT (store->file_monitor), thunar_list_model_file_changed, store);
@@ -2011,65 +2044,227 @@ thunar_list_model_set_date_custom_style (ThunarListModel *store,
 
 
 
-/**
- * thunar_list_model_get_folder:
- * @store : a valid #ThunarListModel object.
- *
- * Return value: the #ThunarFolder @store is associated with
- *               or %NULL if @store has no folder.
- **/
-ThunarFolder*
-thunar_list_model_get_folder (ThunarListModel *store)
+ThunarJob*
+thunar_list_model_get_job (ThunarListModel  *store)
 {
-  _thunar_return_val_if_fail (THUNAR_IS_LIST_MODEL (store), NULL);
-  return store->folder;
+  return store->recursive_search_job;
 }
 
 
 
-static GList*
-search_directory (GList       *files,
-                  ThunarFile  *directory,
-                  gchar       *search_query_c)
+void
+thunar_list_model_set_job (ThunarListModel  *store,
+                           ThunarJob        *job)
 {
-  ThunarFolder *folder;
-  GList        *temp_files;
-  const gchar  *display_name;
-  gchar        *display_name_c; /* converted to ignore case */
-  gchar        *uri;
+  store->recursive_search_job = job;
+}
+
+
+
+static gboolean
+add_search_files (gpointer user_data)
+{
+  ThunarListModel *model = user_data;
+
+  g_mutex_lock (&model->mutex_files_to_add);
+
+  thunar_list_model_files_added (model->folder, model->files_to_add, model);
+  g_list_free (model->files_to_add);
+  model->files_to_add = NULL;
+
+  g_mutex_unlock (&model->mutex_files_to_add);
+
+  return TRUE;
+}
 
-  folder     = thunar_folder_get_for_file (directory);
-  temp_files = thunar_folder_get_files (folder);
 
-  for (; temp_files != NULL; temp_files = temp_files->next)
+
+static gboolean
+_thunar_job_search_directory (ThunarJob  *job,
+                               GArray     *param_values,
+                               GError    **error)
+{
+  ThunarListModel *model;
+  ThunarFile      *directory;
+  const char      *search_query_c;
+
+  if (exo_job_set_error_if_cancelled (EXO_JOB (job), error))
+    return FALSE;
+
+  model = g_value_get_object (&g_array_index (param_values, GValue, 0));
+  search_query_c = g_value_get_string (&g_array_index (param_values, GValue, 1));
+  directory = g_value_get_object (&g_array_index (param_values, GValue, 2));
+
+  thunar_list_model_search_folder (model, job, thunar_file_dup_uri (directory), search_query_c);
+
+  return TRUE;
+}
+
+
+
+static ThunarJob*
+thunar_list_model_job_search_directory (ThunarListModel *model,
+                                        const gchar     *search_query_c,
+                                        ThunarFile      *directory)
+{
+  return thunar_simple_job_new (_thunar_job_search_directory, 3,
+                                THUNAR_TYPE_LIST_MODEL, model,
+                                G_TYPE_STRING,          search_query_c,
+                                THUNAR_TYPE_FILE,       directory);
+}
+
+
+
+static void
+thunar_list_model_cancel_search_job (ThunarListModel *model)
+{
+  /* cancel the ongoing search if there is one */
+  if (model->recursive_search_job)
     {
-      /* don't allow duplicates for files that exist in `recent:///` */
-      uri = thunar_file_dup_uri (temp_files->data);
-      if (gtk_recent_manager_has_item (gtk_recent_manager_get_default(), uri) == TRUE)
+      exo_job_cancel (EXO_JOB (model->recursive_search_job));
+
+      g_signal_handlers_disconnect_matched (model->recursive_search_job, G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, model);
+      g_object_unref (model->recursive_search_job);
+      model->recursive_search_job = NULL;
+    }
+}
+
+
+
+static void
+search_error (ThunarJob *job)
+{
+  g_error ("Error while searching recursively");
+}
+
+
+
+static void
+search_finished (ThunarJob       *job,
+                 ThunarListModel *store)
+{
+  if (store->recursive_search_job)
+    {
+      g_signal_handlers_disconnect_matched (store->recursive_search_job, G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, store);
+      g_object_unref (store->recursive_search_job);
+      store->recursive_search_job = NULL;
+    }
+
+  if (store->update_search_results_timeout_id > 0)
+    {
+      add_search_files (store);
+      g_source_remove (store->update_search_results_timeout_id);
+      store->update_search_results_timeout_id = 0;
+    }
+
+  thunar_g_list_free_full (store->files_to_add);
+  store->files_to_add = NULL;
+}
+
+
+
+static void
+thunar_list_model_search_folder (ThunarListModel  *model,
+                                 ThunarJob        *job,
+                                 gchar            *uri,
+                                 const gchar      *search_query_c)
+{
+  GCancellable    *cancellable;
+  GFileEnumerator *enumerator;
+  GFile           *directory;
+  GList           *files_found = NULL; /* contains the matching files in this folder only */
+  const gchar     *namespace;
+  const gchar     *display_name;
+  gchar           *display_name_c; /* converted to ignore case */
+
+  cancellable = exo_job_get_cancellable (EXO_JOB (job));
+  directory = g_file_new_for_uri (uri);
+  g_free (uri);
+  namespace = G_FILE_ATTRIBUTE_STANDARD_TYPE ","
+              G_FILE_ATTRIBUTE_STANDARD_TARGET_URI ","
+              G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME ","
+              G_FILE_ATTRIBUTE_STANDARD_NAME ", recent::*";
+  enumerator = g_file_enumerate_children (directory, namespace, G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS, cancellable, NULL);
+  if (enumerator == NULL)
+    return;
+
+  /* go through every file in the folder and check if it matches */
+  while (exo_job_is_cancelled (EXO_JOB (job)) == FALSE)
+    {
+      GFile     *file;
+      GFileInfo *info;
+      GFileType  type;
+
+      /* get GFile and GFileInfo */
+      info = g_file_enumerator_next_file (enumerator, cancellable, NULL);
+      if (G_UNLIKELY (info == NULL))
+        break;
+
+      if (g_file_has_uri_scheme (directory, "recent"))
         {
-          g_free (uri);
+          file = g_file_new_for_uri (g_file_info_get_attribute_string (info, G_FILE_ATTRIBUTE_STANDARD_TARGET_URI));
+          g_object_unref (info);
+          info = g_file_query_info (file, namespace, G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS, cancellable, NULL);
+        }
+      else
+        file = g_file_get_child (directory, g_file_info_get_name (info));
+
+      type = g_file_info_get_file_type (info);
+
+      /* ignore symlinks */
+      if (type == G_FILE_TYPE_SYMBOLIC_LINK)
+        {
+          g_object_unref (file);
+          g_object_unref (info);
           continue;
         }
 
+      /* handle directories */
+      if (type == G_FILE_TYPE_DIRECTORY)
+        {
+          thunar_list_model_search_folder (model, job, g_file_get_uri (file), search_query_c);
+          /* continue; don't add non-leaf directories in the results */
+        }
+
       /* prepare entry display name */
-      display_name = thunar_file_get_display_name (temp_files->data);
+      display_name = g_file_info_get_display_name (info);
       display_name_c = g_utf8_casefold (display_name, strlen (display_name));
 
-      /* search substring */
+      /* search for substring */
       if (g_strrstr (display_name_c, search_query_c) != NULL)
-        {
-          files = g_list_prepend (files, temp_files->data);
-          g_object_ref (temp_files->data);
-        }
+        files_found = g_list_prepend (files_found, thunar_file_get (file, NULL));
 
       /* free memory */
-      g_free (uri);
       g_free (display_name_c);
+      g_object_unref (file);
+      g_object_unref (info);
     }
 
-  g_object_unref (folder);
+  g_object_unref (enumerator);
+  g_object_unref (directory);
 
-  return files;
+  if (exo_job_is_cancelled (EXO_JOB (job)))
+    return;
+
+  g_mutex_lock (&model->mutex_files_to_add);
+  model->files_to_add = g_list_concat (model->files_to_add, files_found);
+  g_mutex_unlock (&model->mutex_files_to_add);
+}
+
+
+
+/**
+ * thunar_list_model_get_folder:
+ * @store : a valid #ThunarListModel object.
+ *
+ * Return value: the #ThunarFolder @store is associated with
+ *               or %NULL if @store has no folder.
+ **/
+ThunarFolder*
+thunar_list_model_get_folder (ThunarListModel *store)
+{
+  _thunar_return_val_if_fail (THUNAR_IS_LIST_MODEL (store), NULL);
+  return store->folder;
 }
 
 
@@ -2088,7 +2283,6 @@ thunar_list_model_set_folder (ThunarListModel *store,
   GtkTreePath   *path;
   gboolean       has_handler;
   GList         *files;
-  GList         *search_files; /* used to free results of a search */
   GSequenceIter *row;
   GSequenceIter *end;
   GSequenceIter *next;
@@ -2096,11 +2290,19 @@ thunar_list_model_set_folder (ThunarListModel *store,
   _thunar_return_if_fail (THUNAR_IS_LIST_MODEL (store));
   _thunar_return_if_fail (folder == NULL || THUNAR_IS_FOLDER (folder));
 
-  search_files = NULL;
-
   /* unlink from the previously active folder (if any) */
   if (G_LIKELY (store->folder != NULL))
     {
+      thunar_list_model_cancel_search_job (store);
+
+      if (store->update_search_results_timeout_id > 0)
+        {
+          g_source_remove (store->update_search_results_timeout_id);
+          store->update_search_results_timeout_id = 0;
+        }
+      thunar_g_list_free_full (store->files_to_add);
+      store->files_to_add = NULL;
+
       /* check if we have any handlers connected for "row-deleted" */
       has_handler = g_signal_has_handler_pending (G_OBJECT (store), store->row_deleted_id, 0, FALSE);
 
@@ -2159,52 +2361,29 @@ thunar_list_model_set_folder (ThunarListModel *store,
         }
       else
         {
-          GList       *recent_infos;
-          GList       *lp;
-          gchar       *search_query_c; /* converted to ignore case */
-          const gchar *display_name;
-          gchar       *display_name_c; /* converted to ignore case */
+          gchar *search_query_c; /* converted to ignore case */
 
-          recent_infos   = gtk_recent_manager_get_items (gtk_recent_manager_get_default ());
           search_query_c = g_utf8_casefold (search_query, strlen (search_query));
           files = NULL;
 
-          /* search the current folder */
-          files = search_directory (files, thunar_folder_get_corresponding_file (folder), search_query_c);
+          /* search the current folder
+           * start a new recursive_search_job */
+          store->recursive_search_job = thunar_list_model_job_search_directory (store, search_query_c, thunar_folder_get_corresponding_file (folder));
+          exo_job_launch (EXO_JOB (store->recursive_search_job));
 
-          /* search GtkRecent */
-          for (lp = recent_infos; lp != NULL; lp = lp->next)
-            {
-              if (!gtk_recent_info_exists (lp->data))
-                continue;
-
-              /* prepare entry display name */
-              display_name = gtk_recent_info_get_display_name (lp->data);
-              display_name_c = g_utf8_casefold (display_name, strlen (display_name));
+          g_signal_connect (store->recursive_search_job, "error", G_CALLBACK (search_error), NULL);
+          g_signal_connect (store->recursive_search_job, "finished", G_CALLBACK (search_finished), store);
 
-              /* search substring */
-              if (g_strrstr (display_name_c, search_query_c) != NULL)
-                files = g_list_prepend (files, thunar_file_get_for_uri (gtk_recent_info_get_uri (lp->data), NULL));
-
-              /* free memory */
-              g_free (display_name_c);
-            }
+          /* add new results to the model every X ms */
+          store->update_search_results_timeout_id = g_timeout_add (500, add_search_files, store);
 
-          search_files = files;
-          g_list_free_full (recent_infos, (void (*) (void*)) gtk_recent_info_unref);
+          g_free (search_query_c);
         }
 
       /* insert the files */
       if (files != NULL)
         thunar_list_model_files_added (folder, files, store);
 
-      /* free search files, thunar_list_model_files_added has added its own references */
-      if (search_files != NULL)
-        {
-          thunar_g_list_free_full (search_files);
-          search_files = NULL;
-        }
-
       /* connect signals to the new folder */
       g_signal_connect (G_OBJECT (store->folder), "destroy", G_CALLBACK (thunar_list_model_folder_destroy), store);
       g_signal_connect (G_OBJECT (store->folder), "error", G_CALLBACK (thunar_list_model_folder_error), store);
diff --git a/thunar/thunar-list-model.h b/thunar/thunar-list-model.h
index a27afab4..f1c2ee2e 100644
--- a/thunar/thunar-list-model.h
+++ b/thunar/thunar-list-model.h
@@ -21,6 +21,7 @@
 #define __THUNAR_LIST_MODEL_H__
 
 #include <thunar/thunar-folder.h>
+#include <thunar/thunar-job.h>
 
 G_BEGIN_DECLS;
 
@@ -66,6 +67,9 @@ GList           *thunar_list_model_get_paths_for_pattern  (ThunarListModel  *sto
 
 gchar           *thunar_list_model_get_statusbar_text     (ThunarListModel  *store,
                                                            GList            *selected_items);
+ThunarJob       *thunar_list_model_get_job                (ThunarListModel  *store);
+void             thunar_list_model_set_job                (ThunarListModel  *store,
+                                                           ThunarJob        *job);
 
 G_END_DECLS;
 
diff --git a/thunar/thunar-standard-view.c b/thunar/thunar-standard-view.c
index ce4abc54..494ba355 100644
--- a/thunar/thunar-standard-view.c
+++ b/thunar/thunar-standard-view.c
@@ -4169,11 +4169,19 @@ thunar_standard_view_set_searching (ThunarStandardView *standard_view,
   g_free (standard_view->priv->search_query);
   standard_view->priv->search_query = g_strdup (search_query);
 
+  /* disable set cursor to avoid slowdown and memory leak */
+  if (search_query != NULL)
+    g_signal_handlers_disconnect_by_func (G_OBJECT (standard_view->model), thunar_standard_view_select_after_row_deleted, standard_view);
+
   /* initiate the search */
   g_object_ref (G_OBJECT (thunar_list_model_get_folder (standard_view->model))); /* temporarily hold a reference so the folder doesn't get deleted */
   thunar_list_model_set_folder (standard_view->model, thunar_list_model_get_folder (standard_view->model), search_query);
   g_object_unref (G_OBJECT (thunar_list_model_get_folder (standard_view->model))); /* reference no longer needed */
 
+  /* enable set cursor after finishing the search */
+  if (search_query == NULL)
+    g_signal_connect_after (G_OBJECT (standard_view->model), "row-deleted", G_CALLBACK (thunar_standard_view_select_after_row_deleted), standard_view);
+
   /* change the display name in the tab */
   g_object_notify_by_pspec (G_OBJECT (standard_view), standard_view_props[PROP_DISPLAY_NAME]);
 }
diff --git a/thunar/thunar-window.c b/thunar/thunar-window.c
index 4f14380a..c5831c77 100644
--- a/thunar/thunar-window.c
+++ b/thunar/thunar-window.c
@@ -173,6 +173,8 @@ static void      thunar_window_install_sidepane           (ThunarWindow
                                                            GType                   type);
 static void      thunar_window_start_open_location        (ThunarWindow           *window,
                                                            const gchar            *initial_text);
+static void      thunar_window_resume_search              (ThunarWindow           *window,
+                                                           const gchar            *initial_text);
 static void      thunar_window_action_open_new_tab        (ThunarWindow           *window,
                                                            GtkWidget              *menu_item);
 static void      thunar_window_action_open_new_window     (ThunarWindow           *window,
@@ -366,6 +368,7 @@ struct _ThunarWindow
   GtkWidget              *catfish_search_button;
   gchar                  *search_query;
   gboolean                is_searching;
+  gboolean                ignore_next_search_update;
 
   GType                   view_type;
   GSList                 *view_bindings;
@@ -2004,7 +2007,7 @@ thunar_window_notebook_switch_page (GtkWidget    *notebook,
   if (thunar_standard_view_get_search_query (THUNAR_STANDARD_VIEW (page)) != NULL)
     {
       gchar *str = g_strjoin (NULL, SEARCH_PREFIX, thunar_standard_view_get_search_query (THUNAR_STANDARD_VIEW (page)), NULL);
-      thunar_window_start_open_location (window, str);
+      thunar_window_resume_search (window, str);
       g_free (str);
     }
   else if (window->search_query != NULL)
@@ -2934,9 +2937,42 @@ thunar_window_start_open_location (ThunarWindow *window,
 
 
 
+static void
+thunar_window_resume_search (ThunarWindow *window,
+                             const gchar  *initial_text)
+{
+  _thunar_return_if_fail (THUNAR_IS_WINDOW (window));
+
+  /* when setting up the location entry do not resent the search query to the standard view, there is a search ongoing */
+  window->ignore_next_search_update = TRUE;
+
+  /* continue searching */
+  window->is_searching = TRUE;
+
+  /* temporary show the location toolbar, even if it is normally hidden */
+  gtk_widget_show (window->location_toolbar);
+  thunar_location_bar_request_entry (THUNAR_LOCATION_BAR (window->location_bar), initial_text);
+
+  /* change to search UI and options */
+  g_free (window->search_query);
+  window->search_query = thunar_location_bar_get_search_query (THUNAR_LOCATION_BAR (window->location_bar));
+  gtk_widget_show (window->catfish_search_button);
+  thunar_launcher_set_searching (window->launcher, TRUE);
+  if (THUNAR_IS_DETAILS_VIEW (window->view))
+    thunar_details_view_set_location_column_visible (THUNAR_DETAILS_VIEW (window->view), TRUE);
+}
+
+
+
 void
 thunar_window_update_search (ThunarWindow *window)
 {
+  if (window->ignore_next_search_update == TRUE)
+    {
+      window->ignore_next_search_update = FALSE;
+      return;
+    }
+    
   g_free (window->search_query);
   window->search_query = thunar_location_bar_get_search_query (THUNAR_LOCATION_BAR (window->location_bar));
   thunar_standard_view_set_searching (THUNAR_STANDARD_VIEW (window->view), window->search_query);
@@ -3410,6 +3446,7 @@ thunar_window_replace_view (ThunarWindow *window,
   ThunarFile     *current_directory = NULL;
   GtkWidget      *new_view;
   ThunarHistory  *history = NULL;
+  ThunarJob      *job = NULL;
   GList          *selected_thunar_files = NULL;
   gint            page_num;
   gboolean        is_current_view;
@@ -3450,7 +3487,12 @@ thunar_window_replace_view (ThunarWindow *window,
       /* save the history of the current view */
       history = NULL;
       if (THUNAR_IS_STANDARD_VIEW (view))
-        history = thunar_standard_view_copy_history (THUNAR_STANDARD_VIEW (view));
+        {
+          history = thunar_standard_view_copy_history (THUNAR_STANDARD_VIEW (view));
+
+          /* Transfer ownership of the search-job to the new view. It is the new view's responsibility to cancel the search. */
+          job = thunar_list_model_get_job (THUNAR_STANDARD_VIEW (view)->model);
+        }
     }
 
   if (is_current_view)
@@ -3513,6 +3555,8 @@ thunar_window_replace_view (ThunarWindow *window,
                                                                             G_CALLBACK (thunar_window_history_changed),
                                                                             window);
     }
+
+  thunar_list_model_set_job (THUNAR_STANDARD_VIEW (new_view)->model, job);
 }
 
 
