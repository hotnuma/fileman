diff --git a/thunar/thunar-job-operation.c b/thunar/thunar-job-operation.c
index 3e887813..2dcbbe79 100644
--- a/thunar/thunar-job-operation.c
+++ b/thunar/thunar-job-operation.c
@@ -21,6 +21,7 @@
 #include <thunar/thunar-enum-types.h>
 #include <thunar/thunar-io-jobs.h>
 #include <thunar/thunar-job-operation.h>
+#include <thunar/thunar-notify.h>
 #include <thunar/thunar-preferences.h>
 #include <thunar/thunar-private.h>
 
@@ -41,7 +42,8 @@
 static void                   thunar_job_operation_dispose            (GObject            *object);
 static void                   thunar_job_operation_finalize           (GObject            *object);
 static ThunarJobOperation    *thunar_job_operation_new_invert         (ThunarJobOperation *job_operation);
-static void                   thunar_job_operation_execute            (ThunarJobOperation *job_operation);
+static void                   thunar_job_operation_execute            (ThunarJobOperation *job_operation,
+                                                                       GError            **error);
 static gint                   thunar_job_operation_is_ancestor        (gconstpointer       descendant,
                                                                        gconstpointer       ancestor);
 static gint                   thunar_job_operation_compare            (ThunarJobOperation *operation1,
@@ -289,6 +291,29 @@ thunar_job_operation_update_trash_timestamps (ThunarJobOperation *job_operation)
 
 
 
+/* thunar_job_operation_get_kind_nick:
+ * @job_operation: A #ThunarJobOperation
+ *
+ * Get the nick name of the operation's kind in string format.
+ * The string returned should NOT be freed.
+ *
+ * Return value: A string containing the nick name of the job operation's kind
+ **/
+const gchar *
+thunar_job_operation_get_kind_nick (ThunarJobOperation *job_operation)
+{
+  GEnumClass         *enum_class;
+  GEnumValue         *enum_value;
+
+  /* the enum value of the operation kind, which will be used to get its nick name */
+  enum_class = g_type_class_ref (THUNAR_TYPE_JOB_OPERATION_KIND);
+  enum_value = g_enum_get_value (enum_class, job_operation->operation_kind);
+
+  return enum_value->value_nick;
+}
+
+
+
 /**
  * thunar_job_operation_undo:
  *
@@ -299,10 +324,9 @@ thunar_job_operation_undo (void)
 {
   ThunarJobOperation *operation_marker;
   ThunarJobOperation *inverted_operation;
-  GEnumClass         *enum_class;
-  GEnumValue         *enum_value;
   GString            *warning_body;
   gchar              *file_uri;
+  GError             *err = NULL;
 
   /* Show a warning in case there is no operation to undo */
   if (lp_undo_job_operation == NULL)
@@ -321,10 +345,6 @@ thunar_job_operation_undo (void)
   lp_redo_job_operation = lp_undo_job_operation;
   lp_undo_job_operation = g_list_previous (lp_undo_job_operation);
 
-  /* the enum value of the operation kind, which will be used to get its nick name */
-  enum_class = g_type_class_ref (THUNAR_TYPE_JOB_OPERATION_KIND);
-  enum_value = g_enum_get_value (enum_class, operation_marker->operation_kind);
-
   /* warn the user if the previous operation is empty, since then there is nothing to undo */
   if (operation_marker->source_file_list == NULL && operation_marker->target_file_list == NULL)
     {
@@ -332,37 +352,40 @@ thunar_job_operation_undo (void)
       xfce_dialog_show_warning (NULL,
                                 _("The operation you are trying to undo does not have any files "
                                   "associated with it, and thus cannot be undone. "),
-                                _("%s operation cannot be undone"), enum_value->value_nick);
+                                _("%s operation cannot be undone"), thunar_job_operation_get_kind_nick (operation_marker));
+      return;
     }
-  else
-    {
-      /* if there were files overwritten in the operation, warn about them */
-      if (operation_marker->overwritten_file_list != NULL)
-        {
-          gint index;
 
-          index = 1; /* one indexed for the dialog */
-          warning_body = g_string_new (_("The following files were overwritten in the operation "
-                                         "you are trying to undo and cannot be restored:\n"));
+    /* if there were files overwritten in the operation, warn about them */
+    if (operation_marker->overwritten_file_list != NULL)
+      {
+        gint index;
 
-          for (GList *lp = operation_marker->overwritten_file_list; lp != NULL; lp = lp->next, index++)
-            {
-              file_uri = g_file_get_uri (lp->data);
-              g_string_append_printf (warning_body, "%d. %s\n", index, file_uri);
-              g_free (file_uri);
-            }
+        index = 1; /* one indexed for the dialog */
+        warning_body = g_string_new (_("The following files were overwritten in the operation "
+                                       "you are trying to undo and cannot be restored:\n"));
 
-          xfce_dialog_show_warning (NULL,
-                                    warning_body->str,
-                                    _("%s operation can only be partially undone"), enum_value->value_nick);
+        for (GList *lp = operation_marker->overwritten_file_list; lp != NULL; lp = lp->next, index++)
+          {
+            file_uri = g_file_get_uri (lp->data);
+            g_string_append_printf (warning_body, "%d. %s\n", index, file_uri);
+            g_free (file_uri);
+          }
 
-          g_string_free (warning_body, TRUE);
-        }
+        xfce_dialog_show_warning (NULL,
+                                  warning_body->str,
+                                  _("%s operation can only be partially undone"),
+                                  thunar_job_operation_get_kind_nick (operation_marker));
 
-      inverted_operation = thunar_job_operation_new_invert (operation_marker);
-      thunar_job_operation_execute (inverted_operation);
-      g_object_unref (inverted_operation);
-    }
+        g_string_free (warning_body, TRUE);
+      }
+
+    inverted_operation = thunar_job_operation_new_invert (operation_marker);
+    thunar_job_operation_execute (inverted_operation, &err);
+    g_object_unref (inverted_operation);
+
+    if (err == NULL)
+      thunar_notify_undo (operation_marker);
 }
 
 
@@ -376,10 +399,9 @@ void
 thunar_job_operation_redo (void)
 {
   ThunarJobOperation *operation_marker;
-  GEnumClass         *enum_class;
-  GEnumValue         *enum_value;
   GString            *warning_body;
   gchar              *file_uri;
+  GError             *err = NULL;
 
   /* Show a warning in case there is no operation to undo */
   if (lp_redo_job_operation == NULL)
@@ -397,10 +419,6 @@ thunar_job_operation_redo (void)
   lp_undo_job_operation = lp_redo_job_operation;
   lp_redo_job_operation = g_list_next (lp_redo_job_operation);
 
-  /* the enum value of the operation kind, which will be used to get its nick name */
-  enum_class = g_type_class_ref (THUNAR_TYPE_JOB_OPERATION_KIND);
-  enum_value = g_enum_get_value (enum_class, operation_marker->operation_kind);
-
   /* warn the user if the previous operation is empty, since then there is nothing to undo */
   if (operation_marker->source_file_list == NULL && operation_marker->target_file_list == NULL)
     {
@@ -408,35 +426,38 @@ thunar_job_operation_redo (void)
       xfce_dialog_show_warning (NULL,
                                 _("The operation you are trying to redo does not have any files "
                                   "associated with it, and thus cannot be redone. "),
-                                _("%s operation cannot be redone"), enum_value->value_nick);
+                                _("%s operation cannot be redone"), thunar_job_operation_get_kind_nick (operation_marker));
+      return;
     }
-  else
-    {
-      /* if there were files overwritten in the operation, warn about them */
-      if (operation_marker->overwritten_file_list != NULL)
-        {
-          gint index;
 
-          index = 1; /* one indexed for the dialog */
-          warning_body = g_string_new (_("The following files were overwritten in the operation "
-                                         "you are trying to redo and cannot be restored:\n"));
+    /* if there were files overwritten in the operation, warn about them */
+    if (operation_marker->overwritten_file_list != NULL)
+      {
+        gint index;
 
-          for (GList *lp = operation_marker->overwritten_file_list; lp != NULL; lp = lp->next, index++)
-            {
-              file_uri = g_file_get_uri (lp->data);
-              g_string_append_printf (warning_body, "%d. %s\n", index, file_uri);
-              g_free (file_uri);
-            }
+        index = 1; /* one indexed for the dialog */
+        warning_body = g_string_new (_("The following files were overwritten in the operation "
+                                       "you are trying to redo and cannot be restored:\n"));
+
+        for (GList *lp = operation_marker->overwritten_file_list; lp != NULL; lp = lp->next, index++)
+          {
+            file_uri = g_file_get_uri (lp->data);
+            g_string_append_printf (warning_body, "%d. %s\n", index, file_uri);
+            g_free (file_uri);
+          }
 
-          xfce_dialog_show_warning (NULL,
-                                    warning_body->str,
-                                    _("%s operation can only be partially redone"), enum_value->value_nick);
+        xfce_dialog_show_warning (NULL,
+                                  warning_body->str,
+                                  _("%s operation can only be partially redone"),
+                                  thunar_job_operation_get_kind_nick (operation_marker));
 
-          g_string_free (warning_body, TRUE);
-        }
+        g_string_free (warning_body, TRUE);
+      }
 
-      thunar_job_operation_execute (operation_marker);
-    }
+    thunar_job_operation_execute (operation_marker, &err);
+
+    if (err == NULL)
+      thunar_notify_redo (operation_marker);
 }
 
 
@@ -560,19 +581,22 @@ thunar_job_operation_new_invert (ThunarJobOperation *job_operation)
 
 /* thunar_job_operation_execute:
  * @job_operation: a #ThunarJobOperation
+ * @error: A #GError to propagate any errors encountered.
  *
  * Executes the given @job_operation, depending on what kind of an operation it is.
  **/
-void
-thunar_job_operation_execute (ThunarJobOperation *job_operation)
+static void
+thunar_job_operation_execute (ThunarJobOperation *job_operation,
+                              GError            **error)
 {
   ThunarApplication *application;
   GList             *thunar_file_list = NULL;
-  GError            *error            = NULL;
+  GError            *err              = NULL;
   ThunarJob         *job              = NULL;
   ThunarFile        *thunar_file;
   GFile             *parent_dir;
   gchar             *display_name;
+  GFile             *template_file;
 
   _thunar_return_if_fail (THUNAR_IS_JOB_OPERATION (job_operation));
 
@@ -590,12 +614,12 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
                 continue;
               }
 
-            thunar_file = thunar_file_get (lp->data, &error);
+            thunar_file = thunar_file_get (lp->data, &err);
 
-            if (error != NULL)
+            if (err != NULL)
               {
-                g_warning ("Failed to convert GFile to ThunarFile: %s", error->message);
-                g_clear_error (&error);
+                g_warning ("Failed to convert GFile to ThunarFile: %s", err->message);
+                g_clear_error (&err);
               }
 
             if (!THUNAR_IS_FILE (thunar_file))
@@ -617,23 +641,24 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
         for (GList *lp = job_operation->target_file_list; lp != NULL; lp = lp->next)
           {
             parent_dir = g_file_get_parent (lp->data);
-            g_file_make_directory_with_parents (parent_dir, NULL, &error);
+            g_file_make_directory_with_parents (parent_dir, NULL, &err);
             g_object_unref (parent_dir);
 
-            if (error != NULL)
+            if (err != NULL)
             {
               /* there is no issue if the target directory already exists */
-              if (error->code == G_IO_ERROR_EXISTS)
+              if (err->code == G_IO_ERROR_EXISTS)
                 {
-                  g_clear_error (&error);
+                  g_clear_error (&err);
                   continue;
                 }
 
-              /* output the error message to console otherwise and abort */
+              /* output the err message to console otherwise and abort */
               g_warning ("Error while moving files: %s\n"
                          "Aborting operation\n",
-                         error->message);
-              g_clear_error (&error);
+                         err->message);
+              g_propagate_error (error, err);
+              g_clear_error (&err);
               g_object_unref (application);
               return;
             }
@@ -650,12 +675,13 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
              slp = slp->next, tlp = tlp->next)
           {
             display_name = thunar_g_file_get_display_name (tlp->data);
-            thunar_file = thunar_file_get (slp->data, &error);
+            thunar_file = thunar_file_get (slp->data, &err);
 
-            if (error != NULL)
+            if (err != NULL)
               {
-                g_warning ("Error while renaming files: %s\n", error->message);
-                g_clear_error (&error);
+                g_warning ("Error while renaming files: %s\n", err->message);
+                g_propagate_error (error, err);
+                g_clear_error (&err);
 
                 g_free (display_name);
                 g_object_unref (thunar_file);
@@ -672,12 +698,13 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
         break;
 
       case THUNAR_JOB_OPERATION_KIND_RESTORE:
-        thunar_job_operation_restore_from_trash (job_operation, &error);
+        thunar_job_operation_restore_from_trash (job_operation, &err);
 
-        if (error != NULL)
+        if (err != NULL)
           {
-            g_warning ("Error while restoring files: %s\n", error->message);
-            g_clear_error (&error);
+            g_warning ("Error while restoring files: %s\n", err->message);
+            g_propagate_error (error, err);
+            g_clear_error (&err);
           }
         break;
 
@@ -688,7 +715,7 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
         break;
 
       case THUNAR_JOB_OPERATION_KIND_CREATE_FILE:
-        GFile *template_file = NULL;
+        template_file = NULL;
         if (job_operation->source_file_list != NULL)
           template_file = job_operation->source_file_list->data;
         thunar_application_creat (application, NULL,
diff --git a/thunar/thunar-job-operation.h b/thunar/thunar-job-operation.h
index e39cc813..a5c5e842 100644
--- a/thunar/thunar-job-operation.h
+++ b/thunar/thunar-job-operation.h
@@ -34,7 +34,8 @@ void                   thunar_job_operation_add                     (ThunarJobOp
 void                   thunar_job_operation_overwrite               (ThunarJobOperation    *job_operation,
                                                                      GFile                 *overwritten_file);
 void                   thunar_job_operation_commit                  (ThunarJobOperation    *job_operation);
-void                   thunar_job_operation_update_trash_timestamps (ThunarJobOperation *job_operation);
+void                   thunar_job_operation_update_trash_timestamps (ThunarJobOperation    *job_operation);
+const gchar           *thunar_job_operation_get_kind_nick           (ThunarJobOperation    *job_operation);
 void                   thunar_job_operation_undo                    (void);
 void                   thunar_job_operation_redo                    (void);
 gboolean               thunar_job_operation_can_undo                (void);
diff --git a/thunar/thunar-notify.c b/thunar/thunar-notify.c
index a125dedd..50ac0185 100644
--- a/thunar/thunar-notify.c
+++ b/thunar/thunar-notify.c
@@ -38,6 +38,8 @@
 #ifdef HAVE_LIBNOTIFY
 static gboolean thunar_notify_initted = FALSE;
 
+static void thunar_notify_undo_or_redo (ThunarJobOperation *operation, gboolean undo);
+
 
 
 static gboolean
@@ -302,6 +304,74 @@ thunar_notify_finish (ThunarDevice *device)
 
 
 
+void
+thunar_notify_undo (ThunarJobOperation *operation)
+{
+  if (!thunar_notify_init ())
+    return;
+
+  thunar_notify_undo_or_redo (operation, TRUE);
+}
+
+
+
+void
+thunar_notify_redo (ThunarJobOperation *operation)
+{
+  thunar_notify_undo_or_redo (operation, FALSE);
+}
+
+
+
+static void
+thunar_notify_undo_or_redo (ThunarJobOperation *operation,
+                            gboolean            undo)
+{
+#ifdef HAVE_LIBNOTIFY
+  NotifyNotification *notification;
+  gchar              *summary;
+  gchar              *message;
+  gchar              *icon_name;
+
+  /* prepare the notification args according to whether it's an undo operation
+   * or not, in which case it must be a redo operation */
+  if (undo)
+    {
+      summary = g_strdup (_("Undo performed"));
+      message = g_strdup_printf (_("%s operation was undone"), thunar_job_operation_get_kind_nick (operation));
+      icon_name = g_strdup ("edit-undo-symbolic");
+    }
+  else
+    {
+      summary = g_strdup (_("Redo performed"));
+      message = g_strdup_printf (_("%s operation was redone"), thunar_job_operation_get_kind_nick (operation));
+      icon_name = g_strdup ("edit-redo-symbolic");
+    }
+
+
+  /* create notification */
+#ifdef NOTIFY_CHECK_VERSION
+#if NOTIFY_CHECK_VERSION (0, 7, 0)
+  notification = notify_notification_new (summary, message, icon_name);
+#else
+  notification = notify_notification_new (summary, message, icon_name, NULL);
+#endif
+#else
+  notification = notify_notification_new (summary, message, icon_name, NULL);
+#endif
+
+  notify_notification_set_urgency (notification, NOTIFY_URGENCY_LOW);
+  notify_notification_set_timeout (notification, NOTIFY_EXPIRES_DEFAULT);
+  notify_notification_show (notification, NULL);
+
+  g_free (summary);
+  g_free (message);
+  g_free (icon_name);
+#endif
+}
+
+
+
 void
 thunar_notify_uninit (void)
 {
diff --git a/thunar/thunar-notify.h b/thunar/thunar-notify.h
index 8664107a..e5092dfa 100644
--- a/thunar/thunar-notify.h
+++ b/thunar/thunar-notify.h
@@ -23,18 +23,23 @@
 
 #include <glib.h>
 #include <thunar/thunar-device.h>
+#include <thunar/thunar-job-operation.h>
 
 G_BEGIN_DECLS
 
-void thunar_notify_unmount        (ThunarDevice *device);
+void     thunar_notify_unmount     (ThunarDevice *device);
 
-void thunar_notify_eject          (ThunarDevice *device);
+void     thunar_notify_eject       (ThunarDevice *device);
 
-void thunar_notify_progress       (ThunarDevice *device, const gchar *message_to_show);
+void     thunar_notify_progress    (ThunarDevice *device, const gchar *message_to_show);
 
-void thunar_notify_finish         (ThunarDevice *device);
+void     thunar_notify_finish      (ThunarDevice *device);
 
-void thunar_notify_uninit         (void);
+void     thunar_notify_undo        (ThunarJobOperation *operation);
+
+void     thunar_notify_redo        (ThunarJobOperation *operation);
+
+void     thunar_notify_uninit      (void);
 
 G_END_DECLS
 
