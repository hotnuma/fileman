diff --git a/docs/reference/thunarx/thunarx.actions b/docs/reference/thunarx/thunarx.actions
deleted file mode 100644
index e69de29b..00000000
diff --git a/thunar/thunar-enum-types.c b/thunar/thunar-enum-types.c
index e512b1f5..1f71d044 100644
--- a/thunar/thunar-enum-types.c
+++ b/thunar/thunar-enum-types.c
@@ -548,3 +548,26 @@ thunar_use_partial_get_type (void)
 
   return type;
 }
+
+
+
+GType
+thunar_verify_file_get_type (void)
+{
+  static GType type = G_TYPE_INVALID;
+
+  if (G_UNLIKELY (type == G_TYPE_INVALID))
+    {
+      static const GEnumValue values[] =
+      {
+        { THUNAR_VERIFY_FILE_MODE_DISABLED,    "THUNAR_VERIFY_FILE_MODE_NEVER",    N_("Never"),},
+        { THUNAR_VERIFY_FILE_MODE_REMOTE_ONLY, "THUNAR_VERIFY_FILE_MODE_REMOTE",   N_("Only for remote location"),},
+        { THUNAR_VERIFY_FILE_MODE_ALWAYS,      "THUNAR_VERIFY_FILE_MODE_ALWAYS",   N_("Always"),},
+        { 0,                                   NULL,                               NULL,},
+      };
+
+      type = g_enum_register_static (I_("ThunarVerifyFileMode"), values);
+    }
+
+  return type;
+}
diff --git a/thunar/thunar-enum-types.h b/thunar/thunar-enum-types.h
index 25837961..0d65a54e 100644
--- a/thunar/thunar-enum-types.h
+++ b/thunar/thunar-enum-types.h
@@ -350,6 +350,25 @@ GType thunar_use_partial_get_type (void) G_GNUC_CONST;
 
 
 
+#define THUNAR_TYPE_VERIFY_FILE_MODE (thunar_verify_file_get_type ())
+
+/**
+ * ThunarUsePartialMode:
+ * @THUNAR_VERIFY_FILE_MODE_DISABLED    : Disable file checksum
+ * @THUNAR_VERIFY_FILE_MODE_REMOTE_ONLY : Only when src/dst is remote
+ * @THUNAR_VERIFY_FILE_MODE_ALWAYS      : Always verify file checksum
+ **/
+typedef enum
+{
+  THUNAR_VERIFY_FILE_MODE_DISABLED,
+  THUNAR_VERIFY_FILE_MODE_REMOTE_ONLY,
+  THUNAR_VERIFY_FILE_MODE_ALWAYS,
+} ThunarVerifyFileMode;
+
+GType thunar_verify_file_get_type (void) G_GNUC_CONST;
+
+
+
 /**
  * ThunarNewTabBehavior:
  * @THUNAR_NEW_TAB_BEHAVIOR_FOLLOW_PREFERENCE   : switching to the new tab or not is controlled by a preference.
diff --git a/thunar/thunar-gio-extensions.c b/thunar/thunar-gio-extensions.c
index f13e5204..c7fab049 100644
--- a/thunar/thunar-gio-extensions.c
+++ b/thunar/thunar-gio-extensions.c
@@ -651,7 +651,7 @@ thunar_g_file_list_get_type (void)
  * @destination            : destination #GFile
  * @flags                  : set of #GFileCopyFlags
  * @use_partial            : option to use *.partial~
- * @cancellable            : (nullable): optional GCancellable object
+ * @cancellable            : (nullable): optional #GCancellable object
  * @progress_callback      : (nullable) (scope call): function to callback with progress information
  * @progress_callback_data : (clousure): user data to pass to @progress_callback
  * @error                  : (nullable): #GError to set on error
@@ -772,6 +772,42 @@ thunar_g_file_copy (GFile                *source,
 
 
 
+/**
+ * thunar_g_file_compare_checksum:
+ * @file_a      : a #GFile
+ * @file_b      : a #GFile
+ * @cancellable : (nullalble): optional #GCancellable object
+ * @error       : (nullalble): optional #GError
+ *
+ * Compare @file_a and @file_b with checksum.
+ *
+ * Return value: %TRUE if a checksum matches, %FALSE if not.
+ **/
+gboolean
+thunar_g_file_compare_checksum (GFile        *file_a,
+                                GFile        *file_b,
+                                GCancellable *cancellable,
+                                GError      **error)
+{
+  gchar   *str_a;
+  gchar   *str_b;
+  gboolean is_equal;
+
+  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
+
+  str_a = xfce_g_file_create_checksum (file_a, cancellable, error);
+  str_b = xfce_g_file_create_checksum (file_b, cancellable, error);
+
+  is_equal = g_strcmp0 (str_a, str_b) == 0;
+
+  g_free (str_a);
+  g_free (str_b);
+
+  return is_equal;
+}
+
+
+
 /**
  * thunar_g_file_list_new_from_string:
  * @string : a string representation of an URI list.
diff --git a/thunar/thunar-gio-extensions.h b/thunar/thunar-gio-extensions.h
index 84e63520..5462c3d8 100644
--- a/thunar/thunar-gio-extensions.h
+++ b/thunar/thunar-gio-extensions.h
@@ -76,6 +76,11 @@ gboolean     thunar_g_file_copy                     (GFile                *sourc
                                                      gpointer              progress_callback_data,
                                                      GError              **error);
 
+gboolean     thunar_g_file_compare_checksum         (GFile                *file_a,
+                                                     GFile                *file_b,
+                                                     GCancellable         *cancellable,
+                                                     GError              **error);
+
 /**
  * THUNAR_TYPE_G_FILE_LIST:
  *
diff --git a/thunar/thunar-preferences-dialog.c b/thunar/thunar-preferences-dialog.c
index bf90ff88..5c0d132c 100644
--- a/thunar/thunar-preferences-dialog.c
+++ b/thunar/thunar-preferences-dialog.c
@@ -988,6 +988,37 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
   gtk_widget_show (combo);
 
+  label = gtk_label_new_with_mnemonic (_("Verify file checksum on copy"));
+  gtk_label_set_xalign (GTK_LABEL (label), 0.0f);
+  gtk_grid_attach (GTK_GRID (grid), label, 0, 2, 1, 1);
+  gtk_widget_show (label);
+  gtk_widget_set_tooltip_text (label, _("Compare original file and copy with checksum. "
+                                        "This will prevent corrupted files. "
+                                        "Enabling this option will largely increase copy time."));
+
+  combo = gtk_combo_box_text_new ();
+  type = g_type_class_ref (THUNAR_TYPE_VERIFY_FILE_MODE);
+  gtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo),
+                                  g_enum_get_value (type, THUNAR_VERIFY_FILE_MODE_DISABLED)->value_nick);
+  gtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo),
+                                  g_enum_get_value (type, THUNAR_VERIFY_FILE_MODE_REMOTE_ONLY)->value_nick);
+  gtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo),
+                                  g_enum_get_value (type, THUNAR_VERIFY_FILE_MODE_ALWAYS)->value_nick);
+  g_type_class_unref (type);
+  g_object_bind_property_full (G_OBJECT (dialog->preferences),
+                               "misc-transfer-verify-file",
+                               G_OBJECT (combo),
+                               "active",
+                               G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE,
+                               transform_enum_value_to_index,
+                               transform_index_to_enum_value,
+                               (gpointer) thunar_verify_file_get_type, NULL);
+  gtk_widget_set_hexpand (combo, TRUE);
+  gtk_grid_attach (GTK_GRID (grid), combo, 1, 2, 1, 1);
+  thunar_gtk_label_set_a11y_relation (GTK_LABEL (label), combo);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
+  gtk_widget_show (combo);
+
   frame = g_object_new (GTK_TYPE_FRAME, "border-width", 0, "shadow-type", GTK_SHADOW_NONE, NULL);
   gtk_box_pack_start (GTK_BOX (vbox), frame, FALSE, TRUE, 0);
   gtk_widget_show (frame);
diff --git a/thunar/thunar-preferences.c b/thunar/thunar-preferences.c
index 71fcc1c6..f504fcd4 100644
--- a/thunar/thunar-preferences.c
+++ b/thunar/thunar-preferences.c
@@ -108,6 +108,7 @@ enum
   PROP_MISC_PARALLEL_COPY_MODE,
   PROP_MISC_WINDOW_ICON,
   PROP_MISC_TRANSFER_USE_PARTIAL,
+  PROP_MISC_TRANSFER_VERIFY_FILE,
   PROP_SHORTCUTS_ICON_EMBLEMS,
   PROP_SHORTCUTS_ICON_SIZE,
   PROP_TREE_ICON_EMBLEMS,
@@ -913,6 +914,19 @@ thunar_preferences_class_init (ThunarPreferencesClass *klass)
                        THUNAR_USE_PARTIAL_MODE_DISABLED,
                        EXO_PARAM_READWRITE);
 
+  /**
+   * ThunarPreferences:misc-transfer-verify-file:
+   *
+   * Whether to verify copied file with checksum.
+   **/
+  preferences_props[PROP_MISC_TRANSFER_VERIFY_FILE] =
+    g_param_spec_enum ("misc-transfer-verify-file",
+                       "MiscTransferVerifyFile",
+                       NULL,
+                       THUNAR_TYPE_VERIFY_FILE_MODE,
+                       THUNAR_VERIFY_FILE_MODE_DISABLED,
+                       EXO_PARAM_READWRITE);
+
   /**
    * ThunarPreferences:misc-confirm-close-multiple-tabs:
    *
diff --git a/thunar/thunar-transfer-job.c b/thunar/thunar-transfer-job.c
index 4ebdbd12..3c751301 100644
--- a/thunar/thunar-transfer-job.c
+++ b/thunar/thunar-transfer-job.c
@@ -49,6 +49,7 @@ enum
   PROP_FILE_SIZE_BINARY,
   PROP_PARALLEL_COPY_MODE,
   PROP_TRANSFER_USE_PARTIAL,
+  PROP_TRANSFER_VERIFY_FILE,
 };
 
 
@@ -91,19 +92,20 @@ struct _ThunarTransferJob
   gchar                  *target_device_fs_id;
   gboolean                is_target_device_local;
 
-  gint64                  start_time;
-  gint64                  last_update_time;
-  guint64                 last_total_progress;
+  gint64                  start_time;              /* us(microseconds) */
+  gint64                  last_update_time;        /* us */
+  guint64                 last_total_progress;     /* byte */
 
-  guint64                 total_size;
-  guint64                 total_progress;
-  guint64                 file_progress;
-  guint64                 transfer_rate;
+  guint64                 total_size;              /* byte */
+  guint64                 total_progress;          /* byte */
+  guint64                 file_progress;           /* byte */
+  guint64                 transfer_rate;           /* byte/s */
 
   ThunarPreferences      *preferences;
   gboolean                file_size_binary;
   ThunarParallelCopyMode  parallel_copy_mode;
   ThunarUsePartialMode    transfer_use_partial;
+  ThunarVerifyFileMode    transfer_verify_file;
 };
 
 struct _ThunarTransferNode
@@ -176,6 +178,20 @@ thunar_transfer_job_class_init (ThunarTransferJobClass *klass)
                                                       THUNAR_TYPE_USE_PARTIAL_MODE,
                                                       THUNAR_USE_PARTIAL_MODE_DISABLED,
                                                       EXO_PARAM_READWRITE));
+
+  /**
+   * ThunarPropertiesdialog:transfer_verify_file:
+   *
+   * Whether to verify copied file with checksum
+   **/
+  g_object_class_install_property (gobject_class,
+                                   PROP_TRANSFER_VERIFY_FILE,
+                                   g_param_spec_enum ("transfer-verify-file",
+                                                      "TransferVerifyFile",
+                                                      NULL,
+                                                      THUNAR_TYPE_VERIFY_FILE_MODE,
+                                                      THUNAR_VERIFY_FILE_MODE_DISABLED,
+                                                      EXO_PARAM_READWRITE));
 }
 
 
@@ -193,6 +209,9 @@ thunar_transfer_job_init (ThunarTransferJob *job)
   g_object_bind_property (job->preferences, "misc-transfer-use-partial",
                           job,              "transfer-use-partial",
                           G_BINDING_SYNC_CREATE);
+  g_object_bind_property (job->preferences, "misc-transfer-verify-file",
+                          job,              "transfer-verify-file",
+                          G_BINDING_SYNC_CREATE);
 
   job->type = 0;
   job->source_node_list = NULL;
@@ -252,6 +271,9 @@ thunar_transfer_job_get_property (GObject     *object,
     case PROP_TRANSFER_USE_PARTIAL:
       g_value_set_enum (value, job->transfer_use_partial);
       break;
+    case PROP_TRANSFER_VERIFY_FILE:
+      g_value_set_enum (value, job->transfer_verify_file);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -279,6 +301,9 @@ thunar_transfer_job_set_property (GObject      *object,
     case PROP_TRANSFER_USE_PARTIAL:
       job->transfer_use_partial = g_value_get_enum (value);
       break;
+    case PROP_TRANSFER_VERIFY_FILE:
+      job->transfer_verify_file = g_value_get_enum (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -330,7 +355,11 @@ thunar_transfer_job_progress (goffset  current_num_bytes,
       expired_time = current_time - job->last_update_time;
 
       /* notify callers not more then every 500ms */
-      if (expired_time > (500 * 1000))
+      /* force update after transfer when it took more than (approx.) 500ms */
+      /* the actual code checks if (file size [byte]) > (transfer rate [byte/s]) * (0.5 [s]) */
+      /* which means that the file is bigger than what is transferred in 500ms on average */
+      if (expired_time > (500 * 1000)
+          || (current_num_bytes == total_num_bytes && total_num_bytes > (goffset) (job->transfer_rate / 2)))
         {
           /* calculate the transfer rate in the last expired time */
           transfer_rate = (job->total_progress - job->last_total_progress) / ((gfloat) expired_time / G_USEC_PER_SEC);
@@ -441,6 +470,7 @@ ttj_copy_file (ThunarTransferJob *job,
   GFileType  target_type;
   gboolean   target_exists;
   gboolean   use_partial;
+  gboolean   verify_file;
   GError    *err = NULL;
 
   _thunar_return_val_if_fail (THUNAR_IS_TRANSFER_JOB (job), FALSE);
@@ -491,11 +521,43 @@ ttj_copy_file (ThunarTransferJob *job,
     default:
       use_partial = FALSE;
     }
+
   /* try to copy the file */
   thunar_g_file_copy (source_file, target_file, copy_flags, use_partial,
                       exo_job_get_cancellable (EXO_JOB (job)),
                       thunar_transfer_job_progress, job, &err);
 
+  switch (job->transfer_verify_file)
+    {
+    case THUNAR_VERIFY_FILE_MODE_REMOTE_ONLY:
+      verify_file = !g_file_is_native (source_file) || !g_file_is_native (target_file);
+      break;
+    case THUNAR_VERIFY_FILE_MODE_ALWAYS:
+      verify_file = TRUE;
+      break;
+    default:
+      verify_file = FALSE;
+    }
+
+  /* Only verify when the file is a regular file */
+  verify_file = verify_file && (g_file_query_file_type (source_file, G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS, exo_job_get_cancellable (EXO_JOB (job))) == G_FILE_TYPE_REGULAR);
+
+  if (verify_file && err == NULL)
+    {
+      gboolean is_equal;
+      exo_job_info_message (EXO_JOB (job), _("Comparing checksums..."));
+      is_equal = thunar_g_file_compare_checksum (source_file, target_file,
+                                                 exo_job_get_cancellable (EXO_JOB (job)), &err);
+
+      /* if the copied file is corrupted and yet no error*/
+      if (!is_equal && err == NULL)
+        {
+          err = g_error_new (G_FILE_ERROR,
+                             G_FILE_ERROR_AGAIN,
+                             "Copied file does not match with the original");
+        }
+    }
+
   /**
    * MR !127 notes:
    * (Discusssion: https://gitlab.xfce.org/xfce/thunar/-/merge_requests/127)
@@ -519,7 +581,6 @@ ttj_copy_file (ThunarTransferJob *job,
   /* check if there were errors */
   if (G_UNLIKELY (err != NULL && err->domain == G_IO_ERROR))
     {
-      g_info ("%s", err->message);
       if (err->code == G_IO_ERROR_WOULD_MERGE
           || (err->code == G_IO_ERROR_EXISTS
               && source_type == G_FILE_TYPE_DIRECTORY
@@ -1232,8 +1293,6 @@ thunar_transfer_job_move_file (ExoJob                *job,
   exo_job_info_message (job, _("Trying to move \"%s\""),
                         g_file_info_get_display_name (info));
 
-  g_info ("%s", g_file_info_get_display_name (info));
-
   move_successful = g_file_move (node->source_file,
                                  tp->data,
                                  move_flags,
