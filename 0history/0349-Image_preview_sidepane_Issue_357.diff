diff --git a/thunar/thunar-enum-types.c b/thunar/thunar-enum-types.c
index 880d197e..7316dd2c 100644
--- a/thunar/thunar-enum-types.c
+++ b/thunar/thunar-enum-types.c
@@ -691,3 +691,24 @@ thunar_operation_log_mode_get_type (void)
 
   return type;
 }
+
+GType
+thunar_image_preview_mode_get_type (void)
+{
+  static GType type = G_TYPE_INVALID;
+
+  if (G_UNLIKELY (type == G_TYPE_INVALID))
+    {
+      static const GEnumValue values[] =
+      {
+        { THUNAR_IMAGE_PREVIEW_MODE_STANDALONE, "THUNAR_IMAGE_PREVIEW_MODE_STANDALONE", N_("Standalone Image Preview") },
+        { THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED,   "THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED",   N_("Embedded Image Preview") },
+        { 0,                                    NULL,                                   NULL }
+      };
+
+      type = g_enum_register_static ("ThunarOperationLogMode", values);
+    }
+
+  return type;
+}
+
diff --git a/thunar/thunar-enum-types.h b/thunar/thunar-enum-types.h
index bbaca61d..f63092be 100644
--- a/thunar/thunar-enum-types.h
+++ b/thunar/thunar-enum-types.h
@@ -188,7 +188,9 @@ typedef enum
   THUNAR_THUMBNAIL_SIZE_NORMAL,
   THUNAR_THUMBNAIL_SIZE_LARGE,
   THUNAR_THUMBNAIL_SIZE_X_LARGE,
-  THUNAR_THUMBNAIL_SIZE_XX_LARGE
+  THUNAR_THUMBNAIL_SIZE_XX_LARGE,
+
+  THUNAR_THUMBNAIL_SIZE_DEFAULT = -1
 } ThunarThumbnailSize;
 
 GType       thunar_thumbnail_size_get_type (void)                               G_GNUC_CONST;
@@ -462,6 +464,22 @@ typedef enum
 
 GType thunar_operation_log_mode_get_type (void) G_GNUC_CONST;
 
+/**
+ * ThunarImagePreviewMode:
+ *
+ * Specify control logging for operations.
+ **/
+
+#define THUNAR_TYPE_IMAGE_PREVIEW_MODE (thunar_image_preview_mode_get_type ())
+
+typedef enum
+{
+  THUNAR_IMAGE_PREVIEW_MODE_STANDALONE,
+  THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED,
+} ThunarImagePreviewMode;
+
+GType thunar_image_preview_mode_get_type (void) G_GNUC_CONST;
+
 G_END_DECLS;
 
 #endif /* !__THUNAR_ENUM_TYPES_H__ */
diff --git a/thunar/thunar-file.c b/thunar/thunar-file.c
index 52424304..c2d598d9 100644
--- a/thunar/thunar-file.c
+++ b/thunar/thunar-file.c
@@ -3689,10 +3689,6 @@ thunar_file_is_desktop (const ThunarFile *file)
 const gchar *
 thunar_file_get_thumbnail_path (ThunarFile *file, ThunarThumbnailSize thumbnail_size)
 {
-  GChecksum *checksum;
-  gchar     *filename;
-  gchar     *uri;
-
   _thunar_return_val_if_fail (THUNAR_IS_FILE (file), NULL);
 
   /* if the thumbstate is known to be not there, return null */
@@ -3700,66 +3696,81 @@ thunar_file_get_thumbnail_path (ThunarFile *file, ThunarThumbnailSize thumbnail_
     return NULL;
 
   if (G_UNLIKELY (file->thumbnail_path == NULL))
+    file->thumbnail_path = thunar_file_get_thumbnail_path_forced (file, thumbnail_size);
+
+  return file->thumbnail_path;
+}
+
+
+
+gchar *
+thunar_file_get_thumbnail_path_forced (ThunarFile *file, ThunarThumbnailSize thumbnail_size)
+{
+  GChecksum *checksum;
+  gchar     *filename;
+  gchar     *uri;
+  gchar     *thumbnail_path = NULL;
+
+  _thunar_return_val_if_fail (THUNAR_IS_FILE (file), NULL);
+
+  checksum = g_checksum_new (G_CHECKSUM_MD5);
+  if (G_LIKELY (checksum != NULL))
     {
-      checksum = g_checksum_new (G_CHECKSUM_MD5);
-      if (G_LIKELY (checksum != NULL))
+      uri = thunar_file_dup_uri (file);
+      g_checksum_update (checksum, (const guchar *) uri, strlen (uri));
+      g_free (uri);
+
+      filename = g_strconcat (g_checksum_get_string (checksum), ".png", NULL);
+
+      /* The thumbnail is in the format/location
+       * $XDG_CACHE_HOME/thumbnails/(nromal|large)/MD5_Hash_Of_URI.png
+       * for version 0.8.0 if XDG_CACHE_HOME is defined, otherwise
+       * /homedir/.thumbnails/(normal|large)/MD5_Hash_Of_URI.png
+       * will be used, which is also always used for versions prior
+       * to 0.7.0.
+       */
+
+      /* build and check if the thumbnail is in the new location */
+      thumbnail_path = g_build_path ("/", g_get_user_cache_dir(),
+                                           "thumbnails", thunar_thumbnail_size_get_nick (thumbnail_size),
+                                           filename, NULL);
+
+      if (!g_file_test(thumbnail_path, G_FILE_TEST_EXISTS))
         {
-          uri = thunar_file_dup_uri (file);
-          g_checksum_update (checksum, (const guchar *) uri, strlen (uri));
-          g_free (uri);
-
-          filename = g_strconcat (g_checksum_get_string (checksum), ".png", NULL);
-
-          /* The thumbnail is in the format/location
-           * $XDG_CACHE_HOME/thumbnails/(nromal|large)/MD5_Hash_Of_URI.png
-           * for version 0.8.0 if XDG_CACHE_HOME is defined, otherwise
-           * /homedir/.thumbnails/(normal|large)/MD5_Hash_Of_URI.png
-           * will be used, which is also always used for versions prior
-           * to 0.7.0.
-           */
-
-          /* build and check if the thumbnail is in the new location */
-          file->thumbnail_path = g_build_path ("/", g_get_user_cache_dir(),
-                                               "thumbnails", thunar_thumbnail_size_get_nick (thumbnail_size),
-                                               filename, NULL);
-
-          if (!g_file_test(file->thumbnail_path, G_FILE_TEST_EXISTS))
-            {
-              /* Fallback to old version */
-              g_free(file->thumbnail_path);
+          /* Fallback to old version */
+          g_free(thumbnail_path);
 
-              file->thumbnail_path = g_build_filename (xfce_get_homedir (),
-                                                       ".thumbnails", thunar_thumbnail_size_get_nick (thumbnail_size),
-                                                       filename, NULL);
+          thumbnail_path = g_build_filename (xfce_get_homedir (),
+                                                   ".thumbnails", thunar_thumbnail_size_get_nick (thumbnail_size),
+                                                   filename, NULL);
 
-              if(!g_file_test(file->thumbnail_path, G_FILE_TEST_EXISTS))
+          if(!g_file_test(thumbnail_path, G_FILE_TEST_EXISTS))
+            {
+              g_free(thumbnail_path);
+              thumbnail_path = NULL;
+
+              if (thunar_file_is_directory (file) == FALSE)
                 {
-                  g_free(file->thumbnail_path);
-                  file->thumbnail_path = NULL;
+                  /* Thumbnail doesn't exist in either spot, look for shared repository */
+                  uri = thunar_file_dup_uri (file);
+                  thumbnail_path = xfce_create_shared_thumbnail_path (uri, thunar_thumbnail_size_get_nick (thumbnail_size));
+                  g_free (uri);
 
-                  if (thunar_file_is_directory (file) == FALSE)
+                  if (thumbnail_path != NULL && !g_file_test (thumbnail_path, G_FILE_TEST_EXISTS))
                     {
-                      /* Thumbnail doesn't exist in either spot, look for shared repository */
-                      uri = thunar_file_dup_uri (file);
-                      file->thumbnail_path = xfce_create_shared_thumbnail_path (uri, thunar_thumbnail_size_get_nick (thumbnail_size));
-                      g_free (uri);
-
-                      if (file->thumbnail_path != NULL && !g_file_test (file->thumbnail_path, G_FILE_TEST_EXISTS))
-                        {
-                          /* Thumbnail doesn't exist */
-                          g_free (file->thumbnail_path);
-                          file->thumbnail_path = NULL;
-                        }
+                      /* Thumbnail doesn't exist */
+                      g_free (thumbnail_path);
+                      thumbnail_path = NULL;
                     }
                 }
             }
-
-          g_free (filename);
-          g_checksum_free (checksum);
         }
+
+      g_free (filename);
+      g_checksum_free (checksum);
     }
 
-  return file->thumbnail_path;
+  return thumbnail_path;
 }
 
 
diff --git a/thunar/thunar-file.h b/thunar/thunar-file.h
index 9e644bf4..7e163b16 100644
--- a/thunar/thunar-file.h
+++ b/thunar/thunar-file.h
@@ -246,6 +246,8 @@ gboolean          thunar_file_set_custom_icon            (ThunarFile
 
 const gchar     *thunar_file_get_thumbnail_path          (ThunarFile              *file,
                                                           ThunarThumbnailSize      thumbnail_size);
+gchar           *thunar_file_get_thumbnail_path_forced   (ThunarFile              *file,
+                                                          ThunarThumbnailSize      thumbnail_size);
 ThunarFileThumbState thunar_file_get_thumb_state         (const ThunarFile        *file);
 void             thunar_file_set_thumb_state             (ThunarFile              *file,
                                                           ThunarFileThumbState     state);
diff --git a/thunar/thunar-preferences-dialog.c b/thunar/thunar-preferences-dialog.c
index ae63505c..04ffa239 100644
--- a/thunar/thunar-preferences-dialog.c
+++ b/thunar/thunar-preferences-dialog.c
@@ -25,6 +25,7 @@
 #include <libxfce4kbd-private-3/libxfce4kbd-private/xfce-shortcuts-editor.h>
 #include <libxfce4kbd-private-3/libxfce4kbd-private/xfce-shortcuts-editor-dialog.h>
 
+#include <thunar/thunar-application.h>
 #include <thunar/thunar-compact-view.h>
 #include <thunar/thunar-details-view.h>
 #include <thunar/thunar-dialogs.h>
@@ -751,6 +752,15 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
   gtk_widget_show (combo);
 
+  frame = g_object_new (GTK_TYPE_FRAME, "border-width", 0, "shadow-type", GTK_SHADOW_NONE, NULL);
+  gtk_box_pack_start (GTK_BOX (vbox), frame, FALSE, TRUE, 0);
+  gtk_widget_show (frame);
+
+  label = gtk_label_new (_("Image Preview"));
+  gtk_label_set_attributes (GTK_LABEL (label), thunar_pango_attr_list_bold ());
+  gtk_frame_set_label_widget (GTK_FRAME (frame), label);
+  gtk_widget_show (label);
+
   /* next row */
   row++;
 
@@ -766,6 +776,47 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_grid_attach (GTK_GRID (grid), button, 0, row, 2, 1);
   gtk_widget_show (button);
 
+  /* new grid */
+  row = 0;
+
+  grid = gtk_grid_new ();
+  gtk_grid_set_column_spacing (GTK_GRID (grid), 12);
+  gtk_grid_set_row_spacing (GTK_GRID (grid), 6);
+  gtk_widget_set_margin_top (GTK_WIDGET (grid), 6);
+  gtk_widget_set_margin_start (GTK_WIDGET (grid), 12);
+  gtk_container_add (GTK_CONTAINER (frame), grid);
+  gtk_widget_show (grid);
+
+  label = gtk_label_new_with_mnemonic (_("Image Preview Mode:"));
+  gtk_widget_set_tooltip_text (label, _(
+                                        "- Standalone: Image Preview uses a separate pane\n"
+                                        "- Embedded: Image Preview is embedded in the left sidepane\n"
+                                      ));
+  gtk_label_set_xalign (GTK_LABEL (label), 0.0f);
+  gtk_grid_attach (GTK_GRID (grid), label, 0, row, 1, 1);
+  gtk_widget_show (label);
+
+  combo = gtk_combo_box_text_new ();
+  type = g_type_class_ref (THUNAR_TYPE_IMAGE_PREVIEW_MODE);
+  gtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo),
+                                  g_enum_get_value (type, THUNAR_IMAGE_PREVIEW_MODE_STANDALONE)->value_nick);
+  gtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo),
+                                  g_enum_get_value (type, THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED)->value_nick);
+  g_type_class_unref (type);
+  g_object_bind_property_full (G_OBJECT (dialog->preferences),
+                               "misc-image-preview-mode",
+                               G_OBJECT (combo),
+                               "active",
+                               G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE,
+                               transform_enum_value_to_index,
+                               transform_index_to_enum_value,
+                               (gpointer) thunar_verify_file_get_type, NULL);
+  gtk_widget_set_hexpand (combo, TRUE);
+  gtk_grid_attach (GTK_GRID (grid), combo, 1, row, 1, 1);
+  thunar_gtk_label_set_a11y_relation (GTK_LABEL (label), combo);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
+  gtk_widget_show (combo);
+
 
   /*
      Behavior
diff --git a/thunar/thunar-preferences.c b/thunar/thunar-preferences.c
index 88535dfd..7ec7c34c 100644
--- a/thunar/thunar-preferences.c
+++ b/thunar/thunar-preferences.c
@@ -74,6 +74,7 @@ enum
   PROP_LAST_SORT_COLUMN,
   PROP_LAST_SORT_ORDER,
   PROP_LAST_STATUSBAR_VISIBLE,
+  PROP_LAST_IMAGE_PREVIEW_VISIBLE,
   PROP_LAST_VIEW,
   PROP_LAST_WINDOW_HEIGHT,
   PROP_LAST_WINDOW_WIDTH,
@@ -114,6 +115,7 @@ enum
   PROP_MISC_WINDOW_ICON,
   PROP_MISC_TRANSFER_USE_PARTIAL,
   PROP_MISC_TRANSFER_VERIFY_FILE,
+  PROP_MISC_IMAGE_PREVIEW_FULL,
   PROP_SHORTCUTS_ICON_EMBLEMS,
   PROP_SHORTCUTS_ICON_SIZE,
   PROP_TREE_ICON_EMBLEMS,
@@ -530,6 +532,18 @@ thunar_preferences_class_init (ThunarPreferencesClass *klass)
                             TRUE,
                             EXO_PARAM_READWRITE);
 
+  /**
+   * ThunarPreferences:last-image-preview-visible:
+   *
+   * Whether to display an image preview in new windows by default.
+   **/
+  preferences_props[PROP_LAST_IMAGE_PREVIEW_VISIBLE] =
+      g_param_spec_boolean ("last-image-preview-visible",
+                            "LastImagePreviewVisible",
+                            NULL,
+                            FALSE,
+                            EXO_PARAM_READWRITE);
+
   /**
    * ThunarPreferences:last-view:
    *
@@ -987,6 +1001,20 @@ thunar_preferences_class_init (ThunarPreferencesClass *klass)
                        THUNAR_VERIFY_FILE_MODE_DISABLED,
                        EXO_PARAM_READWRITE);
 
+  /**
+   * ThunarPreferences:misc-image-preview-mode:
+   *
+   * Whether the image preview functionality uses its own sidepane or is embedded
+   * in the left sidepane.
+   **/
+  preferences_props[PROP_MISC_IMAGE_PREVIEW_FULL] =
+    g_param_spec_enum ("misc-image-preview-mode",
+                       "MiscImagePreviewMoe",
+                       NULL,
+                       THUNAR_TYPE_IMAGE_PREVIEW_MODE,
+                       THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED,
+                       EXO_PARAM_READWRITE);
+
   /**
    * ThunarPreferences:misc-confirm-close-multiple-tabs:
    *
diff --git a/thunar/thunar-properties-dialog.c b/thunar/thunar-properties-dialog.c
index 924bc6a2..3b79eda3 100644
--- a/thunar/thunar-properties-dialog.c
+++ b/thunar/thunar-properties-dialog.c
@@ -1223,7 +1223,7 @@ thunar_properties_dialog_update_single (ThunarPropertiesDialog *dialog)
 
   /* queue a new thumbnail request */
   thunar_thumbnailer_queue_file (dialog->thumbnailer, file,
-                                 &dialog->thumbnail_request);
+                                 &dialog->thumbnail_request, THUNAR_THUMBNAIL_SIZE_DEFAULT);
 
   icon_theme = gtk_icon_theme_get_for_screen (gtk_widget_get_screen (GTK_WIDGET (dialog)));
   icon_factory = thunar_icon_factory_get_for_icon_theme (icon_theme);
diff --git a/thunar/thunar-standard-view.c b/thunar/thunar-standard-view.c
index d4b6155e..852dbaea 100644
--- a/thunar/thunar-standard-view.c
+++ b/thunar/thunar-standard-view.c
@@ -3533,7 +3533,7 @@ thunar_standard_view_row_changed (ThunarListModel    *model,
     {
       thunar_standard_view_cancel_thumbnailing (standard_view);
       thunar_thumbnailer_queue_file (standard_view->priv->thumbnailer, file,
-                                     &standard_view->priv->thumbnail_request);
+                                     &standard_view->priv->thumbnail_request, THUNAR_THUMBNAIL_SIZE_DEFAULT);
     }
   g_object_unref (G_OBJECT (file));
 }
@@ -3934,7 +3934,8 @@ thunar_standard_view_request_thumbnails_real (ThunarStandardView *standard_view,
       /* queue a thumbnail request */
       thunar_thumbnailer_queue_files (standard_view->priv->thumbnailer,
                                       lazy_request, visible_files,
-                                      &standard_view->priv->thumbnail_request);
+                                      &standard_view->priv->thumbnail_request,
+                                      THUNAR_THUMBNAIL_SIZE_DEFAULT);
 
       /* release the file list */
       g_list_free_full (visible_files, g_object_unref);
diff --git a/thunar/thunar-thumbnailer.c b/thunar/thunar-thumbnailer.c
index 132cce4c..09d517f8 100644
--- a/thunar/thunar-thumbnailer.c
+++ b/thunar/thunar-thumbnailer.c
@@ -205,6 +205,9 @@ struct _ThunarThumbnailerJob
 
   /* handle returned by the tumbler dbus service */
   guint              handle;
+
+  /* used to override the thumbnail size of ThunarThumbnailer */
+  ThunarThumbnailSize thumbnail_size;
 };
 
 struct _ThunarThumbnailerIdle
@@ -415,6 +418,7 @@ thunar_thumbnailer_begin_job (ThunarThumbnailer *thumbnailer,
   ThunarFileThumbState   thumb_state;
   const gchar           *thumbnail_path;
   gint                   request_no;
+  ThunarThumbnailSize    thumbnail_size;
 
   if (thumbnailer->proxy_state == THUNAR_THUMBNAILER_PROXY_WAITING)
     {
@@ -427,6 +431,8 @@ thunar_thumbnailer_begin_job (ThunarThumbnailer *thumbnailer,
       return FALSE;
     }
 
+  thumbnail_size = job->thumbnail_size == THUNAR_THUMBNAIL_SIZE_DEFAULT ? thumbnailer->thumbnail_size : job->thumbnail_size;
+
   /* collect all supported files from the list that are neither in the
    * about to be queued (wait queue), nor already queued, nor already
    * processed (and awaiting to be refreshed) */
@@ -468,7 +474,7 @@ thunar_thumbnailer_begin_job (ThunarThumbnailer *thumbnailer,
         {
           /* still a regular file, but the type is now known to tumbler but
            * maybe the application created a thumbnail */
-          thumbnail_path = thunar_file_get_thumbnail_path (lp->data, thumbnailer->thumbnail_size);
+          thumbnail_path = thunar_file_get_thumbnail_path (lp->data, thumbnail_size);
 
           /* test if a thumbnail can be found */
           if (thumbnail_path != NULL && g_file_test (thumbnail_path, G_FILE_TEST_EXISTS))
@@ -518,7 +524,7 @@ thunar_thumbnailer_begin_job (ThunarThumbnailer *thumbnailer,
       thunar_thumbnailer_dbus_call_queue (thumbnailer->thumbnailer_proxy,
                                           (const gchar *const *)uris,
                                           (const gchar *const *)mime_hints,
-                                          thunar_thumbnail_size_get_nick (thumbnailer->thumbnail_size),
+                                          thunar_thumbnail_size_get_nick (thumbnail_size),
                                           "foreground", 0,
                                           NULL,
                                           thunar_thumbnailer_queue_async_reply,
@@ -1100,9 +1106,10 @@ thunar_thumbnailer_get (void)
 
 
 gboolean
-thunar_thumbnailer_queue_file (ThunarThumbnailer *thumbnailer,
-                               ThunarFile        *file,
-                               guint             *request)
+thunar_thumbnailer_queue_file (ThunarThumbnailer  *thumbnailer,
+                               ThunarFile         *file,
+                               guint              *request,
+                               ThunarThumbnailSize size)
 {
   GList files;
 
@@ -1115,16 +1122,17 @@ thunar_thumbnailer_queue_file (ThunarThumbnailer *thumbnailer,
   files.prev = NULL;
 
   /* queue a thumbnail request for the file */
-  return thunar_thumbnailer_queue_files (thumbnailer, FALSE, &files, request);
+  return thunar_thumbnailer_queue_files (thumbnailer, FALSE, &files, request, size);
 }
 
 
 
 gboolean
-thunar_thumbnailer_queue_files (ThunarThumbnailer *thumbnailer,
-                                gboolean           lazy_checks,
-                                GList             *files,
-                                guint             *request)
+thunar_thumbnailer_queue_files (ThunarThumbnailer   *thumbnailer,
+                                gboolean             lazy_checks,
+                                GList               *files,
+                                guint               *request,
+                                ThunarThumbnailSize  size)
 {
   gboolean               success = FALSE;
   ThunarThumbnailerJob  *job = NULL;
@@ -1140,12 +1148,13 @@ thunar_thumbnailer_queue_files (ThunarThumbnailer *thumbnailer,
   job->thumbnailer = thumbnailer;
   job->files = g_list_copy_deep (files, (GCopyFunc) (void (*)(void)) g_object_ref, NULL);
   job->lazy_checks = lazy_checks ? 1 : 0;
+  job->thumbnail_size = size;
 
   success = thunar_thumbnailer_begin_job (thumbnailer, job);
   if (success)
     {
       thumbnailer->jobs = g_slist_prepend (thumbnailer->jobs, job);
-      if (*request)
+      if (request != NULL)
         *request = job->request;
     }
   else
diff --git a/thunar/thunar-thumbnailer.h b/thunar/thunar-thumbnailer.h
index a7334002..1bef7daa 100644
--- a/thunar/thunar-thumbnailer.h
+++ b/thunar/thunar-thumbnailer.h
@@ -41,11 +41,13 @@ ThunarThumbnailer *thunar_thumbnailer_get             (void) G_GNUC_MALLOC;
 
 gboolean           thunar_thumbnailer_queue_file      (ThunarThumbnailer        *thumbnailer,
                                                        ThunarFile               *file,
-                                                       guint                    *request);
+                                                       guint                    *request,
+                                                       ThunarThumbnailSize       size);
 gboolean           thunar_thumbnailer_queue_files     (ThunarThumbnailer        *thumbnailer,
                                                        gboolean                  lazy_checks,
                                                        GList                    *files,
-                                                       guint                    *request);
+                                                       guint                    *request,
+                                                       ThunarThumbnailSize       size);
 void               thunar_thumbnailer_dequeue         (ThunarThumbnailer        *thumbnailer,
                                                        guint                     request);
 
diff --git a/thunar/thunar-window.c b/thunar/thunar-window.c
index 04533c60..a57b792e 100644
--- a/thunar/thunar-window.c
+++ b/thunar/thunar-window.c
@@ -61,6 +61,7 @@
 #include <thunar/thunar-window.h>
 #include <thunar/thunar-device-monitor.h>
 #include <thunar/thunar-toolbar-editor.h>
+#include <thunar/thunar-thumbnailer.h>
 
 #include <glib.h>
 
@@ -209,6 +210,7 @@ static gboolean  thunar_window_action_locationbar_entry   (ThunarWindow
 static gboolean  thunar_window_action_locationbar_buttons (ThunarWindow           *window);
 static gboolean  thunar_window_action_shortcuts_changed   (ThunarWindow           *window);
 static gboolean  thunar_window_action_tree_changed        (ThunarWindow           *window);
+static gboolean  thunar_window_action_image_preview       (ThunarWindow           *window);
 static gboolean  thunar_window_action_statusbar_changed   (ThunarWindow           *window);
 static void      thunar_window_action_menubar_update      (ThunarWindow           *window);
 static gboolean  thunar_window_action_menubar_changed     (ThunarWindow           *window);
@@ -319,7 +321,12 @@ static gboolean   thunar_window_action_clear_directory_specific_settings (Thunar
 static void       thunar_window_trash_infobar_clicked                    (GtkInfoBar             *info_bar,
                                                                           gint                    response_id,
                                                                           ThunarWindow           *window);
-static void       thunar_window_trash_selection_updated                  (ThunarWindow           *window);
+static void       thunar_window_update_embedded_image_preview            (ThunarWindow           *window);
+static void       thunar_window_update_standalone_image_preview          (ThunarWindow           *window);
+static void       thunar_window_selection_changed                        (ThunarWindow           *window);
+static void       thunar_window_finished_thumbnailing                    (ThunarWindow           *window,
+                                                                          guint                   request,
+                                                                          ThunarThumbnailer      *thumbnailer);
 static void       thunar_window_recent_reload                            (GtkRecentManager       *recent_manager,
                                                                           ThunarWindow           *window);
 static void       thunar_window_catfish_dialog_configure                 (GtkWidget              *entry);
@@ -343,6 +350,10 @@ static GtkWidget* thunar_window_create_toolbar_toggle_item_from_action   (Thunar
                                                                           ThunarWindowAction      action,
                                                                           gboolean                active,
                                                                           guint                   item_order);
+static gboolean   thunar_window_image_preview_mode_changed               (ThunarWindow           *window);
+static void       image_preview_update                                   (GtkWidget              *parent,
+                                                                          GtkAllocation          *allocation,
+                                                                          GtkWidget              *image);
 
 
 
@@ -384,7 +395,15 @@ struct _ThunarWindow
   gboolean                menubar_visible;
   GtkWidget              *spinner;
   GtkWidget              *paned;
+  GtkWidget              *paned_right;
+  GtkWidget              *sidepane_box;
   GtkWidget              *sidepane;
+  GtkWidget              *sidepane_preview_image;
+  GtkWidget              *right_pane_box;
+  GtkWidget              *right_pane_grid;
+  GtkWidget              *right_pane_preview_image;
+  GtkWidget              *right_pane_image_label;
+  GtkWidget              *right_pane_size_label;
   GtkWidget              *view_box;
   GtkWidget              *trash_infobar;
   GtkWidget              *trash_infobar_restore_button;
@@ -446,6 +465,11 @@ struct _ThunarWindow
    * see the toggle_sidepane() function.
    */
   GType                   toggle_sidepane_type;
+
+  /* Image Preview thumbnail generation */
+  ThunarThumbnailer      *thumbnailer;
+  guint                   thumbnail_request;
+  GdkPixbuf              *preview_image_pixbuf;
 };
 
 
@@ -474,6 +498,7 @@ static XfceGtkActionEntry thunar_window_action_entries[] =
     { THUNAR_WINDOW_ACTION_VIEW_SIDE_PANE_SHORTCUTS,       "<Actions>/ThunarWindow/view-side-pane-shortcuts",        "<Primary>b",           XFCE_GTK_CHECK_MENU_ITEM, N_ ("_Shortcuts"),             N_ ("Toggles the visibility of the shortcuts pane"),                                 NULL,                      G_CALLBACK (thunar_window_action_shortcuts_changed),  },
     { THUNAR_WINDOW_ACTION_VIEW_SIDE_PANE_TREE,            "<Actions>/ThunarWindow/view-side-pane-tree",             "<Primary>e",           XFCE_GTK_CHECK_MENU_ITEM, N_ ("_Tree"),                  N_ ("Toggles the visibility of the tree pane"),                                      NULL,                      G_CALLBACK (thunar_window_action_tree_changed),       },
     { THUNAR_WINDOW_ACTION_TOGGLE_SIDE_PANE,               "<Actions>/ThunarWindow/toggle-side-pane",                "F9",                   XFCE_GTK_MENU_ITEM,       NULL,                          NULL,                                                                                NULL,                      G_CALLBACK (thunar_window_toggle_sidepane),           },
+    { THUNAR_WINDOW_ACTION_TOGGLE_IMAGE_PREVIEW,           "<Actions>/ThunarWindow/toggle-image-preview",            "",                     XFCE_GTK_CHECK_MENU_ITEM, N_ ("Image Preview"),          N_ ("Change the visibility of this window's image preview"),                         NULL,                      G_CALLBACK (thunar_window_action_image_preview),  },
     { THUNAR_WINDOW_ACTION_VIEW_STATUSBAR,                 "<Actions>/ThunarWindow/view-statusbar",                  "",                     XFCE_GTK_CHECK_MENU_ITEM, N_ ("St_atusbar"),             N_ ("Change the visibility of this window's statusbar"),                             NULL,                      G_CALLBACK (thunar_window_action_statusbar_changed),  },
     { THUNAR_WINDOW_ACTION_VIEW_MENUBAR,                   "<Actions>/ThunarWindow/view-menubar",                    "<Primary>m",           XFCE_GTK_CHECK_MENU_ITEM, N_ ("_Menubar"),               N_ ("Change the visibility of this window's menubar"),                               "open-menu-symbolic",      G_CALLBACK (thunar_window_action_menubar_changed),    },
     { THUNAR_WINDOW_ACTION_CONFIGURE_TOOLBAR,              "<Actions>/ThunarWindow/view-configure-toolbar",          "",                     XFCE_GTK_MENU_ITEM ,      N_ ("Configure _Toolbar..."),  N_ ("Configure the toolbar"),                                                        NULL,                      G_CALLBACK (thunar_window_action_show_toolbar_editor),},
@@ -718,22 +743,25 @@ thunar_window_paned_notebooks_destroy (GtkWidget    *paned_notebooks,
 static void
 thunar_window_init (ThunarWindow *window)
 {
-  GtkWidget       *label;
-  GtkWidget       *infobar;
-  GtkWidget       *item;
-  GtkWidget       *event_box;
-  gboolean         last_menubar_visible;
-  gchar           *last_location_bar;
-  gchar           *last_side_pane;
-  gchar           *uca_path;
-  gchar           *catfish_path;
-  GType            type;
-  gint             last_separator_position;
-  gint             last_window_width;
-  gint             last_window_height;
-  gboolean         last_window_maximized;
-  gboolean         last_statusbar_visible;
-  GtkStyleContext *context;
+  GtkWidget             *label;
+  GtkWidget             *infobar;
+  GtkWidget             *item;
+  GtkWidget             *event_box;
+  gboolean               last_menubar_visible;
+  gchar                 *last_location_bar;
+  gchar                 *last_side_pane;
+  gchar                 *uca_path;
+  gchar                 *catfish_path;
+  GType                  type;
+  gint                   last_separator_position;
+  gint                   last_window_width;
+  gint                   last_window_height;
+  gboolean               last_window_maximized;
+  gboolean               last_statusbar_visible;
+  gboolean               last_image_preview_visible;
+  ThunarImagePreviewMode misc_image_preview_mode;
+  gint                   max_paned_position;
+  GtkStyleContext       *context;
 
   /* unset the view type */
   window->view_type = G_TYPE_NONE;
@@ -745,6 +773,9 @@ thunar_window_init (ThunarWindow *window)
   /* grab a reference on the preferences */
   window->preferences = thunar_preferences_get ();
 
+  window->thumbnailer = thunar_thumbnailer_get ();
+  g_signal_connect_swapped (G_OBJECT (window->thumbnailer), "request-finished", G_CALLBACK (thunar_window_finished_thumbnailing), window);
+
   window->accel_group = gtk_accel_group_new ();
   xfce_gtk_accel_map_add_entries (thunar_window_action_entries, G_N_ELEMENTS (thunar_window_action_entries));
   xfce_gtk_accel_group_connect_action_entries (window->accel_group,
@@ -765,6 +796,8 @@ thunar_window_init (ThunarWindow *window)
                 "last-location-bar", &last_location_bar,
                 "last-side-pane", &last_side_pane,
                 "last-statusbar-visible", &last_statusbar_visible,
+                "last-image-preview-visible", &last_image_preview_visible,
+                "misc-image-preview-mode", &misc_image_preview_mode,
                 NULL);
 
   /* update the visual on screen_changed events */
@@ -858,6 +891,7 @@ thunar_window_init (ThunarWindow *window)
       gtk_widget_show (label);
     }
 
+  /* main paned widget */
   window->paned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
   gtk_container_set_border_width (GTK_CONTAINER (window->paned), 0);
   gtk_widget_set_hexpand (window->paned, TRUE);
@@ -865,25 +899,82 @@ thunar_window_init (ThunarWindow *window)
   gtk_grid_attach (GTK_GRID (window->grid), window->paned, 0, 4, 1, 1);
   gtk_widget_show (window->paned);
 
+  /* left sidepane */
+  window->sidepane_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
+  gtk_paned_pack1 (GTK_PANED (window->paned), window->sidepane_box, FALSE, FALSE);
+  gtk_widget_show (window->sidepane_box);
+
+  window->sidepane_preview_image = gtk_image_new_from_file ("");
+  gtk_widget_set_margin_top (window->sidepane_preview_image, 10);
+  gtk_widget_set_margin_bottom (window->sidepane_preview_image, 10);
+  gtk_box_pack_end (GTK_BOX (window->sidepane_box), window->sidepane_preview_image, FALSE, TRUE, 0);
+  if (last_image_preview_visible == TRUE && misc_image_preview_mode == THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED)
+    gtk_widget_show (window->sidepane_preview_image);
+
+  g_signal_connect (G_OBJECT (window->sidepane_box), "size-allocate", G_CALLBACK (image_preview_update), window->sidepane_preview_image);
+
   /* determine the last separator position and apply it to the paned view */
   gtk_paned_set_position (GTK_PANED (window->paned), last_separator_position);
   g_signal_connect_swapped (window->paned, "accept-position", G_CALLBACK (thunar_window_save_paned), window);
   g_signal_connect_swapped (window->paned, "button-release-event", G_CALLBACK (thunar_window_save_paned), window);
 
-  window->view_box = gtk_grid_new ();
-  gtk_paned_pack2 (GTK_PANED (window->paned), window->view_box, TRUE, FALSE);
-  gtk_widget_show (window->view_box);
+  /* nested paned widget */
+  window->paned_right = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
+  gtk_container_set_border_width (GTK_CONTAINER (window->paned_right), 0);
+  gtk_widget_set_hexpand (window->paned_right, TRUE);
+  gtk_widget_set_vexpand (window->paned_right, TRUE);
+  gtk_widget_show (window->paned_right);
+  gtk_paned_pack2 (GTK_PANED (window->paned), window->paned_right, TRUE, FALSE);
+
+  /* right sidepane */
+  window->right_pane_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 10);
+  gtk_widget_set_margin_top (window->right_pane_box, 20);
+  gtk_paned_pack2 (GTK_PANED (window->paned_right), window->right_pane_box, TRUE, FALSE);
+
+  window->right_pane_preview_image = gtk_image_new_from_file ("");
+  gtk_widget_set_size_request (window->right_pane_preview_image, 276, -1); /* large thumbnail size + 20 */
+  gtk_box_pack_start (GTK_BOX (window->right_pane_box), window->right_pane_preview_image, FALSE, TRUE, 0);
+
+  window->right_pane_grid = gtk_grid_new ();
+  gtk_widget_set_halign (window->right_pane_grid, GTK_ALIGN_CENTER);
+  gtk_widget_set_vexpand (window->right_pane_grid, TRUE);
+  gtk_widget_set_hexpand (window->right_pane_grid, TRUE);
+  gtk_box_pack_end (GTK_BOX (window->right_pane_box), window->right_pane_grid, FALSE, TRUE, 0);
+
+  window->right_pane_image_label = gtk_label_new ("");
+  gtk_grid_attach (GTK_GRID (window->right_pane_grid), window->right_pane_image_label, 0, 1, 2, 1);
+
+  gtk_grid_attach (GTK_GRID (window->right_pane_grid), gtk_label_new (_("Size: ")), 0, 2, 1, 1);
+  window->right_pane_size_label = gtk_label_new ("");
+  gtk_grid_attach (GTK_GRID (window->right_pane_grid), window->right_pane_size_label, 1, 2, 1, 1);
+
+  gtk_widget_show_all (window->right_pane_box);
+
+  if (last_image_preview_visible == FALSE || misc_image_preview_mode == THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED)
+    gtk_widget_hide(window->right_pane_box);
+
+  g_signal_connect (G_OBJECT (window->right_pane_box), "size-allocate", G_CALLBACK (image_preview_update), window->right_pane_preview_image);
+
+  g_signal_connect_swapped (window->preferences, "notify::misc-image-preview-mode", G_CALLBACK (thunar_window_image_preview_mode_changed), window);
+
+  window->preview_image_pixbuf = NULL;
 
   /* split view: Create panes where the two notebooks */
   window->paned_notebooks = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
   g_signal_connect_swapped (window->preferences, "notify::misc-vertical-split-pane", G_CALLBACK (thunar_window_paned_notebooks_update_orientation), window);
   thunar_window_paned_notebooks_update_orientation (window);
 
-  gtk_paned_add2 (GTK_PANED (window->paned), window->view_box);
+  window->view_box = gtk_grid_new ();
+  gtk_paned_pack1 (GTK_PANED (window->paned_right), window->view_box, TRUE, FALSE);
+  gtk_widget_show (window->view_box);
+
   gtk_widget_add_events (window->paned_notebooks, GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK | GDK_BUTTON_PRESS_MASK);
   gtk_grid_attach (GTK_GRID (window->view_box), window->paned_notebooks, 0, 0, 1, 1);
   gtk_widget_show (window->paned_notebooks);
 
+  g_object_get (window->paned_right, "max-position", &max_paned_position, NULL);
+  gtk_paned_set_position (GTK_PANED (window->paned_right), max_paned_position);
+
   /** close notebooks on window-remove signal because later on window property
    *  pointers are broken.
    **/
@@ -1246,6 +1337,7 @@ thunar_window_update_view_menu (ThunarWindow *window,
   GtkWidget  *item;
   GtkWidget  *sub_items;
   gchar      *last_location_bar;
+  gboolean    last_visible_image_preview;
   gboolean    highlight_enabled;
 
   _thunar_return_if_fail (THUNAR_IS_WINDOW (window));
@@ -1272,6 +1364,9 @@ thunar_window_update_view_menu (ThunarWindow *window,
                                                    thunar_window_has_shortcut_sidepane (window), GTK_MENU_SHELL (sub_items));
   xfce_gtk_toggle_menu_item_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_VIEW_SIDE_PANE_TREE), G_OBJECT (window),
                                                    thunar_window_has_tree_view_sidepane (window), GTK_MENU_SHELL (sub_items));
+  g_object_get (window->preferences, "last-image-preview-visible", &last_visible_image_preview, NULL);
+  xfce_gtk_toggle_menu_item_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_TOGGLE_IMAGE_PREVIEW), G_OBJECT (window),
+                                                   last_visible_image_preview, GTK_MENU_SHELL (sub_items));
   gtk_menu_item_set_submenu (GTK_MENU_ITEM (item), GTK_WIDGET (sub_items));
   xfce_gtk_toggle_menu_item_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_VIEW_STATUSBAR), G_OBJECT (window),
                                                    gtk_widget_get_visible (window->statusbar), GTK_MENU_SHELL (menu));
@@ -1493,6 +1588,8 @@ thunar_window_finalize (GObject *object)
   /* release the preferences reference */
   g_object_unref (window->preferences);
 
+  g_object_unref (window->thumbnailer);
+
   /* disconnect signal from GtkRecentManager */
   g_signal_handlers_disconnect_by_data (G_OBJECT (gtk_recent_manager_get_default()), window);
 
@@ -2044,7 +2141,7 @@ thunar_window_notebook_switch_page (GtkWidget    *notebook,
     }
 
   if (window->view != NULL)
-    g_signal_handlers_disconnect_by_func (window->view, thunar_window_trash_selection_updated, window);
+    g_signal_handlers_disconnect_by_func (window->view, thunar_window_selection_changed, window);
 
   /* activate new view */
   window->view = page;
@@ -2055,7 +2152,7 @@ thunar_window_notebook_switch_page (GtkWidget    *notebook,
   g_object_set (G_OBJECT (page), "accel-group", window->accel_group, NULL);
 
   g_signal_connect_swapped (G_OBJECT (window->view), "notify::selected-files",
-                            G_CALLBACK (thunar_window_trash_selection_updated), window);
+                            G_CALLBACK (thunar_window_selection_changed), window);
 
   /* remember the last view type if directory specific settings are not enabled */
   if (!window->directory_specific_settings && window->view_type != G_TYPE_NONE)
@@ -2859,8 +2956,9 @@ thunar_window_install_sidepane (ThunarWindow *window,
       g_signal_connect_swapped (G_OBJECT (window->sidepane), "open-new-tab", G_CALLBACK (thunar_window_notebook_open_new_tab), window);
       context = gtk_widget_get_style_context (window->sidepane);
       gtk_style_context_add_class (context, "sidebar");
-      gtk_paned_pack1 (GTK_PANED (window->paned), window->sidepane, FALSE, FALSE);
+      gtk_box_pack_start (GTK_BOX (window->sidepane_box), window->sidepane, TRUE, TRUE, 0);
       gtk_widget_show (window->sidepane);
+      gtk_widget_show (window->sidepane_box);
 
       /* connect the side pane widget to the view (if any) */
       if (G_LIKELY (window->view != NULL))
@@ -2870,6 +2968,8 @@ thunar_window_install_sidepane (ThunarWindow *window,
       if (type == THUNAR_TYPE_TREE_PANE)
         thunar_side_pane_set_show_hidden (THUNAR_SIDE_PANE (window->sidepane), window->show_hidden);
     }
+  else
+    gtk_widget_hide (window->sidepane_box);
 
   /* remember the setting */
   if (gtk_widget_get_visible (GTK_WIDGET (window)))
@@ -3585,6 +3685,98 @@ thunar_window_action_tree_changed (ThunarWindow *window)
 
 
 
+static gboolean
+thunar_window_action_image_preview (ThunarWindow *window)
+{
+  ThunarImagePreviewMode misc_image_preview_mode;
+  gboolean               last_image_preview_visible;
+
+  _thunar_return_val_if_fail (THUNAR_IS_WINDOW (window), FALSE);
+
+  g_object_get (window->preferences,
+                "last-image-preview-visible", &last_image_preview_visible,
+                "misc-image-preview-mode", &misc_image_preview_mode,
+                NULL);
+
+  if (misc_image_preview_mode == THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED)
+    {
+      gtk_widget_set_visible (window->sidepane_preview_image, !last_image_preview_visible);
+      gtk_widget_set_visible (window->right_pane_box, FALSE);
+    }
+  else
+    {
+      gtk_widget_set_visible (window->sidepane_preview_image, FALSE);
+      gtk_widget_set_visible (window->right_pane_box, !last_image_preview_visible);
+    }
+
+  g_object_set (G_OBJECT (window->preferences), "last-image-preview-visible", !last_image_preview_visible, NULL);
+
+  /* required in case of shortcut activation, in order to signal that the accel key got handled */
+  return TRUE;
+}
+
+
+
+gboolean
+thunar_window_image_preview_mode_changed (ThunarWindow *window)
+{
+  ThunarImagePreviewMode misc_image_preview_mode;
+  gboolean               last_image_preview_visible;
+
+  _thunar_return_val_if_fail (THUNAR_IS_WINDOW (window), FALSE);
+
+  g_object_get (window->preferences,
+                "last-image-preview-visible", &last_image_preview_visible,
+                "misc-image-preview-mode", &misc_image_preview_mode,
+                NULL);
+
+  gtk_widget_set_visible (window->sidepane_preview_image, last_image_preview_visible && misc_image_preview_mode == THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED);
+  gtk_widget_set_visible (window->right_pane_box, last_image_preview_visible && misc_image_preview_mode == THUNAR_IMAGE_PREVIEW_MODE_STANDALONE);
+
+  /* required in case of shortcut activation, in order to signal that the accel key got handled */
+  return TRUE;
+}
+
+
+
+static void
+image_preview_update (GtkWidget     *parent,
+                      GtkAllocation *allocation,
+                      GtkWidget     *image)
+{
+  ThunarWindow *window = THUNAR_WINDOW (gtk_widget_get_toplevel (parent));
+
+  _thunar_return_if_fail (THUNAR_IS_WINDOW (window));
+
+  /* there is no image to preview */
+  if (window->preview_image_pixbuf == NULL)
+    return;
+
+  if (allocation != NULL)
+    {
+      gtk_image_set_from_pixbuf (GTK_IMAGE (image), exo_gdk_pixbuf_scale_ratio (window->preview_image_pixbuf,
+                                                                                allocation->width < allocation->height ?
+                                                                                allocation->width - 50 :
+                                                                                allocation->height - 50));
+    }
+  else
+    {
+      GtkAllocation alloc;
+      gtk_widget_get_allocation (parent, &alloc);
+      if (alloc.width - 50 <= 0) /* the widget doesn't have any allocated space */
+        return;
+      gtk_image_set_from_pixbuf (GTK_IMAGE (image), exo_gdk_pixbuf_scale_ratio (window->preview_image_pixbuf,
+                                                                                alloc.width < alloc.height ?
+                                                                                alloc.width - 50 :
+                                                                                alloc.height - 50));
+    }
+
+  /* GtkImage has its own reference for the pixbuf, and we want to pass ownership to it */
+  g_object_unref (gtk_image_get_pixbuf (GTK_IMAGE (image)));
+}
+
+
+
 static gboolean
 thunar_window_action_statusbar_changed (ThunarWindow *window)
 {
@@ -5411,21 +5603,135 @@ thunar_window_trash_infobar_clicked (GtkInfoBar   *info_bar,
 
 
 
+static void thunar_window_update_embedded_image_preview (ThunarWindow *window)
+{
+  ThunarImagePreviewMode misc_image_preview_mode;
+  gboolean               last_image_preview_visible;
+
+  g_object_get (window->preferences,
+                "last-image-preview-visible", &last_image_preview_visible,
+                "misc-image-preview-mode", &misc_image_preview_mode,
+                NULL);
+
+  if (window->preview_image_pixbuf != NULL)
+    {
+      image_preview_update (window->sidepane_box, NULL, window->sidepane_preview_image);
+      if (last_image_preview_visible == TRUE && misc_image_preview_mode == THUNAR_IMAGE_PREVIEW_MODE_EMBEDDED)
+        gtk_widget_show (window->sidepane_preview_image);
+      else
+        gtk_widget_hide (window->sidepane_preview_image);
+    }
+  else
+    gtk_widget_hide (window->sidepane_preview_image);
+}
+
+
+
+static void thunar_window_update_standalone_image_preview (ThunarWindow *window)
+{
+  GList *selected_files = thunar_view_get_selected_files (THUNAR_VIEW (window->view));
+
+  if (window->preview_image_pixbuf != NULL)
+    {
+      gchar *file_size = thunar_file_get_size_string (selected_files->data);
+
+      image_preview_update (window->right_pane_box, NULL, window->right_pane_preview_image);
+      gtk_label_set_text (GTK_LABEL (window->right_pane_image_label), thunar_file_get_display_name (selected_files->data));
+      gtk_label_set_text (GTK_LABEL (window->right_pane_size_label), file_size);
+
+      g_free (file_size);
+    }
+  else
+    {
+      gtk_image_clear (GTK_IMAGE (window->right_pane_preview_image));
+      gtk_label_set_text (GTK_LABEL (window->right_pane_image_label), "No available thumbnail...");
+      gtk_label_set_text (GTK_LABEL (window->right_pane_size_label), "-");
+    }
+}
+
+
+
 /**
- * thunar_window_trash_selection_updated:
+ * thunar_window_selection_changed:
  * @window      : a #ThunarWindow instance.
  *
- * Used to set the `sensitive` value of the `Restore` button in the trash infobar.
+ * Used to set the `sensitive` value of the `Restore` button in the trash infobar and to
+ * update the image previews.
  **/
 static void
-thunar_window_trash_selection_updated (ThunarWindow *window)
+thunar_window_selection_changed (ThunarWindow *window)
 {
-  GList* selected_files = thunar_view_get_selected_files (THUNAR_VIEW (window->view));
+  GList *selected_files = thunar_view_get_selected_files (THUNAR_VIEW (window->view));
 
+  /* butttons specific to the Trash location */
   if (g_list_length (selected_files) > 0)
     gtk_widget_set_sensitive (window->trash_infobar_restore_button, TRUE);
   else
     gtk_widget_set_sensitive (window->trash_infobar_restore_button, FALSE);
+
+  /* image preview sidepane */
+  /* check if we have a pending thumbnail request (for the image preview) */
+  if (window->thumbnail_request > 0)
+    {
+      /* cancel the request */
+      thunar_thumbnailer_dequeue (window->thumbnailer, window->thumbnail_request);
+      window->thumbnail_request = 0;
+    }
+
+  /* clear image previews */
+  if (window->preview_image_pixbuf != NULL)
+    {
+      g_object_unref (window->preview_image_pixbuf);
+      window->preview_image_pixbuf = NULL;
+    }
+
+  /* get or request a thumbnail */
+  if (g_list_length (selected_files) == 1)
+    {
+      gchar *path = thunar_file_get_thumbnail_path_forced (selected_files->data, THUNAR_THUMBNAIL_SIZE_XX_LARGE);
+      if (path == NULL) /* request the creation of the thumbnail if it doesn't exist */
+        thunar_thumbnailer_queue_file (window->thumbnailer, selected_files->data, &window->thumbnail_request, THUNAR_THUMBNAIL_SIZE_XX_LARGE);
+      else /* display the thumbnail */
+        window->preview_image_pixbuf = gdk_pixbuf_new_from_file (path, NULL);
+      g_free (path);
+    }
+
+  /* update previews */
+  thunar_window_update_embedded_image_preview (window);
+  thunar_window_update_standalone_image_preview (window);
+}
+
+
+
+static void
+thunar_window_finished_thumbnailing (ThunarWindow       *window,
+                                     guint               request,
+                                     ThunarThumbnailer  *thumbnailer)
+{
+  GList *selected_files = NULL;
+
+  _thunar_return_if_fail (THUNAR_IS_WINDOW (window));
+
+  if (window->thumbnail_request != request)
+    return;
+
+  window->thumbnail_request = 0;
+
+  /* update image previews */
+  selected_files = thunar_view_get_selected_files (THUNAR_VIEW (window->view));
+  if (g_list_length (selected_files) == 1)
+    {
+      /* there is no guarantee that the thumbnail will exist, the type of the selected file might be unsupported by the thumbnailer */
+      gchar *path = thunar_file_get_thumbnail_path_forced (selected_files->data, THUNAR_THUMBNAIL_SIZE_XX_LARGE);
+      if (path == NULL)
+        return;
+
+      window->preview_image_pixbuf = gdk_pixbuf_new_from_file (path, NULL);
+      thunar_window_update_embedded_image_preview (window);
+      thunar_window_update_standalone_image_preview (window);
+
+      g_free (path);
+    }
 }
 
 
diff --git a/thunar/thunar-window.h b/thunar/thunar-window.h
index 8cbeab68..a4be46bd 100644
--- a/thunar/thunar-window.h
+++ b/thunar/thunar-window.h
@@ -61,6 +61,7 @@ typedef enum
   THUNAR_WINDOW_ACTION_VIEW_SIDE_PANE_SHORTCUTS,
   THUNAR_WINDOW_ACTION_VIEW_SIDE_PANE_TREE,
   THUNAR_WINDOW_ACTION_TOGGLE_SIDE_PANE,
+  THUNAR_WINDOW_ACTION_TOGGLE_IMAGE_PREVIEW,
   THUNAR_WINDOW_ACTION_VIEW_STATUSBAR,
   THUNAR_WINDOW_ACTION_VIEW_MENUBAR,
   THUNAR_WINDOW_ACTION_CONFIGURE_TOOLBAR,
