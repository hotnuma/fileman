diff --git a/thunar/thunar-launcher.c b/thunar/thunar-launcher.c
index 51b3061c..d04b2611 100644
--- a/thunar/thunar-launcher.c
+++ b/thunar/thunar-launcher.c
@@ -2423,6 +2423,7 @@ thunar_launcher_action_create_folder (ThunarLauncher *launcher)
   ThunarApplication *application;
   GList              path_list;
   gchar             *name;
+  gchar             *generated_name;
 
   _thunar_return_if_fail (THUNAR_IS_LAUNCHER (launcher));
 
@@ -2430,10 +2431,13 @@ thunar_launcher_action_create_folder (ThunarLauncher *launcher)
     return;
 
   /* ask the user to enter a name for the new folder */
+  generated_name = thunar_util_next_new_file_name (launcher->current_directory, _("New Folder"));
   name = thunar_dialogs_show_create (launcher->widget,
                                      "inode/directory",
-                                     _("New Folder"),
+                                     generated_name,
                                      _("Create New Folder"));
+  g_free (generated_name);
+
   if (G_LIKELY (name != NULL))
     {
       /* fake the path list */
@@ -2465,6 +2469,7 @@ thunar_launcher_action_create_document (ThunarLauncher *launcher,
   ThunarApplication *application;
   GList              target_path_list;
   gchar             *name;
+  gchar             *generated_name;
   gchar             *title;
   ThunarFile        *template_file;
 
@@ -2482,9 +2487,10 @@ thunar_launcher_action_create_document (ThunarLauncher *launcher,
                                thunar_file_get_display_name (template_file));
 
       /* ask the user to enter a name for the new document */
+      generated_name = thunar_util_next_new_file_name (launcher->current_directory, thunar_file_get_display_name (template_file));
       name = thunar_dialogs_show_create (launcher->widget,
                                          thunar_file_get_content_type (THUNAR_FILE (template_file)),
-                                         thunar_file_get_display_name (template_file),
+                                         generated_name,
                                          title);
       /* cleanup */
       g_free (title);
@@ -2492,11 +2498,13 @@ thunar_launcher_action_create_document (ThunarLauncher *launcher,
   else
     {
       /* ask the user to enter a name for the new empty file */
+      generated_name = thunar_util_next_new_file_name (launcher->current_directory, _("New Empty File"));
       name = thunar_dialogs_show_create (launcher->widget,
                                          "text/plain",
-                                         _("New Empty File"),
+                                         generated_name,
                                          _("New Empty File..."));
     }
+  g_free (generated_name);
 
   if (G_LIKELY (name != NULL))
     {
diff --git a/thunar/thunar-util.c b/thunar/thunar-util.c
index a5e2b414..934d270f 100644
--- a/thunar/thunar-util.c
+++ b/thunar/thunar-util.c
@@ -56,6 +56,7 @@
 
 #include <thunar/thunar-private.h>
 #include <thunar/thunar-util.h>
+#include <thunar/thunar-folder.h>
 
 #include <glib.h>
 #include <glib/gstdio.h>
@@ -646,8 +647,77 @@ thunar_util_change_working_directory (const gchar *new_directory)
   return old_directory;
 }
 
+
+
 void
 thunar_setup_display_cb (gpointer data)
 {
   g_setenv ("DISPLAY", (char *) data, TRUE);
 }
+
+
+/**
+ * thunar_util_next_new_file_name
+ * @dir : the directory to search for a free filename
+ * @file_name : the filename which will be used as the basis/default
+ *
+ * Returns a filename that is like @file_name with the possible addition of
+ * a number to differentiate it from other similarly named files. In other words
+ * it searches @dir for incrementally named files starting from @file_name
+ * and returns the first available increment.
+ *
+ * e.g. in a folder with the following files:
+ * - file
+ * - empty
+ * - file_copy
+ *
+ * Calling this functions with the above folder and @file_name equal to 'file' the returned
+ * filename will be 'file 1'.
+ *
+ * The caller is responsible to free the returned string using g_free() when no longer needed.
+ *
+ * Return value: pointer to the new filename.
+**/
+gchar*
+thunar_util_next_new_file_name (ThunarFile   *dir,
+                                const gchar  *file_name)
+{
+  ThunarFolder   *folder          = thunar_folder_get_for_file (dir);
+  unsigned long   file_name_size  = strlen (file_name);
+  unsigned        count           = 0;
+  gboolean        found_duplicate = FALSE;
+  gchar          *extension       = NULL;
+  gchar          *new_name        = g_strdup (file_name);
+
+  /* get file extension if file is not a directory */
+  extension = thunar_util_str_get_extension (file_name);
+
+  /* if the file has an extension don't include it in the search */
+  if (extension != NULL)
+    file_name_size -= strlen (extension);
+
+  /* loop through the directory until new_name is unique */
+  while (TRUE)
+    {
+      found_duplicate = FALSE;
+      for (GList *files = thunar_folder_get_files (folder); files != NULL; files = files->next)
+        {
+          ThunarFile  *file = files->data;
+          const gchar *name = thunar_file_get_display_name (file);
+
+          if (strcmp (new_name, name) == 0)
+            {
+              found_duplicate = TRUE;
+              break;
+            }
+        }
+
+      if (!found_duplicate)
+        break;
+      g_free (new_name);
+      new_name = g_strdup_printf (_("%s %u%s"), file_name, ++count, extension ? extension : "");
+    }
+  g_object_unref (G_OBJECT (folder));
+
+  return new_name;
+}
\ No newline at end of file
diff --git a/thunar/thunar-util.h b/thunar/thunar-util.h
index a534a9a4..3d42ab10 100644
--- a/thunar/thunar-util.h
+++ b/thunar/thunar-util.h
@@ -23,6 +23,7 @@
 #define __THUNAR_UTIL_H__
 
 #include <thunar/thunar-enum-types.h>
+#include <thunar/thunar-file.h>
 
 #define THUNAR_THREADS_ENTER \
 G_GNUC_BEGIN_IGNORE_DEPRECATIONS \
@@ -64,7 +65,9 @@ time_t     thunar_util_time_from_rfc3339        (const gchar    *date_string) G_
 
 gchar     *thunar_util_change_working_directory (const gchar    *new_directory) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
 
-void       thunar_setup_display_cb              (gpointer data);
+void       thunar_setup_display_cb              (gpointer        data);
+gchar*     thunar_util_next_new_file_name       (ThunarFile     *dir,
+                                                 const gchar    *file_name);
 
 G_END_DECLS;
 
