diff --git a/thunar/thunar-list-model.c b/thunar/thunar-list-model.c
index 6d98a70c..54fafb21 100644
--- a/thunar/thunar-list-model.c
+++ b/thunar/thunar-list-model.c
@@ -2337,8 +2337,9 @@ thunar_list_model_get_paths_for_files (ThunarListModel *store,
 
 /**
  * thunar_list_model_get_paths_for_pattern:
- * @store   : a #ThunarListModel instance.
- * @pattern : the pattern to match.
+ * @store          : a #ThunarListModel instance.
+ * @pattern        : the pattern to match.
+ * @case_sensitive : %TRUE to use case sensitive search.
  *
  * Looks up all rows in the @store that match @pattern and returns
  * a list of #GtkTreePath<!---->s corresponding to the rows.
@@ -2352,20 +2353,32 @@ thunar_list_model_get_paths_for_files (ThunarListModel *store,
  **/
 GList*
 thunar_list_model_get_paths_for_pattern (ThunarListModel *store,
-                                         const gchar     *pattern)
+                                         const gchar     *pattern,
+                                         gboolean         case_sensitive)
 {
   GPatternSpec  *pspec;
+  gchar         *case_folded_pattern;
   GList         *paths = NULL;
   GSequenceIter *row;
   GSequenceIter *end;
   ThunarFile    *file;
+  const gchar   *display_name;
+  gchar         *case_folded_display_name;
+  gboolean       name_matched;
   gint           i = 0;
 
   _thunar_return_val_if_fail (THUNAR_IS_LIST_MODEL (store), NULL);
   _thunar_return_val_if_fail (g_utf8_validate (pattern, -1, NULL), NULL);
 
   /* compile the pattern */
-  pspec = g_pattern_spec_new (pattern);
+  if (case_sensitive)
+    pspec = g_pattern_spec_new (pattern);
+  else
+    {
+      case_folded_pattern = g_utf8_casefold (pattern, strlen (pattern));
+      pspec = g_pattern_spec_new (case_folded_pattern);
+      g_free (case_folded_pattern);
+    }
 
   row = g_sequence_get_begin_iter (store->rows);
   end = g_sequence_get_end_iter (store->rows);
@@ -2374,7 +2387,18 @@ thunar_list_model_get_paths_for_pattern (ThunarListModel *store,
   while (row != end)
     {
       file = g_sequence_get (row);
-      if (g_pattern_match_string (pspec, thunar_file_get_display_name (file)))
+      display_name = thunar_file_get_display_name (file);
+
+      if (case_sensitive)
+        name_matched = g_pattern_match_string (pspec, display_name);
+      else
+        {
+          case_folded_display_name = g_utf8_casefold (display_name, strlen (display_name));
+          name_matched = g_pattern_match_string (pspec, case_folded_display_name);
+          g_free (case_folded_display_name);
+        }
+
+      if (name_matched)
         {
           _thunar_assert (i == g_sequence_iter_get_position (row));
           paths = g_list_prepend (paths, gtk_tree_path_new_from_indices (i, -1));
@@ -2645,7 +2669,7 @@ thunar_list_model_get_statusbar_text (ThunarListModel *store,
           gtk_tree_model_get_iter (GTK_TREE_MODEL (store), &iter, lp->data);
           relevant_files = g_list_append (relevant_files, g_sequence_get (iter.user_data));
         }
-        
+
       size_string = thunar_list_model_get_statusbar_text_for_files (relevant_files, show_file_size_binary_format);
       text = g_strdup_printf (_("Selection: %s"), size_string);
       g_free (size_string);
diff --git a/thunar/thunar-list-model.h b/thunar/thunar-list-model.h
index 459ee7a8..2328c83a 100644
--- a/thunar/thunar-list-model.h
+++ b/thunar/thunar-list-model.h
@@ -60,7 +60,8 @@ ThunarFile      *thunar_list_model_get_file               (ThunarListModel  *sto
 GList           *thunar_list_model_get_paths_for_files    (ThunarListModel  *store,
                                                            GList            *files);
 GList           *thunar_list_model_get_paths_for_pattern  (ThunarListModel  *store,
-                                                           const gchar      *pattern);
+                                                           const gchar      *pattern,
+                                                           gboolean          case_sensitive);
 
 gchar           *thunar_list_model_get_statusbar_text     (ThunarListModel  *store,
                                                            GList            *selected_items);
diff --git a/thunar/thunar-standard-view.c b/thunar/thunar-standard-view.c
index 1c090e4c..1878ac9d 100644
--- a/thunar/thunar-standard-view.c
+++ b/thunar/thunar-standard-view.c
@@ -272,7 +272,7 @@ static void                 thunar_standard_view_action_sort_by_date_deleted
 static void                 thunar_standard_view_action_sort_by_size               (ThunarStandardView       *standard_view);
 static void                 thunar_standard_view_action_sort_ascending             (ThunarStandardView       *standard_view);
 static void                 thunar_standard_view_action_sort_descending            (ThunarStandardView       *standard_view);
-static void                 thunar_standard_view_set_sort_column                   (ThunarStandardView       *standard_view, 
+static void                 thunar_standard_view_set_sort_column                   (ThunarStandardView       *standard_view,
                                                                                     ThunarColumn column);
 static void                 thunar_standard_view_toggle_sort_order                 (ThunarStandardView       *standard_view);
 static void                 thunar_standard_view_store_sort_column                 (ThunarStandardView       *standard_view);
@@ -2159,12 +2159,14 @@ thunar_standard_view_select_by_pattern (ThunarView *view)
   GtkWidget          *hbox;
   GtkWidget          *label;
   GtkWidget          *entry;
+  GtkWidget          *case_sensitive_button;
   GList              *paths;
   GList              *lp;
   gint                response;
   gchar              *example_pattern;
   const gchar        *pattern;
   gchar              *pattern_extended = NULL;
+  gboolean            case_sensitive;
 
   _thunar_return_if_fail (THUNAR_IS_STANDARD_VIEW (standard_view));
 
@@ -2197,7 +2199,12 @@ thunar_standard_view_select_by_pattern (ThunarView *view)
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
   gtk_widget_show (entry);
 
-  hbox = g_object_new (GTK_TYPE_BOX, "orientation", GTK_ORIENTATION_HORIZONTAL, "margin-right", 6, "margin-bottom", 6, "spacing", 0, NULL);
+  case_sensitive_button = gtk_check_button_new_with_label (_("Case sensitive"));
+  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (case_sensitive_button), TRUE);
+  gtk_box_pack_start (GTK_BOX (vbox), case_sensitive_button, TRUE, TRUE, 0);
+  gtk_widget_show (case_sensitive_button);
+
+  hbox = g_object_new (GTK_TYPE_BOX, "orientation", GTK_ORIENTATION_HORIZONTAL, "border-width", 6, "spacing", 0, NULL);
   gtk_box_pack_start (GTK_BOX (vbox), hbox, TRUE, TRUE, 0);
   gtk_widget_show (hbox);
 
@@ -2207,7 +2214,7 @@ thunar_standard_view_select_by_pattern (ThunarView *view)
                                      "*.png, file\?\?.txt, pict*.\?\?\?");
   gtk_label_set_markup (GTK_LABEL (label), example_pattern);
   g_free (example_pattern);
-  gtk_box_pack_end (GTK_BOX (hbox), label, FALSE, FALSE, 0);
+  gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
   gtk_widget_show (label);
 
   response = gtk_dialog_run (GTK_DIALOG (dialog));
@@ -2224,8 +2231,11 @@ thunar_standard_view_select_by_pattern (ThunarView *view)
           pattern = pattern_extended;
         }
 
+      /* get case sensitivity option */
+      case_sensitive = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (case_sensitive_button));
+
       /* select all files that match pattern */
-      paths = thunar_list_model_get_paths_for_pattern (standard_view->model, pattern);
+      paths = thunar_list_model_get_paths_for_pattern (standard_view->model, pattern, case_sensitive);
       THUNAR_STANDARD_VIEW_GET_CLASS (standard_view)->unselect_all (standard_view);
 
       /* set the cursor and scroll to the first selected item */
@@ -2770,7 +2780,7 @@ thunar_standard_view_drag_data_received (GtkWidget          *view,
                               /* reload the directory when the command terminates */
                               g_child_watch_add_full (G_PRIORITY_LOW, pid, tsv_reload_directory, working_directory, g_free);
                             }
-                          
+
                           /* cleanup */
                           g_free (display);
                         }
