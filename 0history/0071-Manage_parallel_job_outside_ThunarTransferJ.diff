diff --git a/thunar/thunar-dialogs.c b/thunar/thunar-dialogs.c
index 046f32da..9a8aa517 100644
--- a/thunar/thunar-dialogs.c
+++ b/thunar/thunar-dialogs.c
@@ -326,6 +326,7 @@ thunar_dialogs_show_rename_file (gpointer    parent,
         {
           /* try to rename the file */
           job = thunar_io_jobs_rename_file (file, text);
+          exo_job_launch (EXO_JOB (job));
         }
     }
 
diff --git a/thunar/thunar-folder.c b/thunar/thunar-folder.c
index d686ec67..72ede938 100644
--- a/thunar/thunar-folder.c
+++ b/thunar/thunar-folder.c
@@ -1031,6 +1031,7 @@ thunar_folder_reload (ThunarFolder *folder,
 
   /* start a new job */
   folder->job = thunar_io_jobs_list_directory (thunar_file_get_file (folder->corresponding_file));
+  exo_job_launch (EXO_JOB (folder->job));
   g_signal_connect (folder->job, "error", G_CALLBACK (thunar_folder_error), folder);
   g_signal_connect (folder->job, "finished", G_CALLBACK (thunar_folder_finished), folder);
   g_signal_connect (folder->job, "files-ready", G_CALLBACK (thunar_folder_files_ready), folder);
diff --git a/thunar/thunar-io-jobs.c b/thunar/thunar-io-jobs.c
index 5a69b489..9b9d4a35 100644
--- a/thunar/thunar-io-jobs.c
+++ b/thunar/thunar-io-jobs.c
@@ -167,7 +167,7 @@ _thunar_io_jobs_create (ThunarJob  *job,
       /* update progress information */
       thunar_job_processing_file (THUNAR_JOB (job), lp, n_processed);
 
-again:
+    again:
       /* try to create the file */
       stream = g_file_create (lp->data,
                               G_FILE_CREATE_NONE,
@@ -287,9 +287,9 @@ ThunarJob *
 thunar_io_jobs_create_files (GList *file_list,
                              GFile *template_file)
 {
-  return thunar_simple_job_launch (_thunar_io_jobs_create, 2,
-                                   THUNAR_TYPE_G_FILE_LIST, file_list,
-                                   G_TYPE_FILE, template_file);
+  return thunar_simple_job_new (_thunar_io_jobs_create, 2,
+                                THUNAR_TYPE_G_FILE_LIST, file_list,
+                                G_TYPE_FILE, template_file);
 }
 
 
@@ -327,7 +327,7 @@ _thunar_io_jobs_mkdir (ThunarJob  *job,
       /* update progress information */
       thunar_job_processing_file (THUNAR_JOB (job), lp, n_processed);
 
-again:
+    again:
       /* try to create the directory */
       if (!g_file_make_directory (lp->data, exo_job_get_cancellable (EXO_JOB (job)), &err))
         {
@@ -425,8 +425,8 @@ again:
 ThunarJob *
 thunar_io_jobs_make_directories (GList *file_list)
 {
-  return thunar_simple_job_launch (_thunar_io_jobs_mkdir, 1,
-                                   THUNAR_TYPE_G_FILE_LIST, file_list);
+  return thunar_simple_job_new (_thunar_io_jobs_mkdir, 1,
+                                THUNAR_TYPE_G_FILE_LIST, file_list);
 }
 
 
@@ -495,7 +495,7 @@ _thunar_io_jobs_unlink (ThunarJob  *job,
       /* update progress information */
       thunar_job_processing_file (THUNAR_JOB (job), lp, n_processed);
 
-again:
+    again:
       /* try to delete the file */
       if (_tij_delete_file (lp->data, exo_job_get_cancellable (EXO_JOB (job)), &err))
         {
@@ -564,8 +564,8 @@ again:
 ThunarJob *
 thunar_io_jobs_unlink_files (GList *file_list)
 {
-  return thunar_simple_job_launch (_thunar_io_jobs_unlink, 1,
-                                   THUNAR_TYPE_G_FILE_LIST, file_list);
+  return thunar_simple_job_new (_thunar_io_jobs_unlink, 1,
+                                THUNAR_TYPE_G_FILE_LIST, file_list);
 }
 
 
@@ -584,7 +584,7 @@ thunar_io_jobs_move_files (GList *source_file_list,
                                  THUNAR_TRANSFER_JOB_MOVE);
   thunar_job_set_pausable (job, TRUE);
 
-  return THUNAR_JOB (exo_job_launch (EXO_JOB (job)));
+  return job;
 }
 
 
@@ -603,7 +603,7 @@ thunar_io_jobs_copy_files (GList *source_file_list,
                                  THUNAR_TRANSFER_JOB_COPY);
   thunar_job_set_pausable (job, TRUE);
 
-  return THUNAR_JOB (exo_job_launch (EXO_JOB (job)));
+  return job;
 }
 
 
@@ -826,9 +826,9 @@ thunar_io_jobs_link_files (GList *source_file_list,
   _thunar_return_val_if_fail (target_file_list != NULL, NULL);
   _thunar_return_val_if_fail (g_list_length (source_file_list) == g_list_length (target_file_list), NULL);
 
-  return thunar_simple_job_launch (_thunar_io_jobs_link, 2,
-                                   THUNAR_TYPE_G_FILE_LIST, source_file_list,
-                                   THUNAR_TYPE_G_FILE_LIST, target_file_list);
+  return thunar_simple_job_new (_thunar_io_jobs_link, 2,
+                                THUNAR_TYPE_G_FILE_LIST, source_file_list,
+                                THUNAR_TYPE_G_FILE_LIST, target_file_list);
 }
 
 
@@ -905,8 +905,8 @@ thunar_io_jobs_trash_files (GList *file_list)
 {
   _thunar_return_val_if_fail (file_list != NULL, NULL);
 
-  return thunar_simple_job_launch (_thunar_io_jobs_trash, 1,
-                                   THUNAR_TYPE_G_FILE_LIST, file_list);
+  return thunar_simple_job_new (_thunar_io_jobs_trash, 1,
+                                THUNAR_TYPE_G_FILE_LIST, file_list);
 }
 
 
@@ -924,7 +924,7 @@ thunar_io_jobs_restore_files (GList *source_file_list,
   job = thunar_transfer_job_new (source_file_list, target_file_list,
                                  THUNAR_TRANSFER_JOB_MOVE);
 
-  return THUNAR_JOB (exo_job_launch (EXO_JOB (job)));
+  return job;
 }
 
 
@@ -988,7 +988,7 @@ _thunar_io_jobs_chown (ThunarJob  *job,
       if (err != NULL)
         break;
 
-retry_chown:
+    retry_chown:
       if (uid >= 0)
         {
           /* try to change the owner UID */
@@ -1013,7 +1013,7 @@ retry_chown:
         {
           /* generate a useful error message */
           message = G_LIKELY (uid >= 0) ? _("Failed to change the owner of \"%s\": %s")
-                                        : _("Failed to change the group of \"%s\": %s");
+            : _("Failed to change the group of \"%s\": %s");
 
           /* ask the user whether to skip/retry this file */
           response = thunar_job_ask_skip (THUNAR_JOB (job), message,
@@ -1058,11 +1058,11 @@ thunar_io_jobs_change_group (GList    *files,
   /* files are released when the list if destroyed */
   g_list_foreach (files, (GFunc) (void (*)(void)) g_object_ref, NULL);
 
-  return thunar_simple_job_launch (_thunar_io_jobs_chown, 4,
-                                   THUNAR_TYPE_G_FILE_LIST, files,
-                                   G_TYPE_INT, -1,
-                                   G_TYPE_INT, (gint) gid,
-                                   G_TYPE_BOOLEAN, recursive);
+  return thunar_simple_job_new (_thunar_io_jobs_chown, 4,
+                                THUNAR_TYPE_G_FILE_LIST, files,
+                                G_TYPE_INT, -1,
+                                G_TYPE_INT, (gint) gid,
+                                G_TYPE_BOOLEAN, recursive);
 }
 
 
@@ -1133,7 +1133,7 @@ _thunar_io_jobs_chmod (ThunarJob  *job,
       if (err != NULL)
         break;
 
-retry_chown:
+    retry_chown:
       /* different actions depending on the type of the file */
       if (g_file_info_get_file_type (info) == G_FILE_TYPE_DIRECTORY)
         {
@@ -1214,13 +1214,13 @@ thunar_io_jobs_change_mode (GList         *files,
   /* files are released when the list if destroyed */
   g_list_foreach (files, (GFunc) (void (*)(void)) g_object_ref, NULL);
 
-  return thunar_simple_job_launch (_thunar_io_jobs_chmod, 6,
-                                   THUNAR_TYPE_G_FILE_LIST, files,
-                                   THUNAR_TYPE_FILE_MODE, dir_mask,
-                                   THUNAR_TYPE_FILE_MODE, dir_mode,
-                                   THUNAR_TYPE_FILE_MODE, file_mask,
-                                   THUNAR_TYPE_FILE_MODE, file_mode,
-                                   G_TYPE_BOOLEAN, recursive);
+  return thunar_simple_job_new (_thunar_io_jobs_chmod, 6,
+                                THUNAR_TYPE_G_FILE_LIST, files,
+                                THUNAR_TYPE_FILE_MODE, dir_mask,
+                                THUNAR_TYPE_FILE_MODE, dir_mode,
+                                THUNAR_TYPE_FILE_MODE, file_mask,
+                                THUNAR_TYPE_FILE_MODE, file_mode,
+                                G_TYPE_BOOLEAN, recursive);
 }
 
 
@@ -1297,7 +1297,7 @@ thunar_io_jobs_list_directory (GFile *directory)
 {
   _thunar_return_val_if_fail (G_IS_FILE (directory), NULL);
 
-  return thunar_simple_job_launch (_thunar_io_jobs_ls, 1, G_TYPE_FILE, directory);
+  return thunar_simple_job_new (_thunar_io_jobs_ls, 1, G_TYPE_FILE, directory);
 }
 
 
@@ -1368,7 +1368,7 @@ thunar_io_jobs_rename_file (ThunarFile  *file,
   _thunar_return_val_if_fail (THUNAR_IS_FILE (file), NULL);
   _thunar_return_val_if_fail (g_utf8_validate (display_name, -1, NULL), NULL);
 
-  return thunar_simple_job_launch (_thunar_io_jobs_rename, 2,
-                                   THUNAR_TYPE_FILE, file,
-                                   G_TYPE_STRING, display_name);
+  return thunar_simple_job_new (_thunar_io_jobs_rename, 2,
+                                THUNAR_TYPE_FILE, file,
+                                G_TYPE_STRING, display_name);
 }
diff --git a/thunar/thunar-job.c b/thunar/thunar-job.c
index 0f2d2c26..efc46024 100644
--- a/thunar/thunar-job.c
+++ b/thunar/thunar-job.c
@@ -43,7 +43,6 @@ enum
 {
   ASK,
   ASK_REPLACE,
-  ASK_JOBS,
   FILES_READY,
   NEW_FILES,
   FROZEN,
@@ -204,22 +203,6 @@ thunar_job_class_init (ThunarJobClass *klass)
                   g_cclosure_marshal_VOID__POINTER,
                   G_TYPE_NONE, 1, G_TYPE_POINTER);
 
-  /**
-   * ThunarJob::ask-jobs:
-   * @job      : a #ThunarJob.
-   *
-   * Emitted to ask the running job list.
-   *
-   * Return value: GList* of running jobs.
-   **/
-  job_signals[ASK_JOBS] =
-    g_signal_new (I_("ask-jobs"),
-                  G_TYPE_FROM_CLASS (klass),
-                  G_SIGNAL_NO_HOOKS, 0,
-                  NULL, NULL,
-                  g_cclosure_marshal_generic,
-                  G_TYPE_POINTER, 0);
-
   /**
    * ThunarJob::frozen:
    * @job       : a #ThunarJob.
@@ -704,19 +687,6 @@ thunar_job_new_files (ThunarJob   *job,
 
 
 
-GList *
-thunar_job_ask_jobs (ThunarJob *job)
-{
-  GList* jobs = NULL;
-
-  _thunar_return_val_if_fail (THUNAR_IS_JOB (job), NULL);
-
-  g_signal_emit (EXO_JOB (job), job_signals[ASK_JOBS], 0, &jobs);
-  return jobs;
-}
-
-
-
 void
 thunar_job_set_total_files (ThunarJob *job,
                             GList     *total_files)
diff --git a/thunar/thunar-job.h b/thunar/thunar-job.h
index a906cfa4..925218d4 100644
--- a/thunar/thunar-job.h
+++ b/thunar/thunar-job.h
@@ -104,8 +104,6 @@ gboolean          thunar_job_files_ready            (ThunarJob       *job,
                                                      GList           *file_list);
 void              thunar_job_new_files              (ThunarJob       *job,
                                                      const GList     *file_list);
-GList *           thunar_job_ask_jobs               (ThunarJob       *job);
-
 G_END_DECLS
 
 #endif /* !__THUNAR_JOB_H__ */
diff --git a/thunar/thunar-permissions-chooser.c b/thunar/thunar-permissions-chooser.c
index 74031fa2..747e7d97 100644
--- a/thunar/thunar-permissions-chooser.c
+++ b/thunar/thunar-permissions-chooser.c
@@ -733,6 +733,7 @@ thunar_permissions_chooser_change_group (ThunarPermissionsChooser *chooser,
   /* try to allocate the new job */
   file_list = thunar_permissions_chooser_get_file_list (chooser);
   job = thunar_io_jobs_change_group (file_list, gid, recursive);
+  exo_job_launch (EXO_JOB (job));
   thunar_permissions_chooser_job_start (chooser, job, recursive);
   g_list_free_full (file_list, g_object_unref);
   g_object_unref (job);
@@ -778,6 +779,7 @@ thunar_permissions_chooser_change_mode (ThunarPermissionsChooser *chooser,
   /* try to allocate the new job */
   file_list = thunar_permissions_chooser_get_file_list (chooser);
   job = thunar_io_jobs_change_mode (file_list, dir_mask, dir_mode, file_mask, file_mode, recursive);
+  exo_job_launch (EXO_JOB (job));
   thunar_permissions_chooser_job_start (chooser, job, recursive);
   g_list_free_full (file_list, g_object_unref);
   g_object_unref (job);
@@ -1197,6 +1199,7 @@ thunar_permissions_chooser_fixperm_clicked (ThunarPermissionsChooser *chooser,
           /* try to allocate the new job */
           job = thunar_io_jobs_change_mode (&file_list,
                                             0511, mode, 0000, 0000, FALSE);
+          exo_job_launch (EXO_JOB (job));
 
           /* handle the job */
           thunar_permissions_chooser_job_start (chooser, job, FALSE);
diff --git a/thunar/thunar-progress-dialog.c b/thunar/thunar-progress-dialog.c
index b056922e..2fde19de 100644
--- a/thunar/thunar-progress-dialog.c
+++ b/thunar/thunar-progress-dialog.c
@@ -29,6 +29,7 @@
 #include <thunar/thunar-private.h>
 #include <thunar/thunar-progress-dialog.h>
 #include <thunar/thunar-progress-view.h>
+#include <thunar/thunar-transfer-job.h>
 
 
 
@@ -39,6 +40,7 @@
 static void     thunar_progress_dialog_dispose            (GObject              *object);
 static void     thunar_progress_dialog_finalize           (GObject              *object);
 static gboolean thunar_progress_dialog_closed             (ThunarProgressDialog *dialog);
+static gint     thunar_progress_dialog_n_views            (ThunarProgressDialog *dialog);
 
 
 
@@ -55,7 +57,10 @@ struct _ThunarProgressDialog
   GtkWidget     *vbox;
   GtkWidget     *content_box;
 
+  /* List of running views, type ThunarProgressView */
   GList         *views;
+  /* List of waiting views, type ThunarProgressView */
+  GList         *views_waiting;
 
   gint           x;
   gint           y;
@@ -86,6 +91,7 @@ static void
 thunar_progress_dialog_init (ThunarProgressDialog *dialog)
 {
   dialog->views = NULL;
+  dialog->views_waiting = NULL;
 
   gtk_window_set_title (GTK_WINDOW (dialog), _("File Operation Progress"));
   gtk_window_set_default_size (GTK_WINDOW (dialog), 450, 10);
@@ -124,6 +130,7 @@ thunar_progress_dialog_finalize (GObject *object)
 
   /* free the view list */
   g_list_free (dialog->views);
+  g_list_free (dialog->views_waiting);
 
   (*G_OBJECT_CLASS (thunar_progress_dialog_parent_class)->finalize) (object);
 }
@@ -147,6 +154,19 @@ thunar_progress_dialog_closed (ThunarProgressDialog *dialog)
 
 
 
+static gint
+thunar_progress_dialog_n_views (ThunarProgressDialog *dialog)
+{
+  gint n_views;
+
+  n_views  = g_list_length (dialog->views);
+  n_views += g_list_length (dialog->views_waiting);
+
+  return n_views;
+}
+
+
+
 static void
 thunar_progress_dialog_view_needs_attention (ThunarProgressDialog *dialog,
                                              ThunarProgressView   *view)
@@ -162,6 +182,72 @@ thunar_progress_dialog_view_needs_attention (ThunarProgressDialog *dialog,
 
 
 
+static void
+thunar_progress_dialog_launch_view (ThunarProgressDialog *dialog,
+                                    ThunarProgressView   *view)
+{
+  GValue  title = {0,};
+  GList  *view_lp;
+
+  _thunar_return_if_fail (THUNAR_IS_PROGRESS_DIALOG (dialog));
+  _thunar_return_if_fail (THUNAR_IS_PROGRESS_VIEW (view));
+
+  view_lp = g_list_find (dialog->views_waiting, view);
+  if (view_lp != NULL)
+    {
+      dialog->views_waiting = g_list_remove_link (dialog->views_waiting, view_lp);
+      dialog->views         = g_list_concat (view_lp, dialog->views);
+      thunar_progress_view_launch_job (THUNAR_PROGRESS_VIEW (view_lp->data));
+    }
+  else
+    {
+      g_value_init (&title, G_TYPE_STRING);
+      g_object_get_property (G_OBJECT (view), "title", &title);
+      g_info ("Job \"%s\" does not exist in waiting list",
+              g_value_get_string (&title));
+    }
+}
+
+
+
+static void
+launch_waiting_jobs (ThunarProgressDialog *dialog)
+{
+  gboolean           launched     = FALSE;
+  GList             *lp           = NULL;
+  GList             *next         = NULL;
+  GList             *job_list;
+  ThunarTransferJob *transfer_job;
+
+  lp = dialog->views_waiting;
+  if (lp == NULL)
+    return;
+  job_list = thunar_progress_dialog_list_jobs (dialog);
+  while (lp != NULL)
+    {
+      next         = lp->next;
+      transfer_job = THUNAR_TRANSFER_JOB (thunar_progress_view_get_job (THUNAR_PROGRESS_VIEW (lp->data)));
+      if (thunar_transfer_job_can_start (transfer_job, job_list))
+        {
+          launched = TRUE;
+
+          /* Move the view to the running list, and then launch a job */
+          dialog->views_waiting = g_list_remove_link (dialog->views_waiting, lp);
+          dialog->views         = g_list_concat (lp, dialog->views);
+          thunar_progress_view_launch_job (THUNAR_PROGRESS_VIEW (lp->data));
+
+          job_list = g_list_prepend (job_list, lp->data);
+        }
+      lp = next;
+    }
+  g_list_free (job_list);
+
+  if (launched == FALSE)
+    g_warning ("Waiting jobs cannot be launched");
+}
+
+
+
 static void
 thunar_progress_dialog_job_finished (ThunarProgressDialog *dialog,
                                      ThunarProgressView   *view)
@@ -172,13 +258,14 @@ thunar_progress_dialog_job_finished (ThunarProgressDialog *dialog,
   _thunar_return_if_fail (THUNAR_IS_PROGRESS_VIEW (view));
 
   /* remove the view from the list */
-  dialog->views = g_list_remove (dialog->views, view);
+  dialog->views         = g_list_remove (dialog->views,         view);
+  dialog->views_waiting = g_list_remove (dialog->views_waiting, view);
 
   /* destroy the widget */
   gtk_widget_destroy (GTK_WIDGET (view));
 
   /* determine the number of views left */
-  n_views = g_list_length (dialog->views);
+  n_views = thunar_progress_dialog_n_views (dialog);
 
   /* check if we've just removed the 4th view and are now left with
    * SCROLLVIEW_THRESHOLD-1 of them, in which case we drop the scroll window */
@@ -203,7 +290,9 @@ thunar_progress_dialog_job_finished (ThunarProgressDialog *dialog,
       gtk_window_resize (GTK_WINDOW (dialog), 450, 10);
     }
 
-  if (dialog->views == NULL)
+  launch_waiting_jobs (dialog);
+
+  if (!thunar_progress_dialog_has_jobs (dialog))
     {
       /* destroy the dialog as there are no views left */
       gtk_widget_destroy (GTK_WIDGET (dialog));
@@ -264,6 +353,7 @@ thunar_progress_dialog_add_job (ThunarProgressDialog *dialog,
 {
   GtkWidget *viewport;
   GtkWidget *view;
+  GList     *job_list;
 
   _thunar_return_if_fail (THUNAR_IS_PROGRESS_DIALOG (dialog));
   _thunar_return_if_fail (THUNAR_IS_JOB (job));
@@ -279,12 +369,23 @@ thunar_progress_dialog_add_job (ThunarProgressDialog *dialog,
   if (dialog->views == NULL)
     gtk_window_set_icon_name (GTK_WINDOW (dialog), icon_name);
 
-  /* add the view to the list of known views */
-  dialog->views = g_list_prepend (dialog->views, view);
+  /* Check if the job can start */
+  job_list = thunar_progress_dialog_list_jobs (dialog);
+  if (!THUNAR_IS_TRANSFER_JOB (job)
+      || thunar_transfer_job_can_start (THUNAR_TRANSFER_JOB (job), job_list))
+    {
+      dialog->views = g_list_append (dialog->views, view);
+      thunar_progress_view_launch_job (THUNAR_PROGRESS_VIEW (view));
+    }
+  else
+    {
+      dialog->views_waiting = g_list_append (dialog->views_waiting, view);
+    }
+  g_list_free (job_list);
 
   /* check if we need to wrap the views in a scroll window (starting
    * at SCROLLVIEW_THRESHOLD parallel operations */
-  if (g_list_length (dialog->views) == SCROLLVIEW_THRESHOLD)
+  if (thunar_progress_dialog_n_views (dialog) == SCROLLVIEW_THRESHOLD)
     {
       /* create a scrolled window and add it to the dialog */
       dialog->scrollwin = gtk_scrolled_window_new (NULL, NULL);
@@ -315,8 +416,8 @@ thunar_progress_dialog_add_job (ThunarProgressDialog *dialog,
   g_signal_connect_swapped (view, "finished",
                             G_CALLBACK (thunar_progress_dialog_job_finished), dialog);
 
-  g_signal_connect_swapped (job, "ask-jobs",
-                            G_CALLBACK (thunar_progress_dialog_list_jobs), dialog);
+  g_signal_connect_swapped (view, "force-launch",
+                            G_CALLBACK (thunar_progress_dialog_launch_view), dialog);
 }
 
 
@@ -324,6 +425,10 @@ thunar_progress_dialog_add_job (ThunarProgressDialog *dialog,
 gboolean
 thunar_progress_dialog_has_jobs (ThunarProgressDialog *dialog)
 {
+  gboolean has_jobs;
   _thunar_return_val_if_fail (THUNAR_IS_PROGRESS_DIALOG (dialog), FALSE);
-  return dialog->views != NULL;
+
+  has_jobs = (dialog->views != NULL) || (dialog->views_waiting != NULL);
+
+  return has_jobs;
 }
diff --git a/thunar/thunar-progress-view.c b/thunar/thunar-progress-view.c
index 4be25118..d1823fcf 100644
--- a/thunar/thunar-progress-view.c
+++ b/thunar/thunar-progress-view.c
@@ -103,6 +103,8 @@ struct _ThunarProgressView
   GtkWidget *pause_button;
   GtkWidget *unpause_button;
 
+  gboolean   launched;
+
   gchar     *icon_name;
   gchar     *title;
 };
@@ -171,6 +173,16 @@ thunar_progress_view_class_init (ThunarProgressViewClass *klass)
                 g_cclosure_marshal_VOID__VOID,
                 G_TYPE_NONE,
                 0);
+
+  g_signal_new ("force-launch",
+                THUNAR_TYPE_PROGRESS_VIEW,
+                G_SIGNAL_RUN_LAST | G_SIGNAL_NO_HOOKS,
+                0,
+                NULL,
+                NULL,
+                g_cclosure_marshal_VOID__VOID,
+                G_TYPE_NONE,
+                0);
 }
 
 
@@ -186,6 +198,8 @@ thunar_progress_view_init (ThunarProgressView *view)
   GtkWidget *vbox3;
   GtkWidget *hbox;
 
+  view->launched = FALSE;
+
   gtk_orientable_set_orientation (GTK_ORIENTABLE (view), GTK_ORIENTATION_VERTICAL);
 
   vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);
@@ -388,10 +402,17 @@ thunar_progress_view_unpause_job (ThunarProgressView *view)
         thunar_job_resume (view->job);
       if (thunar_job_is_frozen (view->job))
         thunar_job_unfreeze (view->job);
+      if (!view->launched)
+        {
+          view->launched = TRUE;
+          g_signal_emit_by_name (view, "force-launch");
+          gtk_label_set_text (GTK_LABEL (view->progress_label), _("Starting... (User request)"));
+        }
+      else
+        gtk_label_set_text (GTK_LABEL (view->progress_label), _("Resuming..."));
       /* update the UI */
       gtk_widget_hide (view->unpause_button);
       gtk_widget_show (view->pause_button);
-      gtk_label_set_text (GTK_LABEL (view->progress_label), _("Resuming..."));
     }
 }
 
@@ -424,6 +445,10 @@ thunar_progress_view_cancel_job (ThunarProgressView *view)
 
       /* update the status text */
       gtk_label_set_text (GTK_LABEL (view->progress_label), _("Cancelling..."));
+
+      /* Manually turn off when the job was not initialized */
+      if (!view->launched)
+        g_signal_emit_by_name (view, "finished");
     }
 }
 
@@ -611,8 +636,13 @@ thunar_progress_view_unfrozen (ThunarProgressView *view,
 GtkWidget*
 thunar_progress_view_new_with_job (ThunarJob *job)
 {
+  ThunarProgressView *view;
+
   _thunar_return_val_if_fail (job == NULL || THUNAR_IS_JOB (job), NULL);
-  return g_object_new (THUNAR_TYPE_PROGRESS_VIEW, "job", job, NULL);
+
+  view = g_object_new (THUNAR_TYPE_PROGRESS_VIEW, "job", job, NULL);
+  gtk_label_set_text (GTK_LABEL (view->progress_label), _("Queued"));
+  return GTK_WIDGET (view);
 }
 
 
@@ -681,7 +711,7 @@ thunar_progress_view_set_job (ThunarProgressView *view,
       g_signal_connect_swapped (job, "unfrozen", G_CALLBACK (thunar_progress_view_unfrozen), view);
       if (thunar_job_is_pausable (job))
         {
-          gtk_widget_show (view->pause_button);
+          gtk_widget_show (view->unpause_button);
         }
     }
 
@@ -721,3 +751,18 @@ thunar_progress_view_set_title (ThunarProgressView *view,
 
   g_object_notify (G_OBJECT (view), "title");
 }
+
+
+
+void
+thunar_progress_view_launch_job (ThunarProgressView *view)
+{
+  _thunar_return_if_fail (THUNAR_IS_PROGRESS_VIEW (view));
+
+  exo_job_launch (EXO_JOB (view->job));
+
+  view->launched = TRUE;
+
+  gtk_widget_hide (view->unpause_button);
+  gtk_widget_show (view->pause_button);
+}
diff --git a/thunar/thunar-progress-view.h b/thunar/thunar-progress-view.h
index cd81e857..3be9b68b 100644
--- a/thunar/thunar-progress-view.h
+++ b/thunar/thunar-progress-view.h
@@ -46,6 +46,7 @@ void       thunar_progress_view_set_icon_name (ThunarProgressView *view,
 void       thunar_progress_view_set_title     (ThunarProgressView *view,
                                                const gchar        *title);
 ThunarJob *thunar_progress_view_get_job       (ThunarProgressView *view);
+void       thunar_progress_view_launch_job    (ThunarProgressView *view);
 
 G_END_DECLS;
 
diff --git a/thunar/thunar-properties-dialog.c b/thunar/thunar-properties-dialog.c
index 10b33f2a..1bb0eb36 100644
--- a/thunar/thunar-properties-dialog.c
+++ b/thunar/thunar-properties-dialog.c
@@ -843,6 +843,7 @@ thunar_properties_dialog_name_activate (GtkWidget              *entry,
   if (g_utf8_collate (new_name, old_name) != 0)
     {
       job = thunar_io_jobs_rename_file (file, new_name);
+      exo_job_launch (EXO_JOB (job));
       if (job != NULL)
         {
           g_signal_connect (job, "error", G_CALLBACK (thunar_properties_dialog_rename_error), dialog);
diff --git a/thunar/thunar-simple-job.c b/thunar/thunar-simple-job.c
index 2d0233a1..50dae97d 100644
--- a/thunar/thunar-simple-job.c
+++ b/thunar/thunar-simple-job.c
@@ -143,7 +143,7 @@ thunar_simple_job_execute (ExoJob  *job,
 
 
 /**
- * thunar_simple_job_launch:
+ * thunar_simple_job_new:
  * @func           : the #ThunarSimpleJobFunc to execute the job.
  * @n_param_values : the number of parameters to pass to the @func.
  * @...            : a list of #GType and parameter pairs (exactly
@@ -152,24 +152,27 @@ thunar_simple_job_execute (ExoJob  *job,
  * Allocates a new #ThunarSimpleJob, which executes the specified
  * @func with the specified parameters.
  *
+ * Use exo_job_launch() to launch the returned job..
+ *
  * For example the listdir @func expects a #ThunarPath for the
- * folder to list, so the call to thunar_simple_job_launch()
+ * folder to list, so the call to thunar_simple_job_new()
  * would look like this:
  *
  * <informalexample><programlisting>
- * thunar_simple_job_launch (_thunar_io_jobs_listdir, 1,
- *                               THUNAR_TYPE_PATH, path);
+ * job = thunar_simple_job_new (_thunar_io_jobs_listdir, 1,
+ *                              THUNAR_TYPE_PATH, path);
+ * exo_job_launch (EXO_JOB (job));
  * </programlisting></informalexample>
  *
  * The caller is responsible to release the returned object using
  * thunar_job_unref() when no longer needed.
  *
- * Return value: the launched #ThunarJob.
+ * Return value: a #ThunarJob.
  **/
 ThunarJob *
-thunar_simple_job_launch (ThunarSimpleJobFunc func,
-                          guint               n_param_values,
-                          ...)
+thunar_simple_job_new (ThunarSimpleJobFunc func,
+                       guint               n_param_values,
+                       ...)
 {
   ThunarSimpleJob *simple_job;
   va_list          var_args;
@@ -207,8 +210,7 @@ thunar_simple_job_launch (ThunarSimpleJobFunc func,
     }
   va_end (var_args);
 
-  /* launch the job */
-  return THUNAR_JOB (exo_job_launch (EXO_JOB (simple_job)));
+  return THUNAR_JOB (simple_job);
 }
 
 
diff --git a/thunar/thunar-simple-job.h b/thunar/thunar-simple-job.h
index 83e5b862..df69768f 100644
--- a/thunar/thunar-simple-job.h
+++ b/thunar/thunar-simple-job.h
@@ -29,10 +29,10 @@ G_BEGIN_DECLS
  * ThunarSimpleJobFunc:
  * @job            : a #ThunarJob.
  * @param_values   : a #GArray of the #GValue<!---->s passed to
- *                   thunar_simple_job_launch().
+ *                   thunar_simple_job_new().
  * @error          : return location for errors.
  *
- * Used by the #ThunarSimpleJob to process the @job. See thunar_simple_job_launch()
+ * Used by the #ThunarSimpleJob to process the @job. See thunar_simple_job_new()
  * for further details.
  *
  * Return value: %TRUE on success, %FALSE in case of an error.
@@ -54,7 +54,7 @@ typedef struct _ThunarSimpleJob      ThunarSimpleJob;
 
 GType      thunar_simple_job_get_type           (void) G_GNUC_CONST;
 
-ThunarJob *thunar_simple_job_launch             (ThunarSimpleJobFunc func,
+ThunarJob *thunar_simple_job_new                (ThunarSimpleJobFunc func,
                                                  guint               n_param_values,
                                                  ...) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
 GArray    *thunar_simple_job_get_param_values   (ThunarSimpleJob    *job);
diff --git a/thunar/thunar-transfer-job.c b/thunar/thunar-transfer-job.c
index ff2a7933..cdb555b6 100644
--- a/thunar/thunar-transfer-job.c
+++ b/thunar/thunar-transfer-job.c
@@ -1168,30 +1168,6 @@ thunar_transfer_job_move_file (ExoJob                *job,
 }
 
 
-static GList *
-thunar_transfer_job_filter_running_jobs (GList     *jobs,
-                                         ThunarJob *own_job)
-{
-  ThunarJob *job;
-  GList     *run_jobs = NULL;
-
-  _thunar_return_val_if_fail (THUNAR_IS_TRANSFER_JOB (own_job), NULL);
-
-  for (GList *ljobs = jobs; ljobs != NULL; ljobs = ljobs->next)
-    {
-      job = ljobs->data;
-      if (job == own_job)
-        continue;
-      if (!exo_job_is_cancelled (EXO_JOB (job)) && !thunar_job_is_paused (job) && !thunar_job_is_frozen (job))
-        {
-          run_jobs = g_list_append (run_jobs, job);
-        }
-    }
-
-  return run_jobs;
-}
-
-
 
 static gboolean
 thunar_transfer_job_device_id_in_job_list (const char *device_fs_id,
@@ -1402,28 +1378,25 @@ thunar_transfer_job_determine_copy_behavior (ThunarTransferJob *transfer_job,
 
 
 /**
- * thunar_transfer_job_freeze_optional:
- * @job : a #ThunarTransferJob.
+ * thunar_transfer_job_can_start:
  *
- * Based on thunar setting, will block until all running jobs
- * doing IO on the source files or target files devices are completed.
- * The unblocking could be forced by the user in the UI.
  *
  **/
-static void
-thunar_transfer_job_freeze_optional (ThunarTransferJob *transfer_job)
+gboolean
+thunar_transfer_job_can_start (ThunarTransferJob *transfer_job,
+                               GList             *running_job_list)
 {
-  gboolean            freeze_if_src_busy;
-  gboolean            freeze_if_tgt_busy;
-  gboolean            always_parallel_copy;
-  gboolean            should_freeze_on_any_other_job;
-  gboolean            been_frozen;
+  gboolean freeze_if_src_busy;
+  gboolean freeze_if_tgt_busy;
+  gboolean always_parallel_copy;
+  gboolean should_freeze_on_any_other_job;
 
-  _thunar_return_if_fail (THUNAR_IS_TRANSFER_JOB (transfer_job));
+  _thunar_return_val_if_fail (THUNAR_IS_TRANSFER_JOB (transfer_job), FALSE);
+  _thunar_return_val_if_fail (!exo_job_is_cancelled (EXO_JOB (transfer_job)), TRUE);
 
   /* no source node list nor target file list */
   if (transfer_job->source_node_list == NULL || transfer_job->target_file_list == NULL)
-    return;
+    return TRUE;
   /* first source file */
   thunar_transfer_job_fill_source_device_info (transfer_job, ((ThunarTransferNode*) transfer_job->source_node_list->data)->source_file);
   /* first target file */
@@ -1433,46 +1406,15 @@ thunar_transfer_job_freeze_optional (ThunarTransferJob *transfer_job)
                                                &freeze_if_tgt_busy,
                                                &always_parallel_copy,
                                                &should_freeze_on_any_other_job);
-  if (always_parallel_copy)
-    return;
 
-  been_frozen = FALSE; /* this boolean can only take the TRUE value once. */
-  while (TRUE)
-    {
-      GList *jobs = thunar_job_ask_jobs (THUNAR_JOB (transfer_job));
-      GList *other_jobs = thunar_transfer_job_filter_running_jobs (jobs, THUNAR_JOB (transfer_job));
-      g_list_free (g_steal_pointer (&jobs));
-      if
-        (
-          /* should freeze because another job is running */
-          (should_freeze_on_any_other_job && other_jobs != NULL) ||
-          /* should freeze because source is busy and source device id appears in another job */
-          (freeze_if_src_busy && thunar_transfer_job_device_id_in_job_list (transfer_job->source_device_fs_id, other_jobs)) ||
-          /* should freeze because target is busy and target device id appears in another job */
-          (freeze_if_tgt_busy && thunar_transfer_job_device_id_in_job_list (transfer_job->target_device_fs_id, other_jobs))
-        )
-        g_list_free (g_steal_pointer (&other_jobs));
-      else
-        {
-          g_list_free (g_steal_pointer (&other_jobs));
-          break;
-        }
-      if (exo_job_is_cancelled (EXO_JOB (transfer_job)))
-        break;
-      if (!thunar_job_is_frozen (THUNAR_JOB (transfer_job)))
-        {
-          if (been_frozen)
-            break; /* cannot re-freeze. It means that the user force to unfreeze */
-          else
-            {
-              been_frozen = TRUE; /* first time here. The job needs to change to frozen state */
-              thunar_job_freeze (THUNAR_JOB (transfer_job));
-            }
-        }
-      g_usleep(500 * 1000); /* pause for 500ms */
-    }
-  if (thunar_job_is_frozen (THUNAR_JOB (transfer_job)))
-    thunar_job_unfreeze (THUNAR_JOB (transfer_job));
+  if (should_freeze_on_any_other_job && running_job_list != NULL)
+    return FALSE;
+  if (freeze_if_src_busy && thunar_transfer_job_device_id_in_job_list (transfer_job->source_device_fs_id, running_job_list))
+    return FALSE;
+  if (freeze_if_tgt_busy && thunar_transfer_job_device_id_in_job_list (transfer_job->target_device_fs_id, running_job_list))
+    return FALSE;
+
+  return TRUE;
 }
 
 
@@ -1576,8 +1518,6 @@ thunar_transfer_job_execute (ExoJob  *job,
             }
         }
 
-      thunar_transfer_job_freeze_optional (transfer_job);
-
       /* transfer starts now */
       transfer_job->start_time = g_get_real_time ();
 
diff --git a/thunar/thunar-transfer-job.h b/thunar/thunar-transfer-job.h
index d4eeaa59..afb28d7e 100644
--- a/thunar/thunar-transfer-job.h
+++ b/thunar/thunar-transfer-job.h
@@ -57,6 +57,9 @@ ThunarJob *thunar_transfer_job_new        (GList                *source_file_lis
 
 gchar     *thunar_transfer_job_get_status (ThunarTransferJob    *job);
 
+gboolean   thunar_transfer_job_can_start  (ThunarTransferJob *transfer_job,
+                                           GList             *running_job_list);
+
 G_END_DECLS
 
 #endif /* !__THUNAR_TRANSFER_JOB_H__ */
