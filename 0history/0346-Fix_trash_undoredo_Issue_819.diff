diff --git a/thunar/thunar-enum-types.c b/thunar/thunar-enum-types.c
index d7d07f4a..880d197e 100644
--- a/thunar/thunar-enum-types.c
+++ b/thunar/thunar-enum-types.c
@@ -680,9 +680,10 @@ thunar_operation_log_mode_get_type (void)
     {
       static const GEnumValue values[] =
       {
-        { THUNAR_OPERATION_LOG_OPERATIONS,    "THUNAR_OPERATION_LOG_OPERATIONS",    N_("Log operations") },
-        { THUNAR_OPERATION_LOG_NO_OPERATIONS, "THUNAR_OPERATION_LOG_NO_OPERATIONS", N_("Log no operations") },
-        { 0,                                  NULL,                                 NULL }
+        { THUNAR_OPERATION_LOG_OPERATIONS,      "THUNAR_OPERATION_LOG_OPERATIONS",      N_("Log operations") },
+        { THUNAR_OPERATION_LOG_NO_OPERATIONS,   "THUNAR_OPERATION_LOG_NO_OPERATIONS",   N_("Log no operations") },
+        { THUNAR_OPERATION_LOG_ONLY_TIMESTAMPS, "THUNAR_OPERATION_LOG_ONLY_TIMESTAMPS", N_("Log only timestamps") },
+        { 0,                                    NULL,                                   NULL }
       };
 
       type = g_enum_register_static ("ThunarOperationLogMode", values);
diff --git a/thunar/thunar-enum-types.h b/thunar/thunar-enum-types.h
index daf387b9..bbaca61d 100644
--- a/thunar/thunar-enum-types.h
+++ b/thunar/thunar-enum-types.h
@@ -457,6 +457,7 @@ typedef enum
 {
   THUNAR_OPERATION_LOG_NO_OPERATIONS,
   THUNAR_OPERATION_LOG_OPERATIONS,
+  THUNAR_OPERATION_LOG_ONLY_TIMESTAMPS,
 } ThunarOperationLogMode;
 
 GType thunar_operation_log_mode_get_type (void) G_GNUC_CONST;
diff --git a/thunar/thunar-io-jobs.c b/thunar/thunar-io-jobs.c
index 51cf8b1d..e15fe9fa 100644
--- a/thunar/thunar-io-jobs.c
+++ b/thunar/thunar-io-jobs.c
@@ -902,7 +902,7 @@ _thunar_io_jobs_trash (ThunarJob  *job,
 
   log_mode = thunar_job_get_log_mode (job);
 
-  if (log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
+  if (log_mode != THUNAR_OPERATION_LOG_NO_OPERATIONS)
     operation = thunar_job_operation_new (THUNAR_JOB_OPERATION_KIND_TRASH);
 
   for (lp = file_list; err == NULL && lp != NULL; lp = lp->next)
@@ -925,7 +925,7 @@ _thunar_io_jobs_trash (ThunarJob  *job,
             _tij_delete_file (lp->data, exo_job_get_cancellable (EXO_JOB (job)), &err);
         }
 
-      if (err == NULL && log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
+      if (err == NULL && log_mode != THUNAR_OPERATION_LOG_NO_OPERATIONS)
           thunar_job_operation_add (operation, lp->data, NULL);
 
       /* update the thumbnail cache */
@@ -936,10 +936,16 @@ _thunar_io_jobs_trash (ThunarJob  *job,
   g_object_unref (thumbnail_cache);
 
   if (log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
-  {
-    thunar_job_operation_commit (operation);
-    g_object_unref (operation);
-  }
+    {
+      thunar_job_operation_commit (operation);
+      g_object_unref (operation);
+    }
+  else if (log_mode == THUNAR_OPERATION_LOG_ONLY_TIMESTAMPS)
+    {
+      /* only required for 'redo' operation, in order to update the timestamps of the original trash operation */
+      thunar_job_operation_update_trash_timestamps (operation);
+      g_object_unref (operation);
+    }
 
   if (err != NULL)
     {
diff --git a/thunar/thunar-job-operation.c b/thunar/thunar-job-operation.c
index b994379b..aaab0c5a 100644
--- a/thunar/thunar-job-operation.c
+++ b/thunar/thunar-job-operation.c
@@ -221,20 +221,6 @@ thunar_job_operation_commit (ThunarJobOperation *job_operation)
       /* set the timestamp for the operation, in seconds. g_get_real_time gives
        * us the time in microseconds, so we need to divide by 1e6. */
       job_operation->end_timestamp = g_get_real_time () / (gint64) 1e6;
-
-      /* hack for 'redo' of 'trash' operations, which requires 'THUNAR_OPERATION_LOG_OPERATIONS' to get the new timestamps */
-      /* If we have an identical operation already in the list, we assume that it was a 'redo'.*
-      /* In that case we just update the timestamps of the old operation instead of adding the new operation */
-      for (GList* lp = job_operation_list; lp != NULL; lp = lp->next)
-        {
-          ThunarJobOperation *old_operation = lp->data;
-          if (thunar_job_operation_compare (old_operation, job_operation) == 0)
-            {
-              old_operation->start_timestamp = job_operation->start_timestamp;
-              old_operation->end_timestamp = job_operation->end_timestamp;
-              return;
-            }
-        }
     }
 
   /* When a new operation is added, drop all previous operations which where undone from the list */
@@ -257,6 +243,37 @@ thunar_job_operation_commit (ThunarJobOperation *job_operation)
 
 
 
+/**
+ * thunar_job_operation_update_trash_timestamps:
+ * @job_operation: a #ThunarJobOperation
+ *
+ * Only updates the timestamps of the latest trash operation
+ * That is needed after 'redo' of a 'trash' operation,
+ * since it requires to set new timestamps (otherwise 'undo' of that operation wont work afterwards)
+ **/
+void
+thunar_job_operation_update_trash_timestamps (ThunarJobOperation *job_operation)
+{
+  _thunar_return_if_fail (THUNAR_IS_JOB_OPERATION (job_operation));
+
+  if (job_operation->operation_kind != THUNAR_JOB_OPERATION_KIND_TRASH)
+    return;
+
+  if (lp_undo_job_operation == NULL)
+    return;
+
+  if (thunar_job_operation_compare ( THUNAR_JOB_OPERATION (lp_undo_job_operation->data), job_operation) == 0)
+    {
+      THUNAR_JOB_OPERATION (lp_undo_job_operation->data)->start_timestamp = job_operation->start_timestamp;
+
+      /* set the timestamp for the operation, in seconds. g_get_real_time gives
+       * us the time in microseconds, so we need to divide by 1e6. */
+      THUNAR_JOB_OPERATION (lp_undo_job_operation->data)->end_timestamp = g_get_real_time () / (gint64) 1e6;
+    }
+}
+
+
+
 /**
  * thunar_job_operation_undo:
  *
@@ -673,11 +690,11 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
 
       case THUNAR_JOB_OPERATION_KIND_TRASH:
         /* Special case: 'THUNAR_JOB_OPERATION_KIND_TRASH' only can be triggered by redo */
-        /* Since we as well need to update the timestamps, we have to use THUNAR_OPERATION_LOG_OPERATIONS */
-        /* 'thunar_job_operation_commit' will take care on update the existing job operation instead of adding a new one */
+        /* Since we as well need to update the timestamps, we have to use THUNAR_OPERATION_LOG_ONLY_TIMESTAMPS */
+        /* 'thunar_job_operation_update_trash_timestamps' will then take care on update the existing job operation instead of adding a new one */
         thunar_application_trash (application, NULL,
                                   job_operation->source_file_list,
-                                  THUNAR_OPERATION_LOG_OPERATIONS);
+                                  THUNAR_OPERATION_LOG_ONLY_TIMESTAMPS);
         break;
 
       case THUNAR_JOB_OPERATION_KIND_LINK:
diff --git a/thunar/thunar-job-operation.h b/thunar/thunar-job-operation.h
index b8431455..e39cc813 100644
--- a/thunar/thunar-job-operation.h
+++ b/thunar/thunar-job-operation.h
@@ -27,17 +27,18 @@ G_BEGIN_DECLS
 #define THUNAR_TYPE_JOB_OPERATION (thunar_job_operation_get_type ())
 G_DECLARE_FINAL_TYPE (ThunarJobOperation, thunar_job_operation, THUNAR, JOB_OPERATION, GObject)
 
-ThunarJobOperation    *thunar_job_operation_new          (ThunarJobOperationKind kind);
-void                   thunar_job_operation_add          (ThunarJobOperation    *job_operation,
-                                                          GFile                 *source_file,
-                                                          GFile                 *target_file);
-void                   thunar_job_operation_overwrite    (ThunarJobOperation    *job_operation,
-                                                          GFile                 *overwritten_file);
-void                   thunar_job_operation_commit       (ThunarJobOperation    *job_operation);
-void                   thunar_job_operation_undo         (void);
-void                   thunar_job_operation_redo         (void);
-gboolean               thunar_job_operation_can_undo     (void);
-gboolean               thunar_job_operation_can_redo     (void);
+ThunarJobOperation    *thunar_job_operation_new                     (ThunarJobOperationKind kind);
+void                   thunar_job_operation_add                     (ThunarJobOperation    *job_operation,
+                                                                     GFile                 *source_file,
+                                                                     GFile                 *target_file);
+void                   thunar_job_operation_overwrite               (ThunarJobOperation    *job_operation,
+                                                                     GFile                 *overwritten_file);
+void                   thunar_job_operation_commit                  (ThunarJobOperation    *job_operation);
+void                   thunar_job_operation_update_trash_timestamps (ThunarJobOperation *job_operation);
+void                   thunar_job_operation_undo                    (void);
+void                   thunar_job_operation_redo                    (void);
+gboolean               thunar_job_operation_can_undo                (void);
+gboolean               thunar_job_operation_can_redo                (void);
 
 G_END_DECLS
 
