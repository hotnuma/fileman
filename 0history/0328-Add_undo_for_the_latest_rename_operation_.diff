diff --git a/thunar/thunar-action-manager.c b/thunar/thunar-action-manager.c
index 872bff71..ffcaa0fe 100644
--- a/thunar/thunar-action-manager.c
+++ b/thunar/thunar-action-manager.c
@@ -1852,6 +1852,11 @@ thunar_action_manager_append_menu_item (ThunarActionManager       *action_mgr,
         gtk_menu_item_set_label (GTK_MENU_ITEM (item), eject_label);
         return item;
 
+      case THUNAR_ACTION_MANAGER_ACTION_UNDO:
+        item = xfce_gtk_menu_item_new_from_action_entry (action_entry, G_OBJECT (action_mgr), GTK_MENU_SHELL (menu));
+        gtk_widget_set_sensitive (item, thunar_job_operation_can_undo ());
+        return item;
+
       default:
         return xfce_gtk_menu_item_new_from_action_entry (action_entry, G_OBJECT (action_mgr), GTK_MENU_SHELL (menu));
     }
@@ -2443,7 +2448,7 @@ thunar_action_manager_action_rename (ThunarActionManager *action_mgr)
   if (g_list_length (action_mgr->files_to_process) == 1)
     {
       /* run the rename dialog */
-      job = thunar_dialogs_show_rename_file (GTK_WINDOW (window), THUNAR_FILE (action_mgr->files_to_process->data));
+      job = thunar_dialogs_show_rename_file (GTK_WINDOW (window), THUNAR_FILE (action_mgr->files_to_process->data), THUNAR_OPERATION_LOG_OPERATIONS);
       if (G_LIKELY (job != NULL))
         {
           g_signal_connect (job, "error", G_CALLBACK (thunar_action_manager_rename_error), action_mgr->widget);
diff --git a/thunar/thunar-application.c b/thunar/thunar-application.c
index 0135a127..99f394d5 100644
--- a/thunar/thunar-application.c
+++ b/thunar/thunar-application.c
@@ -1869,14 +1869,16 @@ thunar_application_rename_file_finished (ExoJob  *job,
  *                to open on the default screen.
  * @startup_id  : startup id from startup notification passed along
  *                with dbus to make focus stealing work properly.
+ * @log_mode    : a #ThunarOperationLogMode to control logging of the operation
  *
  * Prompts the user to rename the @file.
  **/
 void
-thunar_application_rename_file (ThunarApplication *application,
-                                ThunarFile        *file,
-                                GdkScreen         *screen,
-                                const gchar       *startup_id)
+thunar_application_rename_file (ThunarApplication      *application,
+                                ThunarFile             *file,
+                                GdkScreen              *screen,
+                                const gchar            *startup_id,
+                                ThunarOperationLogMode  log_mode)
 {
   ThunarJob *job;
 
@@ -1888,7 +1890,7 @@ thunar_application_rename_file (ThunarApplication *application,
   /* TODO pass the startup ID to the rename dialog */
 
   /* run the rename dialog */
-  job = thunar_dialogs_show_rename_file (screen, file);
+  job = thunar_dialogs_show_rename_file (screen, file, log_mode);
   if (G_LIKELY (job != NULL))
     {
       /* remember the screen and file */
diff --git a/thunar/thunar-application.h b/thunar/thunar-application.h
index 6bd4df6c..ac9e3c71 100644
--- a/thunar/thunar-application.h
+++ b/thunar/thunar-application.h
@@ -84,10 +84,11 @@ gboolean              thunar_application_process_filenames          (ThunarAppli
                                                                      GError           **error,
                                                                      ThunarApplicationProcessAction action);
 
-void                  thunar_application_rename_file                (ThunarApplication *application,
-                                                                     ThunarFile        *file,
-                                                                     GdkScreen         *screen,
-                                                                     const gchar       *startup_id);
+void                  thunar_application_rename_file                (ThunarApplication      *application,
+                                                                     ThunarFile             *file,
+                                                                     GdkScreen              *screen,
+                                                                     const gchar            *startup_id,
+                                                                     ThunarOperationLogMode  log_mode);
 void                  thunar_application_create_file                (ThunarApplication *application,
                                                                      ThunarFile        *parent_directory,
                                                                      const gchar       *content_type,
diff --git a/thunar/thunar-dbus-service.c b/thunar/thunar-dbus-service.c
index 11587422..c26f0f81 100644
--- a/thunar/thunar-dbus-service.c
+++ b/thunar/thunar-dbus-service.c
@@ -1028,7 +1028,7 @@ thunar_dbus_service_rename_file (ThunarDBusFileManager  *object,
 
   /* popup a new window for the folder */
   application = thunar_application_get ();
-  thunar_application_rename_file (application, file, screen, startup_id);
+  thunar_application_rename_file (application, file, screen, startup_id, THUNAR_OPERATION_LOG_OPERATIONS);
   g_object_unref (G_OBJECT (application));
 
   /* cleanup */
diff --git a/thunar/thunar-dialogs.c b/thunar/thunar-dialogs.c
index 88fece86..ff0c6599 100644
--- a/thunar/thunar-dialogs.c
+++ b/thunar/thunar-dialogs.c
@@ -198,8 +198,9 @@ thunar_dialogs_show_create (gpointer     parent,
  *               %NULL if there was no renaming required.
  **/
 ThunarJob *
-thunar_dialogs_show_rename_file (gpointer    parent,
-                                 ThunarFile *file)
+thunar_dialogs_show_rename_file (gpointer               parent,
+                                 ThunarFile            *file,
+                                 ThunarOperationLogMode log_mode)
 {
   ThunarIconFactory *icon_factory;
   GtkIconTheme      *icon_theme;
@@ -338,7 +339,7 @@ thunar_dialogs_show_rename_file (gpointer    parent,
       if (G_LIKELY (g_strcmp0 (filename, text)) != 0)
         {
           /* try to rename the file */
-          job = thunar_io_jobs_rename_file (file, text);
+          job = thunar_io_jobs_rename_file (file, text, log_mode);
           exo_job_launch (EXO_JOB (job));
         }
     }
diff --git a/thunar/thunar-dialogs.h b/thunar/thunar-dialogs.h
index 27dd73ec..cf0f6c62 100644
--- a/thunar/thunar-dialogs.h
+++ b/thunar/thunar-dialogs.h
@@ -30,8 +30,9 @@ gchar             *thunar_dialogs_show_create           (gpointer              p
                                                          const gchar          *content_type,
                                                          const gchar          *filename,
                                                          const gchar          *title);
-ThunarJob         *thunar_dialogs_show_rename_file      (gpointer              parent,
-                                                         ThunarFile           *file);
+ThunarJob         *thunar_dialogs_show_rename_file      (gpointer               parent,
+                                                         ThunarFile            *file,
+                                                         ThunarOperationLogMode log_mode);
 void               thunar_dialogs_show_about            (GtkWindow            *parent,
                                                          const gchar          *title,
                                                          const gchar          *format,
diff --git a/thunar/thunar-enum-types.c b/thunar/thunar-enum-types.c
index 7f29ee36..4909990a 100644
--- a/thunar/thunar-enum-types.c
+++ b/thunar/thunar-enum-types.c
@@ -669,3 +669,23 @@ thunar_job_operation_kind_get_type (void)
 
   return type;
 }
+
+GType
+thunar_operation_log_mode_get_type (void)
+{
+  static GType type = G_TYPE_INVALID;
+
+  if (G_UNLIKELY (type == G_TYPE_INVALID))
+    {
+      static const GEnumValue values[] =
+      {
+        { THUNAR_OPERATION_LOG_OPERATIONS,    "THUNAR_OPERATION_LOG_OPERATIONS",    N_("Log operations") },
+        { THUNAR_OPERATION_LOG_NO_OPERATIONS, "THUNAR_OPERATION_LOG_NO_OPERATIONS", N_("Log no operations") },
+        { 0,                                  NULL,                                 NULL }
+      };
+
+      type = g_enum_register_static ("ThunarOperationLogMode", values);
+    }
+
+  return type;
+}
diff --git a/thunar/thunar-enum-types.h b/thunar/thunar-enum-types.h
index d2a2095a..c1eda613 100644
--- a/thunar/thunar-enum-types.h
+++ b/thunar/thunar-enum-types.h
@@ -444,6 +444,22 @@ typedef enum
 
 GType thunar_job_operation_kind_get_type (void) G_GNUC_CONST;
 
+/**
+ * ThunarOperationLogMode:
+ *
+ * Specify control logging for operations.
+ **/
+
+#define THUNAR_TYPE_OPERATION_LOG_MODE (thunar_operation_log_mode_get_type ())
+
+typedef enum
+{
+  THUNAR_OPERATION_LOG_NO_OPERATIONS,
+  THUNAR_OPERATION_LOG_OPERATIONS,
+} ThunarOperationLogMode;
+
+GType thunar_operation_log_mode_get_type (void) G_GNUC_CONST;
+
 G_END_DECLS;
 
 #endif /* !__THUNAR_ENUM_TYPES_H__ */
diff --git a/thunar/thunar-io-jobs.c b/thunar/thunar-io-jobs.c
index 1a09df77..9ade267e 100644
--- a/thunar/thunar-io-jobs.c
+++ b/thunar/thunar-io-jobs.c
@@ -1297,23 +1297,30 @@ _thunar_io_jobs_rename (ThunarJob  *job,
                         GArray     *param_values,
                         GError    **error)
 {
-  const gchar *display_name;
-  ThunarFile  *file;
-  GError      *err = NULL;
+  const gchar           *display_name;
+  ThunarFile            *file;
+  GError                *err = NULL;
+  gchar                 *old_file_uri;
+  ThunarOperationLogMode log_mode;
+  ThunarJobOperation     *operation;
 
   _thunar_return_val_if_fail (THUNAR_IS_JOB (job), FALSE);
   _thunar_return_val_if_fail (param_values != NULL, FALSE);
-  _thunar_return_val_if_fail (param_values->len == 2, FALSE);
+  _thunar_return_val_if_fail (param_values->len == 3, FALSE);
   _thunar_return_val_if_fail (G_VALUE_HOLDS (&g_array_index (param_values, GValue, 0), THUNAR_TYPE_FILE), FALSE);
   _thunar_return_val_if_fail (G_VALUE_HOLDS_STRING (&g_array_index (param_values, GValue, 1)), FALSE);
+  _thunar_return_val_if_fail (G_VALUE_HOLDS_ENUM (&g_array_index (param_values, GValue, 2)), FALSE);
   _thunar_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
   if (exo_job_set_error_if_cancelled (EXO_JOB (job), error))
     return FALSE;
 
-  /* determine the file and display name */
+  /* determine the file, display name and log mode */
   file = g_value_get_object (&g_array_index (param_values, GValue, 0));
   display_name = g_value_get_string (&g_array_index (param_values, GValue, 1));
+  log_mode = g_value_get_enum (&g_array_index (param_values, GValue, 2));
+
+  old_file_uri = g_file_get_uri (thunar_file_get_file (file));
 
   /* try to rename the file */
   if (thunar_file_rename (file, display_name, exo_job_get_cancellable (EXO_JOB (job)), TRUE, &err))
@@ -1321,8 +1328,17 @@ _thunar_io_jobs_rename (ThunarJob  *job,
       exo_job_send_to_mainloop (EXO_JOB (job),
                                 _thunar_io_jobs_rename_notify,
                                 g_object_ref (file), g_object_unref);
+
+      if (log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
+        {
+          operation = thunar_job_operation_new (THUNAR_JOB_OPERATION_KIND_RENAME);
+          thunar_job_operation_add (operation, g_file_new_for_uri (old_file_uri), thunar_file_get_file (file));
+          thunar_job_operation_commit (operation);
+        }
     }
 
+  g_free (old_file_uri);
+
   /* abort on errors or cancellation */
   if (err != NULL)
     {
@@ -1336,13 +1352,15 @@ _thunar_io_jobs_rename (ThunarJob  *job,
 
 
 ThunarJob *
-thunar_io_jobs_rename_file (ThunarFile  *file,
-                            const gchar *display_name)
+thunar_io_jobs_rename_file (ThunarFile            *file,
+                            const gchar           *display_name,
+                            ThunarOperationLogMode log_mode)
 {
   _thunar_return_val_if_fail (THUNAR_IS_FILE (file), NULL);
   _thunar_return_val_if_fail (g_utf8_validate (display_name, -1, NULL), NULL);
 
-  return thunar_simple_job_new (_thunar_io_jobs_rename, 2,
+  return thunar_simple_job_new (_thunar_io_jobs_rename, 3,
                                 THUNAR_TYPE_FILE, file,
-                                G_TYPE_STRING, display_name);
+                                G_TYPE_STRING, display_name,
+                                THUNAR_TYPE_OPERATION_LOG_MODE, log_mode);
 }
diff --git a/thunar/thunar-io-jobs.h b/thunar/thunar-io-jobs.h
index 51dc6828..da7955d8 100644
--- a/thunar/thunar-io-jobs.h
+++ b/thunar/thunar-io-jobs.h
@@ -49,8 +49,9 @@ ThunarJob *thunar_io_jobs_change_mode      (GList         *files,
                                             ThunarFileMode file_mode,
                                             gboolean       recursive) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
 ThunarJob *thunar_io_jobs_list_directory   (GFile         *directory) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
-ThunarJob *thunar_io_jobs_rename_file      (ThunarFile    *file,
-                                            const gchar   *display_name) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
+ThunarJob *thunar_io_jobs_rename_file      (ThunarFile            *file,
+                                            const gchar           *display_name,
+                                            ThunarOperationLogMode log_mode) G_GNUC_MALLOC G_GNUC_WARN_UNUSED_RESULT;
 
 G_END_DECLS
 
diff --git a/thunar/thunar-job-operation.c b/thunar/thunar-job-operation.c
index 25a51120..53dc6bfc 100644
--- a/thunar/thunar-job-operation.c
+++ b/thunar/thunar-job-operation.c
@@ -19,6 +19,7 @@
 #include <thunar/thunar-application.h>
 #include <thunar/thunar-dialogs.h>
 #include <thunar/thunar-enum-types.h>
+#include <thunar/thunar-io-jobs.h>
 #include <thunar/thunar-job-operation.h>
 #include <thunar/thunar-private.h>
 
@@ -218,9 +219,15 @@ thunar_job_operation_undo (void)
   GString            *warning_body;
   gchar              *file_uri;
 
-  /* do nothing in case there is no job operation to undo */
+  /* Show a warning in case there is no operation to undo */
   if (job_operation_list == NULL)
-    return;
+    {
+      xfce_dialog_show_warning (NULL,
+                                _("No operation which can be undone has been performed yet.\n"
+                                  "(For some operations undo is not supported)"),
+                                _("There is no operation to undo"));
+      return;
+    }
 
   /* the 'marked' operation */
   operation_marker = job_operation_list->data;
@@ -277,6 +284,28 @@ thunar_job_operation_undo (void)
 
 
 
+/* thunar_job_operation_can_undo:
+ *
+ * Returns whether or not there is an operation on the job operation list that can be undone.
+ **/
+gboolean
+thunar_job_operation_can_undo (void)
+{
+  ThunarJobOperation *operation_marker;
+
+  if (job_operation_list == NULL)
+    return FALSE;
+ 
+  operation_marker = job_operation_list->data;
+
+  if (operation_marker->source_file_list == NULL && operation_marker->target_file_list == NULL)
+    return FALSE;
+
+  return TRUE;
+}
+
+
+
 /* thunar_job_operation_new_invert:
  * @job_operation: a #ThunarJobOperation
  *
@@ -307,6 +336,13 @@ thunar_job_operation_new_invert (ThunarJobOperation *job_operation)
         inverted_operation->target_file_list = thunar_g_list_copy_deep (job_operation->source_file_list);
         break;
 
+      case THUNAR_JOB_OPERATION_KIND_RENAME:
+        inverted_operation = g_object_new (THUNAR_TYPE_JOB_OPERATION, NULL);
+        inverted_operation->operation_kind = THUNAR_JOB_OPERATION_KIND_RENAME;
+        inverted_operation->source_file_list = thunar_g_list_copy_deep (job_operation->target_file_list);
+        inverted_operation->target_file_list = thunar_g_list_copy_deep (job_operation->source_file_list);
+        break;
+
       default:
         g_assert_not_reached ();
         break;
@@ -328,8 +364,10 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
   ThunarApplication *application;
   GList             *thunar_file_list = NULL;
   GError            *error            = NULL;
+  ThunarJob         *job              = NULL;
   ThunarFile        *thunar_file;
   GFile             *parent_dir;
+  gchar             *display_name;
 
   _thunar_return_if_fail (THUNAR_IS_JOB_OPERATION (job_operation));
 
@@ -369,7 +407,6 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
         break;
 
       case THUNAR_JOB_OPERATION_KIND_MOVE:
-
         /* ensure that all the targets have parent directories which exist */
         for (GList *lp = job_operation->target_file_list; lp != NULL; lp = lp->next)
           {
@@ -388,7 +425,7 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
 
               /* output the error message to console otherwise and abort */
               g_warning ("Error while moving files: %s\n"
-                           "Aborting operation\n",
+                         "Aborting operation\n",
                          error->message);
               g_clear_error (&error);
               g_object_unref (application);
@@ -401,6 +438,33 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
                                        THUNAR_OPERATION_LOG_NO_OPERATIONS, NULL);
         break;
 
+      case THUNAR_JOB_OPERATION_KIND_RENAME:
+        for (GList *slp = job_operation->source_file_list, *tlp = job_operation->target_file_list;
+             slp != NULL && tlp != NULL;
+             slp = slp->next, tlp = tlp->next)
+          {
+            display_name = thunar_g_file_get_display_name (tlp->data);
+            thunar_file = thunar_file_get (slp->data, &error);
+
+            if (error != NULL)
+              {
+                g_warning ("Error while renaming files: %s\n", error->message);
+                g_clear_error (&error);
+
+                g_free (display_name);
+                g_object_unref (thunar_file);
+
+                continue;
+              }
+
+            job = thunar_io_jobs_rename_file (thunar_file, display_name, THUNAR_OPERATION_LOG_NO_OPERATIONS);
+            exo_job_launch (EXO_JOB (job));
+
+            g_free (display_name);
+            g_object_unref (thunar_file);
+          }
+        break;
+
       default:
         _thunar_assert_not_reached ();
         break;
diff --git a/thunar/thunar-job-operation.h b/thunar/thunar-job-operation.h
index e04664c1..52e850c3 100644
--- a/thunar/thunar-job-operation.h
+++ b/thunar/thunar-job-operation.h
@@ -27,17 +27,6 @@ G_BEGIN_DECLS
 #define THUNAR_TYPE_JOB_OPERATION (thunar_job_operation_get_type ())
 G_DECLARE_FINAL_TYPE (ThunarJobOperation, thunar_job_operation, THUNAR, JOB_OPERATION, GObject)
 
-/**
- * ThunarOperationLogMode:
- *
- * Specify control logging for operations.
- **/
-typedef enum
-{
-  THUNAR_OPERATION_LOG_NO_OPERATIONS,
-  THUNAR_OPERATION_LOG_OPERATIONS,
-} ThunarOperationLogMode;
-
 ThunarJobOperation    *thunar_job_operation_new          (ThunarJobOperationKind kind);
 void                   thunar_job_operation_add          (ThunarJobOperation    *job_operation,
                                                           GFile                 *source_file,
@@ -46,6 +35,7 @@ void                   thunar_job_operation_overwrite    (ThunarJobOperation
                                                           GFile                 *overwritten_file);
 void                   thunar_job_operation_commit       (ThunarJobOperation    *job_operation);
 void                   thunar_job_operation_undo         (void);
+gboolean               thunar_job_operation_can_undo     (void);
 
 G_END_DECLS
 
diff --git a/thunar/thunar-properties-dialog.c b/thunar/thunar-properties-dialog.c
index 38bc5577..354adab6 100644
--- a/thunar/thunar-properties-dialog.c
+++ b/thunar/thunar-properties-dialog.c
@@ -1028,7 +1028,7 @@ thunar_properties_dialog_name_activate (GtkWidget              *entry,
   old_name = thunar_file_get_display_name (file);
   if (g_utf8_collate (new_name, old_name) != 0)
     {
-      job = thunar_io_jobs_rename_file (file, new_name);
+      job = thunar_io_jobs_rename_file (file, new_name, THUNAR_OPERATION_LOG_OPERATIONS);
       exo_job_launch (EXO_JOB (job));
       if (job != NULL)
         {
