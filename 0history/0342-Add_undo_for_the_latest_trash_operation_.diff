diff --git a/thunar/thunar-application.c b/thunar/thunar-application.c
index a972e8e4..a78c6a36 100644
--- a/thunar/thunar-application.c
+++ b/thunar/thunar-application.c
@@ -2258,7 +2258,7 @@ thunar_application_move_into (ThunarApplication      *application,
   /* launch the appropriate operation depending on the target file */
   if (thunar_g_file_is_trash (target_file))
     {
-      thunar_application_trash (application, parent, source_file_list);
+      thunar_application_trash (application, parent, source_file_list, THUNAR_OPERATION_LOG_OPERATIONS);
     }
   else
     {
@@ -2427,7 +2427,7 @@ thunar_application_unlink_files (ThunarApplication *application,
   else
     {
       /* launch the "Move to Trash" operation */
-      thunar_application_trash (application, parent, path_list);
+      thunar_application_trash (application, parent, path_list, THUNAR_OPERATION_LOG_OPERATIONS);
     }
 
   /* release the path list */
@@ -2445,10 +2445,19 @@ trash_stub (GList *source_file_list,
 
 
 
+/* thunar_application_trash:
+ * @application       : a #ThunarApplication.
+ * @parent            : a #GdkScreen, a #GtkWidget or %NULL.
+ * @file_list         : the list of #GFile<!---->s to trash.
+ * @log_mode          : a #ThunarOperationLogMode to control logging
+ *
+ * Trashes the files specified by @file_list
+ **/
 void
-thunar_application_trash (ThunarApplication *application,
-                          gpointer           parent,
-                          GList             *file_list)
+thunar_application_trash (ThunarApplication     *application,
+                          gpointer               parent,
+                          GList                 *file_list,
+                          ThunarOperationLogMode log_mode)
 {
   _thunar_return_if_fail (parent == NULL || GDK_IS_SCREEN (parent) || GTK_IS_WIDGET (parent));
   _thunar_return_if_fail (THUNAR_IS_APPLICATION (application));
@@ -2456,7 +2465,7 @@ thunar_application_trash (ThunarApplication *application,
 
   thunar_application_launch (application, parent, "user-trash-full",
                              _("Moving files into the trash..."), trash_stub,
-                             file_list, NULL, TRUE, FALSE, THUNAR_OPERATION_LOG_OPERATIONS, NULL);
+                             file_list, NULL, TRUE, FALSE, log_mode, NULL);
 }
 
 
diff --git a/thunar/thunar-application.h b/thunar/thunar-application.h
index ac9e3c71..c89ae5c7 100644
--- a/thunar/thunar-application.h
+++ b/thunar/thunar-application.h
@@ -136,9 +136,10 @@ void                  thunar_application_unlink_files              (ThunarApplic
                                                                     GList             *file_list,
                                                                     gboolean           permanently);
 
-void                  thunar_application_trash                     (ThunarApplication *application,
-                                                                    gpointer           parent,
-                                                                    GList             *file_list);
+void                  thunar_application_trash                     (ThunarApplication     *application,
+                                                                    gpointer               parent,
+                                                                    GList                 *file_list,
+                                                                    ThunarOperationLogMode log_mode);
 
 void                  thunar_application_creat                     (ThunarApplication *application,
                                                                     gpointer           parent,
diff --git a/thunar/thunar-dbus-service.c b/thunar/thunar-dbus-service.c
index 73462f90..530cf383 100644
--- a/thunar/thunar-dbus-service.c
+++ b/thunar/thunar-dbus-service.c
@@ -914,7 +914,7 @@ thunar_dbus_service_move_to_trash (ThunarDBusTrash        *object,
         {
           /* tell the application to move the specified files to the trash */
           application = thunar_application_get ();
-          thunar_application_trash (application, screen, file_list);
+          thunar_application_trash (application, screen, file_list, THUNAR_OPERATION_LOG_NO_OPERATIONS);
           g_object_unref (application);
         }
 
@@ -1077,7 +1077,7 @@ thunar_dbus_service_rename_file (ThunarDBusFileManager  *object,
 
   /* popup a new window for the folder */
   application = thunar_application_get ();
-  thunar_application_rename_file (application, file, screen, startup_id, THUNAR_OPERATION_LOG_OPERATIONS);
+  thunar_application_rename_file (application, file, screen, startup_id, THUNAR_OPERATION_LOG_NO_OPERATIONS);
   g_object_unref (G_OBJECT (application));
 
   /* cleanup */
@@ -1290,7 +1290,7 @@ thunar_dbus_service_transfer_files (ThunarDBusTransferMode transfer_mode,
             case THUNAR_DBUS_TRANSFER_MODE_MOVE_INTO:
               thunar_application_move_into (application, screen,
                                             source_file_list, target_file_list->data,
-                                            THUNAR_OPERATION_LOG_OPERATIONS,
+                                            THUNAR_OPERATION_LOG_NO_OPERATIONS,
                                             NULL);
               break;
             case THUNAR_DBUS_TRANSFER_MODE_LINK_INTO:
diff --git a/thunar/thunar-io-jobs.c b/thunar/thunar-io-jobs.c
index 9ade267e..b66658cf 100644
--- a/thunar/thunar-io-jobs.c
+++ b/thunar/thunar-io-jobs.c
@@ -812,12 +812,14 @@ _thunar_io_jobs_trash (ThunarJob  *job,
                        GArray     *param_values,
                        GError    **error)
 {
-  ThunarThumbnailCache *thumbnail_cache;
-  ThunarApplication    *application;
-  ThunarJobResponse     response;
-  GError               *err = NULL;
-  GList                *file_list;
-  GList                *lp;
+  ThunarThumbnailCache   *thumbnail_cache;
+  ThunarApplication      *application;
+  ThunarJobOperation     *operation = NULL;
+  ThunarJobResponse       response;
+  ThunarOperationLogMode  log_mode;
+  GError                 *err = NULL;
+  GList                  *file_list;
+  GList                  *lp;
 
   _thunar_return_val_if_fail (THUNAR_IS_JOB (job), FALSE);
   _thunar_return_val_if_fail (param_values != NULL, FALSE);
@@ -834,6 +836,11 @@ _thunar_io_jobs_trash (ThunarJob  *job,
   thumbnail_cache = thunar_application_get_thumbnail_cache (application);
   g_object_unref (application);
 
+  log_mode = thunar_job_get_log_mode (job);
+
+  if (log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
+    operation = thunar_job_operation_new (THUNAR_JOB_OPERATION_KIND_TRASH);
+
   for (lp = file_list; err == NULL && lp != NULL; lp = lp->next)
     {
       _thunar_assert (G_IS_FILE (lp->data));
@@ -854,6 +861,9 @@ _thunar_io_jobs_trash (ThunarJob  *job,
             _tij_delete_file (lp->data, exo_job_get_cancellable (EXO_JOB (job)), &err);
         }
 
+      if (err == NULL && log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
+          thunar_job_operation_add (operation, lp->data, NULL);
+
       /* update the thumbnail cache */
       thunar_thumbnail_cache_cleanup_file (thumbnail_cache, lp->data);
     }
@@ -861,6 +871,12 @@ _thunar_io_jobs_trash (ThunarJob  *job,
   /* release the thumbnail cache */
   g_object_unref (thumbnail_cache);
 
+  if (log_mode == THUNAR_OPERATION_LOG_OPERATIONS)
+  {
+    thunar_job_operation_commit (operation);
+    g_object_unref (operation);
+  }
+
   if (err != NULL)
     {
       g_propagate_error (error, err);
@@ -1334,6 +1350,7 @@ _thunar_io_jobs_rename (ThunarJob  *job,
           operation = thunar_job_operation_new (THUNAR_JOB_OPERATION_KIND_RENAME);
           thunar_job_operation_add (operation, g_file_new_for_uri (old_file_uri), thunar_file_get_file (file));
           thunar_job_operation_commit (operation);
+          g_object_unref (operation);
         }
     }
 
diff --git a/thunar/thunar-job-operation.c b/thunar/thunar-job-operation.c
index 53dc6bfc..fcfbe059 100644
--- a/thunar/thunar-job-operation.c
+++ b/thunar/thunar-job-operation.c
@@ -41,8 +41,10 @@ static void                   thunar_job_operation_dispose            (GObject
 static void                   thunar_job_operation_finalize           (GObject            *object);
 static ThunarJobOperation    *thunar_job_operation_new_invert         (ThunarJobOperation *job_operation);
 static void                   thunar_job_operation_execute            (ThunarJobOperation *job_operation);
-static gint                   is_ancestor                             (gconstpointer       descendant,
+static gint                   thunar_job_operation_is_ancestor        (gconstpointer       descendant,
                                                                        gconstpointer       ancestor);
+static void                   thunar_job_operation_restore_from_trash (ThunarJobOperation *operation,
+                                                                       GError            **error);
 
 
 
@@ -54,6 +56,13 @@ struct _ThunarJobOperation
   GList                  *source_file_list;
   GList                  *target_file_list;
   GList                  *overwritten_file_list;
+
+  /**
+   * Optional timestampes (in seconds) which tell when the operation was started and ended.
+   * Only used for trash/restore operations.
+   **/
+  gint64                  start_timestamp;
+  gint64                  end_timestamp;
 };
 
 G_DEFINE_TYPE (ThunarJobOperation, thunar_job_operation, G_TYPE_OBJECT)
@@ -125,6 +134,9 @@ thunar_job_operation_new (ThunarJobOperationKind kind)
   operation = g_object_new (THUNAR_TYPE_JOB_OPERATION, NULL);
   operation->operation_kind = kind;
 
+  /* we store the start timestamp in seconds, so we need to divide by 1e6 */
+  operation->start_timestamp = g_get_real_time () / (gint64) 1e6 ;
+
   return operation;
 }
 
@@ -146,7 +158,7 @@ thunar_job_operation_add (ThunarJobOperation *job_operation,
 
   _thunar_return_if_fail (THUNAR_IS_JOB_OPERATION (job_operation));
   _thunar_return_if_fail (G_IS_FILE (source_file));
-  _thunar_return_if_fail (G_IS_FILE (target_file));
+  _thunar_return_if_fail (target_file == NULL || G_IS_FILE (target_file));
 
   /* When a directory has a file operation applied to it (for e.g. deletion),
    * the operation will also automatically get applied to its descendants.
@@ -155,11 +167,14 @@ thunar_job_operation_add (ThunarJobOperation *job_operation,
    *
    * So to avoid such issues on executing a job operation, if the source file is
    * a descendant of an existing file, do not add it to the job operation. */
-  if (g_list_find_custom (job_operation->source_file_list, source_file, is_ancestor) != NULL)
+  if (g_list_find_custom (job_operation->source_file_list, source_file, thunar_job_operation_is_ancestor) != NULL)
     return;
 
-  job_operation->source_file_list = g_list_append (job_operation->source_file_list, g_object_ref (source_file));
-  job_operation->target_file_list = g_list_append (job_operation->target_file_list, g_object_ref (target_file));
+  /* Don't add NULL files to the list, since it causes memory management issues on object destruction */
+  if (source_file != NULL)
+    job_operation->source_file_list = g_list_append (job_operation->source_file_list, g_object_ref (source_file));
+  if (target_file != NULL)
+    job_operation->target_file_list = g_list_append (job_operation->target_file_list, g_object_ref (target_file));
 }
 
 
@@ -198,6 +213,10 @@ thunar_job_operation_commit (ThunarJobOperation *job_operation)
    * memory for the job operation in the list, if any, stored in before we commit the new one. */
   thunar_g_list_free_full (job_operation_list);
   job_operation_list = g_list_append (NULL, g_object_ref (job_operation));
+
+  /* set the timestamp for the operation, in seconds. g_get_real_time gives
+   * us the time in microseconds, so we need to divide by 1e6. */
+  job_operation->end_timestamp = g_get_real_time () / (gint64) 1e6;
 }
 
 
@@ -287,6 +306,8 @@ thunar_job_operation_undo (void)
 /* thunar_job_operation_can_undo:
  *
  * Returns whether or not there is an operation on the job operation list that can be undone.
+ *
+ * Return value: A gboolean representing whether or not there is an undoable operation
  **/
 gboolean
 thunar_job_operation_can_undo (void)
@@ -343,6 +364,14 @@ thunar_job_operation_new_invert (ThunarJobOperation *job_operation)
         inverted_operation->target_file_list = thunar_g_list_copy_deep (job_operation->source_file_list);
         break;
 
+      case THUNAR_JOB_OPERATION_KIND_TRASH:
+        inverted_operation = g_object_new (THUNAR_TYPE_JOB_OPERATION, NULL);
+        inverted_operation->operation_kind = THUNAR_JOB_OPERATION_KIND_RESTORE;
+        inverted_operation->target_file_list = thunar_g_list_copy_deep (job_operation->source_file_list);
+        inverted_operation->start_timestamp = job_operation->start_timestamp;
+        inverted_operation->end_timestamp = job_operation->end_timestamp;
+        break;
+
       default:
         g_assert_not_reached ();
         break;
@@ -465,6 +494,16 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
           }
         break;
 
+      case THUNAR_JOB_OPERATION_KIND_RESTORE:
+        thunar_job_operation_restore_from_trash (job_operation, &error);
+
+        if (error != NULL)
+          {
+            g_warning ("Error while restoring files: %s\n", error->message);
+            g_clear_error (&error);
+          }
+        break;
+
       default:
         _thunar_assert_not_reached ();
         break;
@@ -475,7 +514,7 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
 
 
 
-/* is_ancestor:
+/* thunar_job_operation_is_ancestor:
  * @ancestor:     potential ancestor of @descendant. A #GFile
  * @descendant:   potential descendant of @ancestor. A #GFile
  *
@@ -485,7 +524,7 @@ thunar_job_operation_execute (ThunarJobOperation *job_operation)
  *               %1 otherwise
  **/
 static gint
-is_ancestor (gconstpointer ancestor,
+thunar_job_operation_is_ancestor (gconstpointer ancestor,
              gconstpointer descendant)
 {
   if (thunar_g_file_is_descendant (G_FILE (descendant), G_FILE (ancestor)))
@@ -493,3 +532,115 @@ is_ancestor (gconstpointer ancestor,
   else
     return 1;
 }
+
+
+
+/* thunar_job_operation_restore_from_trash::
+ * @operation: operation containing the information for the files which must be restored
+ * @error:     a GError instance for error handling
+ *
+ * Helper function to restore files based on the given @operation
+ **/
+static void
+thunar_job_operation_restore_from_trash (ThunarJobOperation *operation,
+                         GError            **error)
+{
+  GFileEnumerator   *enumerator;
+  GFileInfo         *info;
+  GFile             *trash;
+  GFile             *trashed_file;
+  GFile             *original_file;
+  const char        *original_path;
+  GDateTime         *date;
+  GError            *err = NULL;
+  gint64             deletion_time;
+  gpointer           lookup;
+  GHashTable        *files_trashed;
+  ThunarApplication *application;
+  GList             *source_file_list = NULL;
+  GList             *target_file_list = NULL;
+
+
+  /* enumerate over the files in the trash */
+  trash = g_file_new_for_uri ("trash:///");
+  enumerator = g_file_enumerate_children (trash,
+                                          G_FILE_ATTRIBUTE_STANDARD_NAME ","
+                                          G_FILE_ATTRIBUTE_TRASH_DELETION_DATE ","
+                                          G_FILE_ATTRIBUTE_TRASH_ORIG_PATH,
+                                          G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
+                                          NULL, &err);
+
+  if (err != NULL)
+    {
+      g_object_unref (trash);
+      g_object_unref (enumerator);
+
+      g_propagate_error (error, err);
+      return;
+    }
+
+  /* set up a hash table for the files we deleted */
+  files_trashed = g_hash_table_new_full (g_file_hash, (GEqualFunc) g_file_equal, NULL, NULL);
+
+  /* add all the files that were deleted in the hash table so we can check if a file
+   * was deleted as a part of this operation or not in constant time. */
+  for (GList *lp = operation->target_file_list; lp != NULL; lp = lp->next)
+    g_hash_table_add (files_trashed, lp->data);
+
+  /* iterate over the files in the trash, adding them to source and target lists of
+   * the files which are to be restored and their original paths */
+  for (info = g_file_enumerator_next_file (enumerator, NULL, &err); info != NULL; info = g_file_enumerator_next_file (enumerator, NULL, &err))
+    {
+      if (err != NULL)
+        {
+          g_object_unref (trash);
+          g_object_unref (enumerator);
+          g_hash_table_unref (files_trashed);
+          g_object_unref (info);
+
+          g_propagate_error (error, err);
+          return;
+        }
+
+      /* get the original path of the file before deletion */
+      original_path = g_file_info_get_attribute_byte_string (info, G_FILE_ATTRIBUTE_TRASH_ORIG_PATH);
+      original_file = g_file_new_for_path (original_path);
+
+      /* get the deletion date reported by the file */
+      date = g_file_info_get_deletion_date (info);
+      deletion_time = g_date_time_to_unix (date);
+      g_date_time_unref (date);
+
+      /* see if we deleted the file in this session */
+      lookup = g_hash_table_lookup (files_trashed, original_file);
+
+      /* if we deleted the file in this session, and the current file we're looking at was deleted
+       * during the time the operation occured, we conclude we found the right file */
+      if (lookup != NULL && operation->start_timestamp <= deletion_time && deletion_time <= operation->end_timestamp)
+        {
+          trashed_file = g_file_get_child (trash, g_file_info_get_name (info));
+
+          source_file_list = thunar_g_list_append_deep (source_file_list, trashed_file);
+          target_file_list = thunar_g_list_append_deep (target_file_list, original_file);
+
+        }
+
+      g_object_unref (original_file);
+    }
+
+  g_object_unref (trash);
+  g_object_unref (enumerator);
+
+  if (source_file_list != NULL && target_file_list != NULL)
+    {
+      /* restore the lists asynchronously using a move operation */
+      application = thunar_application_get ();
+      thunar_application_move_files (application, NULL, source_file_list, target_file_list, THUNAR_OPERATION_LOG_NO_OPERATIONS, NULL);
+      g_object_unref (application);
+
+      thunar_g_list_free_full (source_file_list);
+      thunar_g_list_free_full (target_file_list);
+    }
+
+  g_hash_table_unref (files_trashed);
+}
