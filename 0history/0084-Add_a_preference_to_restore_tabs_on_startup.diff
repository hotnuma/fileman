diff --git a/thunar/thunar-application.c b/thunar/thunar-application.c
index 5d25533d..b09b38b1 100644
--- a/thunar/thunar-application.c
+++ b/thunar/thunar-application.c
@@ -541,11 +541,59 @@ thunar_application_command_line (GApplication            *gapp,
     }
   else if (!daemon)
     {
+      GList        *window_list;
+      ThunarWindow *window;
+      gchar       **tabs_left;
+      gchar       **tabs_right;
+      gboolean      restore_tabs;
+      gboolean      has_left_tabs; /* used to check whether the split-view should be enabled */
+
       if (!thunar_application_process_filenames (application, cwd, cwd_list, NULL, NULL, &error, THUNAR_APPLICATION_SELECT_FILES))
         {
           /* we failed to process the filenames or the bulk rename failed */
           g_application_command_line_printerr (command_line, "Thunar: %s\n", error->message);
         }
+
+      /* reopen tabs */
+      g_object_get (G_OBJECT (application->preferences), "last-restore-tabs", &restore_tabs, NULL);
+      if (restore_tabs)
+        {
+          /* get ThunarWindow */
+          window_list = thunar_application_get_windows (application);
+          window_list = g_list_last (window_list); /* this will be the topmost Window */
+          window = THUNAR_WINDOW (window_list->data);
+          /* restore left tabs */
+          has_left_tabs = FALSE;
+          g_object_get (G_OBJECT (application->preferences), "last-tabs-left", &tabs_left, NULL);
+          if (tabs_left != NULL && g_strv_length (tabs_left) > 0)
+            {
+              for (guint i = 0; i < g_strv_length (tabs_left); i++)
+                {
+                  ThunarFile *directory = thunar_file_get_for_uri (tabs_left[i], NULL);
+                  thunar_window_notebook_add_new_tab (window, directory, FALSE);
+                }
+              thunar_window_notebook_remove_tab (window, 0); /* remove automatically opened tab */
+              has_left_tabs = TRUE;
+            }
+          /* restore right tabs */
+          /* (will be restored on the left if no left tabs are found) */
+          g_object_get (G_OBJECT (application->preferences), "last-tabs-right", &tabs_right, NULL);
+          if (tabs_right != NULL && g_strv_length (tabs_right) > 0)
+            {
+              if (has_left_tabs)
+                thunar_window_notebook_toggle_split_view (window); /* enabling the split view selects the new notebook */
+              for (guint i = 0; i < g_strv_length (tabs_right); i++)
+                {
+                  ThunarFile *directory = thunar_file_get_for_uri (tabs_right[i], NULL);
+                  thunar_window_notebook_add_new_tab (window, directory, FALSE);
+                }
+              thunar_window_notebook_remove_tab (window, 0); /* remove automatically opened tab */
+            }
+          /* free memory */
+          g_list_free (window_list);
+          g_strfreev (tabs_left);
+          g_strfreev (tabs_right);
+        }
     }
 
 out:
diff --git a/thunar/thunar-preferences-dialog.c b/thunar/thunar-preferences-dialog.c
index 6c664a5f..ead44256 100644
--- a/thunar/thunar-preferences-dialog.c
+++ b/thunar/thunar-preferences-dialog.c
@@ -809,7 +809,7 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_box_pack_start (GTK_BOX (vbox), frame, FALSE, TRUE, 0);
   gtk_widget_show (frame);
 
-  label = gtk_label_new (_("Tabs instead of new Windows"));
+  label = gtk_label_new (_("Tabs and Windows"));
   gtk_label_set_attributes (GTK_LABEL (label), thunar_pango_attr_list_bold ());
   gtk_frame_set_label_widget (GTK_FRAME (frame), label);
   gtk_widget_show (label);
@@ -843,6 +843,17 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 1, 1);
   gtk_widget_show (button);
 
+  button = gtk_check_button_new_with_mnemonic (_("Restore tabs on startup"));
+  g_object_bind_property (G_OBJECT (dialog->preferences),
+                          "last-restore-tabs",
+                          G_OBJECT (button),
+                          "active",
+                          G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE);
+  gtk_widget_set_tooltip_text (button, _("Select this option to restore your tabs as they were last time you used Thunar"));
+  gtk_widget_set_hexpand (button, TRUE);
+  gtk_grid_attach (GTK_GRID (grid), button, 0, 2, 1, 1);
+  gtk_widget_show (button);
+
   frame = g_object_new (GTK_TYPE_FRAME, "border-width", 0, "shadow-type", GTK_SHADOW_NONE, NULL);
   gtk_box_pack_start (GTK_BOX (vbox), frame, FALSE, TRUE, 0);
   gtk_widget_show (frame);
diff --git a/thunar/thunar-preferences.c b/thunar/thunar-preferences.c
index 8f8299aa..029554b3 100644
--- a/thunar/thunar-preferences.c
+++ b/thunar/thunar-preferences.c
@@ -53,6 +53,9 @@ enum
   PROP_DEFAULT_VIEW,
   PROP_HIDDEN_DEVICES,
   PROP_HIDDEN_BOOKMARKS,
+  PROP_LAST_TABS_LEFT,
+  PROP_LAST_TABS_RIGHT,
+  PROP_LAST_RESTORE_TABS,
   PROP_LAST_COMPACT_VIEW_ZOOM_LEVEL,
   PROP_LAST_DETAILS_VIEW_COLUMN_ORDER,
   PROP_LAST_DETAILS_VIEW_COLUMN_WIDTHS,
@@ -207,6 +210,44 @@ thunar_preferences_class_init (ThunarPreferencesClass *klass)
                           G_TYPE_STRV,
                           EXO_PARAM_READWRITE);
 
+  /**
+   * ThunarPreferences:last-tabs-left:
+   *
+   * List of URI's that are used to reopen tabs on restart. There is one URI for each tab/folder that was open at the time
+   * of the last program exit. This preference holds the tabs of the default view (or the left split-view).
+   **/
+  preferences_props[PROP_LAST_TABS_LEFT] =
+      g_param_spec_boxed ("last-tabs-left",
+                          NULL,
+                          NULL,
+                          G_TYPE_STRV,
+                          EXO_PARAM_READWRITE);
+
+  /**
+   * ThunarPreferences:last-tabs-right:
+   *
+   * List of URI's that are used to reopen tabs on restart. There is one URI for each tab/folder that was open at the time
+   * of the last program exit. This preference holds the tabs of the right split-view.
+   **/
+    preferences_props[PROP_LAST_TABS_RIGHT] =
+        g_param_spec_boxed ("last-tabs-right",
+                            NULL,
+                            NULL,
+                            G_TYPE_STRV,
+                            EXO_PARAM_READWRITE);
+
+  /**
+   * ThunarPreferences:last-restore-tabs:
+   *
+   * %TRUE to restore the tabs as they where before closing Thunar.
+   **/
+  preferences_props[PROP_LAST_RESTORE_TABS] =
+      g_param_spec_boolean ("last-restore-tabs",
+                            "LastRestoreTabs",
+                            NULL,
+                            FALSE,
+                            EXO_PARAM_READWRITE);
+
   /**
    * ThunarPreferences:last-compact-view-zoom-level:
    *
diff --git a/thunar/thunar-window.c b/thunar/thunar-window.c
index 5fe690a6..1ed307c1 100644
--- a/thunar/thunar-window.c
+++ b/thunar/thunar-window.c
@@ -1343,17 +1343,45 @@ static gboolean thunar_window_delete (GtkWidget *widget,
                                       gpointer   data )
 {
   gboolean      confirm_close_multiple_tabs, do_not_ask_again;
-  gint          response, n_tabs = 0;
+  gint          response, n_tabs = 0, n_tabsl = 0, n_tabsr = 0;
   ThunarWindow *window = THUNAR_WINDOW (widget);
+  gchar       **tab_uris_left;
+  gchar       **tab_uris_right;
 
   _thunar_return_val_if_fail (THUNAR_IS_WINDOW (widget),FALSE);
 
-  /* if we don't have muliple tabs in one of the notebooks then just exit */
   if (window->notebook_left)
-    n_tabs += gtk_notebook_get_n_pages (GTK_NOTEBOOK (window->notebook_left));
+    n_tabsl += gtk_notebook_get_n_pages (GTK_NOTEBOOK (window->notebook_left));
   if (window->notebook_right)
-    n_tabs += gtk_notebook_get_n_pages (GTK_NOTEBOOK (window->notebook_right));
+    n_tabsr += gtk_notebook_get_n_pages (GTK_NOTEBOOK (window->notebook_right));
+  n_tabs = n_tabsl + n_tabsr;
+
+  /* save open tabs */
+  tab_uris_left = g_new0 (gchar *, n_tabsl + 1);
+  for (int i = 0; i < n_tabsl; i++)
+    {
+      ThunarNavigator *view = THUNAR_NAVIGATOR (gtk_notebook_get_nth_page (GTK_NOTEBOOK (window->notebook_left), i));
+      gchar *uri = g_file_get_uri (thunar_file_get_file (thunar_navigator_get_current_directory (view)));
+      tab_uris_left[i] = g_strdup (uri);
+      g_free (uri);
+    }
+
+  tab_uris_right = g_new0 (gchar *, n_tabsr + 1);
+  for (int i = 0; i < n_tabsr; i++)
+    {
+      ThunarNavigator *view = THUNAR_NAVIGATOR (gtk_notebook_get_nth_page (GTK_NOTEBOOK (window->notebook_right), i));
+      gchar *uri = g_file_get_uri (thunar_file_get_file (thunar_navigator_get_current_directory (view)));
+      tab_uris_right[i] = g_strdup (uri);
+      g_free (uri);
+    }
+
+  g_object_set (G_OBJECT (window->preferences), "last-tabs-left", tab_uris_left, NULL);
+  g_object_set (G_OBJECT (window->preferences), "last-tabs-right", tab_uris_right, NULL);
 
+  g_strfreev (tab_uris_left);
+  g_strfreev (tab_uris_right);
+
+  /* if we don't have muliple tabs in one of the notebooks then just exit */
   if (thunar_window_split_view_is_active (window))
     {
       if (n_tabs < 3)
@@ -2336,14 +2364,45 @@ thunar_window_notebook_add_new_tab (ThunarWindow *window,
 
 
 
-void thunar_window_notebook_open_new_tab (ThunarWindow *window,
-                                          ThunarFile   *directory)
+void
+thunar_window_notebook_open_new_tab (ThunarWindow *window,
+                                      ThunarFile  *directory)
 {
   thunar_window_notebook_add_new_tab (window, directory, FALSE /* don't override `misc-switch-to-new-tab` preference */);
 }
 
 
 
+/**
+ * thunar_window_notebook_toggle_split_view:
+ * @window      : a #ThunarWindow instance.
+ *
+ * Toggles the split-view functionality for @window.
+ **/
+void
+thunar_window_notebook_toggle_split_view (ThunarWindow *window)
+{
+  thunar_window_action_toggle_split_view (window);
+}
+
+
+
+/**
+ * thunar_window_notebook_remove_tab:
+ * @window      : a #ThunarWindow instance.
+ * @tab         : the page index as a #gint.
+ *
+ * Removes @tab page from the currently selected notebook.
+ **/
+void
+thunar_window_notebook_remove_tab (ThunarWindow *window,
+                                   gint          tab)
+{
+  gtk_notebook_remove_page (GTK_NOTEBOOK (window->notebook_selected), tab);
+}
+
+
+
 void
 thunar_window_update_directories (ThunarWindow *window,
                                   ThunarFile   *old_directory,
diff --git a/thunar/thunar-window.h b/thunar/thunar-window.h
index 027a967b..91331346 100644
--- a/thunar/thunar-window.h
+++ b/thunar/thunar-window.h
@@ -117,11 +117,14 @@ gboolean                  thunar_window_set_directories                     (Thu
 void                      thunar_window_update_directories                  (ThunarWindow        *window,
                                                                              ThunarFile          *old_directory,
                                                                              ThunarFile          *new_directory);
+void                      thunar_window_notebook_toggle_split_view          (ThunarWindow        *window);
 void                      thunar_window_notebook_open_new_tab               (ThunarWindow        *window,
                                                                              ThunarFile          *directory);
 void                      thunar_window_notebook_add_new_tab                (ThunarWindow        *window,
                                                                              ThunarFile          *directory,
                                                                              gboolean             force_switch_to_new_tab);
+void                      thunar_window_notebook_remove_tab                 (ThunarWindow        *window,
+                                                                             gint                 tab);
 gboolean                  thunar_window_has_shortcut_sidepane               (ThunarWindow        *window);
 GtkWidget*                thunar_window_get_sidepane                        (ThunarWindow        *window);
 void                      thunar_window_append_menu_item                    (ThunarWindow        *window,
