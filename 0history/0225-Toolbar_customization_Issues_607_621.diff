diff --git a/po/POTFILES.in b/po/POTFILES.in
index f4f63073..9554e383 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -69,6 +69,7 @@ thunar/thunar-simple-job.c
 thunar/thunar-size-label.c
 thunar/thunar-standard-view.c
 thunar/thunar-statusbar.c
+thunar/thunar-toolbar-editor.c
 thunar/thunar-thumbnail-cache.c
 thunar/thunar-thumbnailer.c
 thunar/thunar-transfer-job.c
diff --git a/thunar/Makefile.am b/thunar/Makefile.am
index 8f8497dc..c31676a5 100644
--- a/thunar/Makefile.am
+++ b/thunar/Makefile.am
@@ -182,6 +182,8 @@ thunar_SOURCES =							\
 	thunar-standard-view.h						\
 	thunar-statusbar.c						\
 	thunar-statusbar.h						\
+	thunar-toolbar-editor.c						\
+    thunar-toolbar-editor.h						\
 	thunar-thumbnail-cache.c					\
 	thunar-thumbnail-cache.h					\
 	thunar-thumbnailer.c						\
diff --git a/thunar/thunar-preferences.c b/thunar/thunar-preferences.c
index fbc00d2f..8c486044 100644
--- a/thunar/thunar-preferences.c
+++ b/thunar/thunar-preferences.c
@@ -78,6 +78,8 @@ enum
   PROP_LAST_WINDOW_HEIGHT,
   PROP_LAST_WINDOW_WIDTH,
   PROP_LAST_WINDOW_FULLSCREEN,
+  PROP_LAST_TOOLBAR_VISIBLE_BUTTONS,
+  PROP_LAST_TOOLBAR_BUTTON_ORDER,
   PROP_MISC_DIRECTORY_SPECIFIC_SETTINGS,
   PROP_MISC_ALWAYS_SHOW_TABS,
   PROP_MISC_VOLUME_MANAGEMENT,
@@ -436,6 +438,30 @@ thunar_preferences_class_init (ThunarPreferencesClass *klass)
                             FALSE,
                             EXO_PARAM_READWRITE);
 
+  /**
+   * ThunarPreferences:last-toolbar-visible-buttons:
+   *
+   * The comma separated list that specifies the visibility of toolbar items.
+   **/
+    preferences_props[PROP_LAST_TOOLBAR_VISIBLE_BUTTONS] =
+        g_param_spec_string ("last-toolbar-visible-buttons",
+                             "LastToolbarVisibleButtons",
+                             NULL,
+                             "1,1,1,1,1",
+                             EXO_PARAM_READWRITE);
+
+  /**
+   * ThunarPreferences:last-toolbar-button-order:
+   *
+   * The comma separated list that specifies the order of toolbar items.
+   **/
+    preferences_props[PROP_LAST_TOOLBAR_BUTTON_ORDER] =
+        g_param_spec_string ("last-toolbar-item-order",
+                             "LastToolbarButtonOrder",
+                             NULL,
+                             "0,1,2,3,4",
+                             EXO_PARAM_READWRITE);
+
   /**
    * ThunarPreferences:misc-directory-specific-settings:
    *
diff --git a/thunar/thunar-toolbar-editor.c b/thunar/thunar-toolbar-editor.c
new file mode 100644
index 00000000..dc018182
--- /dev/null
+++ b/thunar/thunar-toolbar-editor.c
@@ -0,0 +1,657 @@
+/* vi:set et ai sw=2 sts=2 ts=2: */
+/*-
+ * Copyright (c) 2021 Sergios - Anestis Kefalidis <sergioskefalidis@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
+ * Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <exo/exo.h>
+
+#include <libxfce4ui/libxfce4ui.h>
+
+#include <thunar/thunar-abstract-dialog.h>
+#include <thunar/thunar-toolbar-editor.h>
+#include <thunar/thunar-dialogs.h>
+#include <thunar/thunar-gtk-extensions.h>
+#include <thunar/thunar-pango-extensions.h>
+#include <thunar/thunar-preferences.h>
+#include <thunar/thunar-private.h>
+#include <thunar/thunar-application.h>
+
+
+
+static void thunar_toolbar_editor_finalize                           (GObject                  *object);
+static void thunar_toolbar_editor_help_clicked                       (ThunarToolbarEditor      *toolbar_editor,
+                                                                      GtkWidget                *button);
+static void thunar_toolbar_editor_swap_toolbar_items_for_all_windows (ThunarToolbarEditor      *editor,
+                                                                      GtkTreeIter              *item1,
+                                                                      GtkTreeIter              *item2);
+static void thunar_toolbar_editor_move_down                          (ThunarToolbarEditor      *toolbar_editor,
+                                                                      GtkWidget                *button);
+static void thunar_toolbar_editor_move_up                            (ThunarToolbarEditor      *toolbar_editor,
+                                                                      GtkWidget                *button);
+static void thunar_toolbar_editor_toggle_visibility                  (ThunarToolbarEditor      *toolbar_editor,
+                                                                      const gchar              *path_string,
+                                                                      GtkCellRendererToggle    *cell_renderer);
+static void thunar_toolbar_editor_update_buttons                     (ThunarToolbarEditor      *toolbar_editor);
+static void thunar_toolbar_editor_use_defaults                       (ThunarToolbarEditor      *toolbar_editor,
+                                                                      GtkWidget                *button);
+static void thunar_toolbar_editor_save_model                         (ThunarToolbarEditor      *toolbar_editor);
+static void thunar_toolbar_editor_populate_model                     (ThunarToolbarEditor      *toolbar_editor);
+
+
+
+struct _ThunarToolbarEditorClass
+{
+  ThunarAbstractDialogClass __parent__;
+};
+
+struct _ThunarToolbarEditor
+{
+  ThunarAbstractDialog __parent__;
+
+  ThunarPreferences *preferences;
+
+  GtkListStore      *model;
+
+  /* Used to get information about the toolbar items, it is used as a reference. All the toolbars are changed, not just this one. */
+  GtkWidget         *toolbar;
+
+  GtkWidget         *tree_view;
+  GtkWidget         *up_button;
+  GtkWidget         *down_button;
+};
+
+
+
+G_DEFINE_TYPE (ThunarToolbarEditor, thunar_toolbar_editor, THUNAR_TYPE_ABSTRACT_DIALOG)
+
+
+
+static void
+thunar_toolbar_editor_class_init (ThunarToolbarEditorClass *klass)
+{
+  GObjectClass *gobject_class;
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = thunar_toolbar_editor_finalize;
+}
+
+
+
+static void
+thunar_toolbar_editor_init (ThunarToolbarEditor *toolbar_editor)
+{
+  GtkCellRenderer        *renderer;
+  GtkWidget              *separator;
+  GtkWidget              *button;
+  GtkWidget              *frame;
+  GtkWidget              *image;
+  GtkWidget              *label;
+  GtkWidget              *grid;
+  GtkWidget              *vbox;
+  GtkWidget              *swin;
+  gint                    row = 0;
+
+  /* grab a reference on the preferences */
+  toolbar_editor->preferences = thunar_preferences_get ();
+
+  /* grab a reference on the shared toolbar model */
+  toolbar_editor->model = gtk_list_store_new (4, G_TYPE_BOOLEAN, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT);
+
+  /* setup the dialog */
+  gtk_dialog_add_button (GTK_DIALOG (toolbar_editor), _("_Close"), GTK_RESPONSE_CLOSE);
+  gtk_dialog_set_default_response (GTK_DIALOG (toolbar_editor), GTK_RESPONSE_CLOSE);
+  gtk_window_set_resizable (GTK_WINDOW (toolbar_editor), FALSE);
+  gtk_window_set_title (GTK_WINDOW (toolbar_editor), _("Configure the Toolbar"));
+
+  /* add the "Help" button */
+  button = gtk_button_new_with_mnemonic (_("_Help"));
+  g_signal_connect_swapped (G_OBJECT (button), "clicked", G_CALLBACK (thunar_toolbar_editor_help_clicked), toolbar_editor);
+  gtk_box_pack_start (GTK_BOX (exo_gtk_dialog_get_action_area (GTK_DIALOG (toolbar_editor))), button, FALSE, FALSE, 0);
+  gtk_button_box_set_child_secondary (GTK_BUTTON_BOX (exo_gtk_dialog_get_action_area (GTK_DIALOG (toolbar_editor))), button, TRUE);
+  gtk_widget_show (button);
+
+  vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);
+  gtk_container_set_border_width (GTK_CONTAINER (vbox), 6);
+  gtk_box_pack_start (GTK_BOX (gtk_dialog_get_content_area (GTK_DIALOG (toolbar_editor))), vbox, TRUE, TRUE, 0);
+  gtk_widget_show (vbox);
+
+  frame = g_object_new (GTK_TYPE_FRAME, "border-width", 0, "shadow-type", GTK_SHADOW_NONE, NULL);
+  gtk_box_pack_start (GTK_BOX (vbox), frame, TRUE, TRUE, 0);
+  gtk_widget_show (frame);
+
+  grid = gtk_grid_new ();
+  gtk_grid_set_column_spacing (GTK_GRID (grid), 6);
+  gtk_grid_set_row_spacing (GTK_GRID (grid), 6);
+  gtk_container_set_border_width (GTK_CONTAINER (grid), 12);
+  gtk_container_add (GTK_CONTAINER (frame), grid);
+  gtk_widget_show (grid);
+
+  /* create the top label for the toolbar editor dialog */
+  label = gtk_label_new (_("Configure the order and visibility of toolbar items."));
+  gtk_label_set_xalign (GTK_LABEL (label), 0.0f);
+  gtk_widget_set_hexpand (label, TRUE);
+  gtk_grid_attach (GTK_GRID (grid), label, 0, row, 2, 1);
+  gtk_widget_show (label);
+
+  /* next row */
+  row++;
+
+  /* create the scrolled window for the tree view */
+  swin = gtk_scrolled_window_new (NULL, NULL);
+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (swin), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
+  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (swin), GTK_SHADOW_IN);
+  gtk_widget_set_hexpand (swin, TRUE);
+  gtk_widget_set_vexpand (swin, TRUE);
+  gtk_grid_attach (GTK_GRID (grid), swin, 0, row, 1, 6);
+  gtk_widget_show (swin);
+
+  /* create the tree view */
+  toolbar_editor->tree_view = gtk_tree_view_new ();
+  gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (toolbar_editor->tree_view), FALSE);
+  gtk_tree_view_set_model (GTK_TREE_VIEW (toolbar_editor->tree_view), GTK_TREE_MODEL (toolbar_editor->model));
+  gtk_container_add (GTK_CONTAINER (swin), toolbar_editor->tree_view);
+  gtk_widget_show (toolbar_editor->tree_view);
+
+  /* append the toggle toolbar */
+  renderer = gtk_cell_renderer_toggle_new ();
+  g_signal_connect_swapped (G_OBJECT (renderer), "toggled", G_CALLBACK (thunar_toolbar_editor_toggle_visibility), toolbar_editor);
+  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (toolbar_editor->tree_view),
+                                               -1,
+                                               "Active",
+                                               renderer,
+                                               "active", 0,
+                                               NULL);
+
+  /* append the icon toolbar */
+  renderer = gtk_cell_renderer_pixbuf_new ();
+  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (toolbar_editor->tree_view),
+                                               -1,
+                                               "Icon",
+                                               renderer,
+                                               "icon-name", 1,
+                                               NULL);
+
+  /* append the name toolbar */
+  renderer = gtk_cell_renderer_text_new ();
+  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (toolbar_editor->tree_view),
+                                               -1,
+                                               "Name",
+                                               renderer,
+                                               "text", 2,
+                                               NULL);
+
+  /* create the "Move Up" button */
+  toolbar_editor->up_button = gtk_button_new_with_mnemonic (_("Move _Up"));
+  g_signal_connect_swapped (G_OBJECT (toolbar_editor->up_button), "clicked", G_CALLBACK (thunar_toolbar_editor_move_up), toolbar_editor);
+  gtk_grid_attach (GTK_GRID (grid), toolbar_editor->up_button, 1, row, 1, 1);
+  gtk_widget_show (toolbar_editor->up_button);
+
+  image = gtk_image_new_from_icon_name ("go-up-symbolic", GTK_ICON_SIZE_BUTTON);
+  gtk_button_set_always_show_image (GTK_BUTTON (toolbar_editor->up_button), TRUE);
+  gtk_button_set_image (GTK_BUTTON (toolbar_editor->up_button), image);
+  gtk_widget_show (image);
+
+  /* next row */
+  row++;
+
+  /* create the "Move Down" button */
+  toolbar_editor->down_button = gtk_button_new_with_mnemonic (_("Move Dow_n"));
+  g_signal_connect_swapped (G_OBJECT (toolbar_editor->down_button), "clicked", G_CALLBACK (thunar_toolbar_editor_move_down), toolbar_editor);
+  gtk_grid_attach (GTK_GRID (grid), toolbar_editor->down_button, 1, row, 1, 1);
+  gtk_widget_show (toolbar_editor->down_button);
+
+  image = gtk_image_new_from_icon_name ("go-down-symbolic", GTK_ICON_SIZE_BUTTON);
+  gtk_button_set_always_show_image (GTK_BUTTON (toolbar_editor->down_button), TRUE);
+  gtk_button_set_image (GTK_BUTTON (toolbar_editor->down_button), image);
+  gtk_widget_show (image);
+
+  /* next row */
+  row++;
+
+  /* create the horiz separator */
+  separator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
+  gtk_grid_attach (GTK_GRID (grid), separator, 1, row, 1, 1);
+  gtk_widget_show (separator);
+
+  /* next row */
+  row++;
+
+  /* create the "Use Default" button */
+  button = gtk_button_new_with_mnemonic (_("De_fault Order"));
+  g_signal_connect_swapped (G_OBJECT (button), "clicked", G_CALLBACK (thunar_toolbar_editor_use_defaults), toolbar_editor);
+  gtk_grid_attach (GTK_GRID (grid), button, 1, row, 1, 1);
+  gtk_widget_show (button);
+
+  frame = g_object_new (GTK_TYPE_FRAME, "border-width", 0, "shadow-type", GTK_SHADOW_NONE, NULL);
+  gtk_box_pack_start (GTK_BOX (vbox), frame, FALSE, TRUE, 0);
+  gtk_widget_show (frame);
+
+  /* grab focus to the tree view */
+  gtk_widget_grab_focus (toolbar_editor->tree_view);
+}
+
+
+
+static void
+thunar_toolbar_editor_finalize (GObject *object)
+{
+  ThunarToolbarEditor *toolbar_editor = THUNAR_TOOLBAR_EDITOR (object);
+
+  thunar_toolbar_editor_save_model (toolbar_editor);
+
+  /* release our reference on the shared toolbar model */
+  g_signal_handlers_disconnect_matched (G_OBJECT (toolbar_editor->model), G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, toolbar_editor);
+  g_object_unref (G_OBJECT (toolbar_editor->model));
+
+  /* release our reference on the preferences */
+  g_object_unref (G_OBJECT (toolbar_editor->preferences));
+
+  (*G_OBJECT_CLASS (thunar_toolbar_editor_parent_class)->finalize) (object);
+}
+
+
+
+static void
+thunar_toolbar_editor_help_clicked (ThunarToolbarEditor *toolbar_editor,
+                                    GtkWidget          *button)
+{
+  _thunar_return_if_fail (THUNAR_IS_TOOLBAR_EDITOR (toolbar_editor));
+  _thunar_return_if_fail (GTK_IS_BUTTON (button));
+
+  /* open the user manual */
+  xfce_dialog_show_help (GTK_WINDOW (gtk_widget_get_toplevel (button)),
+                         "thunar",
+                         "the-file-manager-window",
+                         "toolbar_customization");
+}
+
+
+
+static void
+thunar_toolbar_editor_swap_toolbar_items_for_all_windows (ThunarToolbarEditor *editor,
+                                                          GtkTreeIter         *item1,
+                                                          GtkTreeIter         *item2)
+{
+  GList            *windows;
+  GtkTreePath      *path1;
+  GtkTreePath      *path2;
+
+  path1 = gtk_tree_model_get_path (GTK_TREE_MODEL (editor->model), item1);
+  path2 = gtk_tree_model_get_path (GTK_TREE_MODEL (editor->model), item2);
+
+  windows = thunar_application_get_windows (thunar_application_get ());
+  for (GList *lp = windows; lp != NULL; lp = lp->next)
+    {
+      ThunarWindow *window = lp->data;
+      thunar_window_toolbar_swap_items (window, gtk_tree_path_get_indices (path1)[0], gtk_tree_path_get_indices (path2)[0]);
+    }
+  g_list_free (windows);
+
+  gtk_tree_path_free (path1);
+  gtk_tree_path_free (path2);
+}
+
+
+
+static void
+thunar_toolbar_editor_move_down (ThunarToolbarEditor *toolbar_editor,
+                                 GtkWidget           *button)
+{
+  GtkTreeSelection *selection;
+  GtkTreeModel     *model;
+  GtkTreeIter       iter1;
+  GtkTreeIter       iter2;
+
+  _thunar_return_if_fail (THUNAR_IS_TOOLBAR_EDITOR (toolbar_editor));
+  _thunar_return_if_fail (GTK_IS_BUTTON (button));
+
+  /* determine the selected tree iterator */
+  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (toolbar_editor->tree_view));
+  gtk_tree_selection_get_selected (selection, &model, &iter1);
+  iter2 = iter1;
+  if (gtk_tree_model_iter_next (model, &iter2) == FALSE)
+    return;
+
+  gtk_list_store_swap (GTK_LIST_STORE (model), &iter1, &iter2);
+  thunar_toolbar_editor_swap_toolbar_items_for_all_windows (toolbar_editor, &iter1, &iter2);
+}
+
+
+
+static void
+thunar_toolbar_editor_move_up (ThunarToolbarEditor *toolbar_editor,
+                               GtkWidget          *button)
+{
+  GtkTreeSelection *selection;
+  GtkTreeModel     *model;
+  GtkTreeIter       iter1;
+  GtkTreeIter       iter2;
+
+  _thunar_return_if_fail (THUNAR_IS_TOOLBAR_EDITOR (toolbar_editor));
+  _thunar_return_if_fail (GTK_IS_BUTTON (button));
+
+  /* determine the selected tree iterator */
+  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (toolbar_editor->tree_view));
+  gtk_tree_selection_get_selected (selection, &model, &iter1);
+  iter2 = iter1;
+  if (gtk_tree_model_iter_previous (model, &iter2) == FALSE)
+    return;
+
+  gtk_list_store_swap (GTK_LIST_STORE (model), &iter1, &iter2);
+  thunar_toolbar_editor_swap_toolbar_items_for_all_windows (toolbar_editor, &iter1, &iter2);
+}
+
+
+
+static void
+thunar_toolbar_editor_toggle_visibility (ThunarToolbarEditor    *toolbar_editor,
+                                         const gchar            *path_string,
+                                         GtkCellRendererToggle  *cell_renderer)
+{
+  GtkTreePath *path;
+  GtkTreeIter  iter;
+  gboolean     visible;
+  GList       *windows;
+
+  _thunar_return_if_fail (GTK_IS_CELL_RENDERER_TOGGLE (cell_renderer));
+  _thunar_return_if_fail (THUNAR_IS_TOOLBAR_EDITOR (toolbar_editor));
+  _thunar_return_if_fail (path_string != NULL);
+
+  /* determine the tree path for the string */
+  path = gtk_tree_path_new_from_string (path_string);
+  if (gtk_tree_model_get_iter (GTK_TREE_MODEL (toolbar_editor->model), &iter, path))
+    {
+      gtk_tree_model_get (GTK_TREE_MODEL (toolbar_editor->model), &iter, 0, &visible, -1);
+      gtk_list_store_set (toolbar_editor->model, &iter, 0, !visible, -1);
+    }
+
+  windows = thunar_application_get_windows (thunar_application_get ());
+  for (GList *lp = windows; lp != NULL; lp = lp->next)
+    {
+      ThunarWindow *window = lp->data;
+      thunar_window_toolbar_toggle_item_visibility (window, gtk_tree_path_get_indices (path)[0]);
+    }
+
+  g_list_free (windows);
+  gtk_tree_path_free (path);
+}
+
+
+
+static void
+thunar_toolbar_editor_update_buttons (ThunarToolbarEditor *toolbar_editor)
+{
+  GtkTreeSelection *selection;
+  GtkTreeModel     *model;
+  GtkTreePath      *path;
+  GtkTreeIter       iter;
+  gint              idx;
+
+  /* determine the selected row */
+  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (toolbar_editor->tree_view));
+  if (gtk_tree_selection_get_selected (selection, &model, &iter))
+    {
+      /* determine the tree path for the iter */
+      path = gtk_tree_model_get_path (model, &iter);
+      if (G_UNLIKELY (path == NULL))
+        return;
+
+      /* update the "Move Up"/"Move Down" buttons */
+      idx = gtk_tree_path_get_indices (path)[0];
+      gtk_widget_set_sensitive (toolbar_editor->up_button, (idx > 0));
+      gtk_widget_set_sensitive (toolbar_editor->down_button, (idx + 1 < gtk_tree_model_iter_n_children (model, NULL)));
+
+      /* release the path */
+      gtk_tree_path_free (path);
+    }
+  else
+    {
+      /* just disable all buttons */
+      gtk_widget_set_sensitive (toolbar_editor->down_button, FALSE);
+      gtk_widget_set_sensitive (toolbar_editor->up_button, FALSE);
+    }
+}
+
+
+
+static void
+thunar_toolbar_editor_use_defaults (ThunarToolbarEditor *toolbar_editor,
+                                    GtkWidget           *button)
+{
+  GList *toolbar_items;
+  guint item_count = gtk_tree_model_iter_n_children (GTK_TREE_MODEL (toolbar_editor->model), NULL);
+  guint target_order[item_count];
+  guint current_order[item_count];
+  guint index;
+
+  toolbar_items = gtk_container_get_children (GTK_CONTAINER (toolbar_editor->toolbar));
+
+  index = 0;
+  for (GList *lp = toolbar_items; lp != NULL; lp = lp->next)
+    {
+      GtkWidget *item = lp->data;
+      gint *order = NULL;
+
+      order = g_object_get_data (G_OBJECT (item), "default-order");
+      current_order[index] = *order;
+      target_order[index] = index;
+      index++;
+    }
+
+  /* now rearrange the toolbar items, the goal is to make the current_order like the target_order */
+  for (guint i = 0; i < item_count; i++)
+    {
+      guint x = target_order[i];
+      for (guint j = 0; j < item_count; j++)
+        {
+          guint y = current_order[j];
+          if (x == y && i != j)
+            {
+              GtkTreeIter iter_i, iter_j;
+              gchar *path_i, *path_j;
+
+              path_i = g_strdup_printf ("%i", i);
+              path_j = g_strdup_printf ("%i", j);
+
+              /* swap the positions of the toolbar items */
+              gtk_tree_model_get_iter_from_string (GTK_TREE_MODEL (toolbar_editor->model), &iter_i, path_i);
+              gtk_tree_model_get_iter_from_string (GTK_TREE_MODEL (toolbar_editor->model), &iter_j, path_j);
+              gtk_list_store_swap (GTK_LIST_STORE (toolbar_editor->model), &iter_i, &iter_j);
+              thunar_toolbar_editor_swap_toolbar_items_for_all_windows (toolbar_editor, &iter_i, &iter_j);
+
+              y = current_order[i];
+              current_order[i] = target_order[i];
+              current_order[j] = y;
+
+              g_free (path_i);
+              g_free (path_j);
+              break;
+            }
+        }
+    }
+
+  g_list_free (toolbar_items);
+}
+
+
+
+static void
+thunar_toolbar_editor_save_model (ThunarToolbarEditor *toolbar_editor)
+{
+  GString    *item_order;
+  GString    *item_visibility;
+  guint       item_count;
+
+  item_order = g_string_sized_new (256);
+  item_visibility = g_string_sized_new (256);
+
+  item_count = gtk_tree_model_iter_n_children (GTK_TREE_MODEL (toolbar_editor->model), NULL);
+
+  /* transform the internal visible column list */
+  for (guint i = 0; i < item_count; i++)
+    {
+      GtkTreeIter iter;
+      gchar      *path;
+      gint        order;
+      gchar      *order_str;
+      gboolean    visible;
+      gchar      *visible_str;
+
+      /* append a comma if not empty */
+      if (*item_order->str != '\0')
+        g_string_append_c (item_order, ',');
+
+      if (*item_visibility->str != '\0')
+        g_string_append_c (item_visibility, ',');
+
+      /* get iterator for the ith item */
+      path = g_strdup_printf("%i", i);
+      gtk_tree_model_get_iter_from_string (GTK_TREE_MODEL (toolbar_editor->model), &iter, path);
+      g_free (path);
+
+      /* get the order value of the entry and store it */
+      gtk_tree_model_get (GTK_TREE_MODEL (toolbar_editor->model), &iter, 3, &order, -1);
+      order_str = g_strdup_printf("%i", order);
+      g_string_append (item_order, order_str);
+      g_free (order_str);
+
+      /* get the visibility value of the entry and store it */
+      gtk_tree_model_get (GTK_TREE_MODEL (toolbar_editor->model), &iter, 0, &visible, -1);
+      visible_str = g_strdup_printf("%i", visible);
+      g_string_append (item_visibility, visible_str);
+      g_free (visible_str);
+    }
+
+  /* save the order and visibility lists */
+  g_object_set (G_OBJECT (toolbar_editor->preferences), "last-toolbar-item-order", item_order->str, NULL);
+  g_object_set (G_OBJECT (toolbar_editor->preferences), "last-toolbar-visible-buttons", item_visibility->str, NULL);
+
+  /* release the strings */
+  g_string_free (item_order, TRUE);
+  g_string_free (item_visibility, TRUE);
+}
+
+
+
+static void
+thunar_toolbar_editor_populate_model (ThunarToolbarEditor *toolbar_editor)
+{
+  GtkTreeSelection *selection;
+  GtkTreeIter       iter;
+  GList            *toolbar_items;
+
+  toolbar_items = gtk_container_get_children (GTK_CONTAINER (toolbar_editor->toolbar));
+
+  for (GList *lp = toolbar_items; lp != NULL; lp = lp->next)
+    {
+      GtkWidget *item = lp->data;
+      GtkWidget *widget = NULL; /* used to remove mnemonics */
+      gchar     *label_with_mnemonic = NULL;
+      gchar     *icon = NULL;
+      gint      *order = NULL;
+
+      label_with_mnemonic = g_object_get_data (G_OBJECT (item), "label");
+      icon = g_object_get_data (G_OBJECT (item), "icon");
+      order = g_object_get_data (G_OBJECT (item), "default-order");
+
+      widget = gtk_label_new_with_mnemonic (label_with_mnemonic);
+
+      gtk_list_store_append (toolbar_editor->model, &iter);
+      gtk_list_store_set (toolbar_editor->model, &iter,
+                          0, gtk_widget_is_visible (item),
+                          1, icon,
+                          2, gtk_label_get_text (GTK_LABEL (widget)),
+                          3, *order,
+                          -1);
+
+      gtk_widget_destroy (widget);
+    }
+
+  /* connect after model has been fully initialized */
+  g_signal_connect_data (G_OBJECT (toolbar_editor->model), "row-changed", G_CALLBACK (thunar_toolbar_editor_update_buttons),
+                         toolbar_editor, NULL, G_CONNECT_AFTER | G_CONNECT_SWAPPED);
+  g_signal_connect_data (G_OBJECT (toolbar_editor->model), "rows-reordered", G_CALLBACK (thunar_toolbar_editor_update_buttons),
+                         toolbar_editor, NULL, G_CONNECT_AFTER | G_CONNECT_SWAPPED);
+
+  /* set up the tree selection */
+  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (toolbar_editor->tree_view));
+  g_signal_connect_swapped (G_OBJECT (selection), "changed", G_CALLBACK (thunar_toolbar_editor_update_buttons), toolbar_editor);
+
+  /* select the first item */
+  if (gtk_tree_model_get_iter_first (GTK_TREE_MODEL (toolbar_editor->model), &iter))
+    gtk_tree_selection_select_iter (selection, &iter);
+
+  g_list_free (toolbar_items);
+}
+
+
+
+/**
+ * thunar_show_toolbar_editor:
+ * @parent : the #GtkWidget the #GdkScreen on which to open the
+ *           toolbar editor dialog. May also be %NULL in which case
+ *           the default #GdkScreen will be used.
+ *
+ * Convenience function to display a #ThunarToolbarEditor.
+ **/
+void
+thunar_show_toolbar_editor (GtkWidget *window,
+                            GtkWidget *window_toolbar)
+{
+  GtkWidget *dialog;
+  GdkScreen *screen = NULL;
+
+  _thunar_return_if_fail (GTK_IS_WIDGET (window));
+
+  screen = gtk_widget_get_screen (window);
+  window = gtk_widget_get_toplevel (window);
+
+  /* display the toolbar editor */
+  dialog = g_object_new (THUNAR_TYPE_TOOLBAR_EDITOR, NULL);
+
+  /* set the toolbar used for gathering information */
+  g_object_ref (window_toolbar);
+  THUNAR_TOOLBAR_EDITOR (dialog)->toolbar = window_toolbar;
+
+  /* now that the toolbar is set, populate the tree view */
+  thunar_toolbar_editor_populate_model (THUNAR_TOOLBAR_EDITOR (dialog));
+
+  /* check if we have a toplevel window */
+  if (G_LIKELY (window != NULL && gtk_widget_get_toplevel (window)))
+    {
+      /* dialog is transient for toplevel window and modal */
+      gtk_window_set_destroy_with_parent (GTK_WINDOW (dialog), TRUE);
+      gtk_window_set_modal (GTK_WINDOW (dialog), TRUE);
+      gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (window));
+    }
+
+  /* set the screen for the window */
+  if (screen != NULL && GDK_IS_SCREEN (screen))
+    gtk_window_set_screen (GTK_WINDOW (dialog), screen);
+
+  /* run the dialog */
+  gtk_dialog_run (GTK_DIALOG (dialog));
+
+  /* destroy the dialog */
+  g_object_unref (window_toolbar);
+  gtk_widget_destroy (dialog);
+}
+
diff --git a/thunar/thunar-toolbar-editor.h b/thunar/thunar-toolbar-editor.h
new file mode 100644
index 00000000..7ab683ea
--- /dev/null
+++ b/thunar/thunar-toolbar-editor.h
@@ -0,0 +1,42 @@
+/* vi:set et ai sw=2 sts=2 ts=2: */
+/*-
+ * Copyright (c) 2021 Sergios - Anestis Kefalidis <sergioskefalidis@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
+ * Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef __THUNAR_TOOLBAR_EDITOR_H__
+#define __THUNAR_TOOLBAR_EDITOR_H__
+
+G_BEGIN_DECLS;
+
+typedef struct _ThunarToolbarEditorClass ThunarToolbarEditorClass;
+typedef struct _ThunarToolbarEditor      ThunarToolbarEditor;
+
+#define THUNAR_TYPE_TOOLBAR_EDITOR             (thunar_toolbar_editor_get_type ())
+#define THUNAR_TOOLBAR_EDITOR(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNAR_TYPE_TOOLBAR_EDITOR, ThunarToolbarEditor))
+#define THUNAR_TOOLBAR_EDITOR_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), THUNAR_TYPE_TOOLBAR_EDITOR, ThunarToolbarEditorClass))
+#define THUNAR_IS_TOOLBAR_EDITOR(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNAR_TYPE_TOOLBAR_EDITOR))
+#define THUNAR_IS_TOOLBAR_EDITOR_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), THUNAR_TYPE_TOOLBAR_EDITOR))
+#define THUNAR_TOOLBAR_EDITOR_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), THUNAR_TYPE_TOOLBAR_EDITOR, ThunarToolbarEditorClass))
+
+GType      thunar_toolbar_editor_get_type (void) G_GNUC_CONST;
+
+void       thunar_show_toolbar_editor     (GtkWidget *window,
+                                           GtkWidget *window_toolbar);
+
+G_END_DECLS;
+
+#endif /* !__THUNAR_TOOLBAR_EDITOR_H__ */
diff --git a/thunar/thunar-window.c b/thunar/thunar-window.c
index 2accdad0..95886f7a 100644
--- a/thunar/thunar-window.c
+++ b/thunar/thunar-window.c
@@ -60,6 +60,7 @@
 #include <thunar/thunar-tree-pane.h>
 #include <thunar/thunar-window.h>
 #include <thunar/thunar-device-monitor.h>
+#include <thunar/thunar-toolbar-editor.h>
 
 #include <glib.h>
 
@@ -102,6 +103,12 @@ struct _ThunarBookmark
 };
 typedef struct _ThunarBookmark ThunarBookmark;
 
+typedef struct
+{
+    ThunarWindow *window;
+    gchar        *action_name;
+} UCAActivation;
+
 
 
 static void      thunar_window_screen_changed             (GtkWidget              *widget,
@@ -207,6 +214,7 @@ static gboolean  thunar_window_action_menubar_changed     (ThunarWindow
 static gboolean  thunar_window_action_detailed_view       (ThunarWindow           *window);
 static gboolean  thunar_window_action_icon_view           (ThunarWindow           *window);
 static gboolean  thunar_window_action_compact_view        (ThunarWindow           *window);
+static gboolean  thunar_window_action_show_toolbar_editor (ThunarWindow           *window);
 static void      thunar_window_replace_view               (ThunarWindow           *window,
                                                            GtkWidget              *view,
                                                            GType                   view_type);
@@ -311,6 +319,18 @@ static void      thunar_window_recent_reload                   (GtkRecentManager
                                                                 ThunarWindow           *window);
 static void      thunar_window_catfish_dialog_configure        (GtkWidget              *entry);
 static gboolean  thunar_window_paned_notebooks_update_orientation (ThunarWindow *window);
+static void      thunar_window_location_toolbar_create         (ThunarWindow           *window);
+static void      thunar_window_update_location_toolbar         (GFileMonitor           *monitor,
+                                                                GFile                  *file,
+                                                                GFile                  *other_file,
+                                                                GFileMonitorEvent       event_type,
+                                                                ThunarWindow           *window);
+static void      thunar_window_location_toolbar_add_ucas       (ThunarWindow           *window);
+GtkWidget*       thunar_window_location_toolbar_add_uca        (ThunarWindow           *window,
+                                                                GObject                *thunarx_menu_item);
+static void      thunar_window_location_toolbar_load_last_order(ThunarWindow           *window);
+static gboolean  thunar_window_location_toolbar_load_visibility(ThunarWindow           *window);
+static guint     thunar_window_toolbar_item_count              (ThunarWindow        *window);
 
 
 
@@ -380,11 +400,14 @@ struct _ThunarWindow
   /* support for two different styles of location bars */
   GtkWidget              *location_bar;
   GtkWidget              *location_toolbar;
+  GFileMonitor           *uca_file_monitor;
+  GFile                  *uca_file;
 
   /* we need to maintain pointers to be able to toggle sensitivity */
   GtkWidget              *location_toolbar_item_back;
   GtkWidget              *location_toolbar_item_forward;
   GtkWidget              *location_toolbar_item_parent;
+  GtkWidget              *location_toolbar_item_home;
 
   ThunarLauncher         *launcher;
 
@@ -437,6 +460,7 @@ static XfceGtkActionEntry thunar_window_action_entries[] =
     { THUNAR_WINDOW_ACTION_TOGGLE_SIDE_PANE,               "<Actions>/ThunarWindow/toggle-side-pane",                "F9",                   XFCE_GTK_MENU_ITEM,       NULL,                          NULL,                                                                                NULL,                      G_CALLBACK (thunar_window_toggle_sidepane),           },
     { THUNAR_WINDOW_ACTION_VIEW_STATUSBAR,                 "<Actions>/ThunarWindow/view-statusbar",                  "",                     XFCE_GTK_CHECK_MENU_ITEM, N_ ("St_atusbar"),             N_ ("Change the visibility of this window's statusbar"),                             NULL,                      G_CALLBACK (thunar_window_action_statusbar_changed),  },
     { THUNAR_WINDOW_ACTION_VIEW_MENUBAR,                   "<Actions>/ThunarWindow/view-menubar",                    "<Primary>m",           XFCE_GTK_CHECK_MENU_ITEM, N_ ("_Menubar"),               N_ ("Change the visibility of this window's menubar"),                               NULL,                      G_CALLBACK (thunar_window_action_menubar_changed),    },
+    { THUNAR_WINDOW_ACTION_CONFIGURE_TOOLBAR,              "<Actions>/ThunarWindow/view-configure-toolbar",          "",                     XFCE_GTK_MENU_ITEM ,      N_ ("Configure _Toolbar..."),  N_ ("Configure the toolbar"),                                                        NULL,                      G_CALLBACK (thunar_window_action_show_toolbar_editor),},
     { THUNAR_WINDOW_ACTION_SHOW_HIDDEN,                    "<Actions>/ThunarWindow/show-hidden",                     "<Primary>h",           XFCE_GTK_CHECK_MENU_ITEM, N_ ("Show _Hidden Files"),     N_ ("Toggles the display of hidden files in the current window"),                    NULL,                      G_CALLBACK (thunar_window_action_show_hidden),        },
     { THUNAR_WINDOW_ACTION_ZOOM_IN,                        "<Actions>/ThunarWindow/zoom-in",                         "<Primary>KP_Add",      XFCE_GTK_IMAGE_MENU_ITEM, N_ ("Zoom I_n"),               N_ ("Show the contents in more detail"),                                             "zoom-in-symbolic",        G_CALLBACK (thunar_window_zoom_in),                   },
     { THUNAR_WINDOW_ACTION_ZOOM_IN_ALT_1,                  "<Actions>/ThunarWindow/zoom-in-alt1",                    "<Primary>plus",        XFCE_GTK_IMAGE_MENU_ITEM, NULL,                          NULL,                                                                                NULL,                      G_CALLBACK (thunar_window_zoom_in),                   },
@@ -680,19 +704,17 @@ thunar_window_init (ThunarWindow *window)
   GtkWidget       *label;
   GtkWidget       *infobar;
   GtkWidget       *item;
-  GtkWidget       *button;
   GtkWidget       *event_box;
   gboolean         last_menubar_visible;
   gchar           *last_location_bar;
   gchar           *last_side_pane;
+  gchar           *uca_path;
   GType            type;
   gint             last_separator_position;
   gint             last_window_width;
   gint             last_window_height;
   gboolean         last_window_maximized;
   gboolean         last_statusbar_visible;
-  GtkToolItem     *tool_item;
-  gboolean         small_icons;
   GtkStyleContext *context;
 
   /* unset the view type */
@@ -725,7 +747,6 @@ thunar_window_init (ThunarWindow *window)
                 "last-location-bar", &last_location_bar,
                 "last-side-pane", &last_side_pane,
                 "last-statusbar-visible", &last_statusbar_visible,
-                "misc-small-toolbar-icons", &small_icons,
                 NULL);
 
   /* update the visual on screen_changed events */
@@ -866,49 +887,15 @@ thunar_window_init (ThunarWindow *window)
   /* add first notebook and select it*/
   window->notebook_selected = thunar_window_paned_notebooks_add(window);
 
-  /* allocate the new location bar widget */
-  window->location_bar = thunar_location_bar_new ();
-  g_object_bind_property (G_OBJECT (window), "current-directory", G_OBJECT (window->location_bar), "current-directory", G_BINDING_SYNC_CREATE);
-  g_signal_connect_swapped (G_OBJECT (window->location_bar), "change-directory", G_CALLBACK (thunar_window_set_current_directory), window);
-  g_signal_connect_swapped (G_OBJECT (window->location_bar), "open-new-tab", G_CALLBACK (thunar_window_notebook_open_new_tab), window);
-  g_signal_connect_swapped (G_OBJECT (window->location_bar), "entry-done", G_CALLBACK (thunar_window_update_location_bar_visible), window);
-
-  /* setup the toolbar for the location bar */
-  window->location_toolbar = gtk_toolbar_new ();
-  gtk_toolbar_set_style (GTK_TOOLBAR (window->location_toolbar), GTK_TOOLBAR_ICONS);
-  gtk_toolbar_set_icon_size (GTK_TOOLBAR (window->location_toolbar),
-                              small_icons ? GTK_ICON_SIZE_SMALL_TOOLBAR : GTK_ICON_SIZE_LARGE_TOOLBAR);
-  gtk_widget_set_hexpand (window->location_toolbar, TRUE);
-  gtk_grid_attach (GTK_GRID (window->grid), window->location_toolbar, 0, 1, 1, 1);
-
-  window->location_toolbar_item_back = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_BACK), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
-  window->location_toolbar_item_forward = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_FORWARD), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
-  window->location_toolbar_item_parent = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_PARENT), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
-  button = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_HOME), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
+  window->location_toolbar = NULL;
+  thunar_window_location_toolbar_create (window);
 
-  g_signal_connect (G_OBJECT (window->location_toolbar_item_back), "button-press-event", G_CALLBACK (thunar_window_history_clicked), G_OBJECT (window));
-  g_signal_connect (G_OBJECT (window->location_toolbar_item_forward), "button-press-event", G_CALLBACK (thunar_window_history_clicked), G_OBJECT (window));
-  g_signal_connect (G_OBJECT (window->location_toolbar_item_parent), "button-press-event", G_CALLBACK (thunar_window_open_parent_clicked), G_OBJECT (window));
-  g_signal_connect (G_OBJECT (button), "button-press-event", G_CALLBACK (thunar_window_open_home_clicked), G_OBJECT (window));
-  g_signal_connect (G_OBJECT (window), "button-press-event", G_CALLBACK (thunar_window_button_press_event), G_OBJECT (window));
-  window->signal_handler_id_history_changed = 0;
-
-  /* The UCA shortcuts need to be checked 'by hand', since we dont want to permanently keep menu items for them */
-  g_signal_connect (window, "key-press-event", G_CALLBACK (thunar_window_check_uca_key_activation), NULL);
-
-  /* add the location bar to the toolbar */
-  tool_item = gtk_tool_item_new ();
-  gtk_tool_item_set_expand (tool_item, TRUE);
-  gtk_toolbar_insert (GTK_TOOLBAR (window->location_toolbar), tool_item, -1);
-  gtk_toolbar_set_show_arrow (GTK_TOOLBAR (window->location_toolbar), FALSE);
-
-  /* add the location bar itself */
-  gtk_container_add (GTK_CONTAINER (tool_item), window->location_bar);
-
-  /* display the toolbar */
-  gtk_widget_show_all (window->location_toolbar);
-
-  g_free (last_location_bar);
+  uca_path = xfce_resource_save_location (XFCE_RESOURCE_CONFIG, "Thunar/uca.xml", TRUE);
+  window->uca_file         = g_file_new_for_path (uca_path);
+  window->uca_file_monitor = g_file_monitor_file (window->uca_file, G_FILE_MONITOR_NONE, NULL, NULL);
+  if (G_LIKELY (window->uca_file_monitor != NULL))
+    g_signal_connect (window->uca_file_monitor, "changed", G_CALLBACK (thunar_window_update_location_toolbar), window);
+  g_free (uca_path);
 
   /* setup setting the location bar visibility on-demand */
   g_signal_connect_object (G_OBJECT (window->preferences), "notify::last-location-bar", G_CALLBACK (thunar_window_update_location_bar_visible), window, G_CONNECT_SWAPPED);
@@ -1268,6 +1255,7 @@ thunar_window_update_view_menu (ThunarWindow *window,
                                                    gtk_widget_get_visible (window->statusbar), GTK_MENU_SHELL (menu));
   xfce_gtk_toggle_menu_item_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_VIEW_MENUBAR), G_OBJECT (window),
                                                    gtk_widget_get_visible (window->menubar), GTK_MENU_SHELL (menu));
+  xfce_gtk_menu_item_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_CONFIGURE_TOOLBAR), G_OBJECT (window), GTK_MENU_SHELL (menu));
   xfce_gtk_menu_append_separator (GTK_MENU_SHELL (menu));
   xfce_gtk_toggle_menu_item_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_SHOW_HIDDEN), G_OBJECT (window),
                                                    window->show_hidden, GTK_MENU_SHELL (menu));
@@ -1466,6 +1454,14 @@ thunar_window_finalize (GObject *object)
       g_object_unref (window->bookmark_monitor);
     }
 
+  /* detach from the file monitor */
+  if (window->uca_file_monitor != NULL)
+    {
+      g_file_monitor_cancel (window->uca_file_monitor);
+      g_object_unref (window->uca_file_monitor);
+      g_object_unref (window->uca_file);
+    }
+
   /* release our reference on the provider factory */
   g_object_unref (window->provider_factory);
 
@@ -3559,6 +3555,15 @@ thunar_window_action_menubar_changed (ThunarWindow *window)
 
 
 
+static gboolean
+thunar_window_action_show_toolbar_editor (ThunarWindow *window)
+{
+  thunar_show_toolbar_editor (GTK_WIDGET (window), window->location_toolbar);
+  return TRUE;
+}
+
+
+
 static gboolean
 thunar_window_action_clear_directory_specific_settings (ThunarWindow *window)
 {
@@ -5384,3 +5389,496 @@ thunar_window_reconnect_accelerators (ThunarWindow *window)
     g_object_set (G_OBJECT (window->view), "accel-group", window->accel_group, NULL);
 }
 
+
+
+static void
+uca_activation_callback_free (gpointer  data,
+                              GClosure *closure)
+{
+  g_free (((UCAActivation*) data)->action_name);
+  g_slice_free (UCAActivation, data);
+}
+
+
+
+static void
+thunar_window_check_activate_toolbar_uca (UCAActivation *data)
+{
+  ThunarWindow           *window              = data->window;
+  gchar                  *action_name         = data->action_name;
+  ThunarxProviderFactory *provider_factory;
+  GList                  *providers;
+  GList                  *thunarx_menu_items  = NULL;
+  GList                  *lp_provider;
+  GList                  *lp_item;
+
+  /* load the menu providers from the provider factory */
+  provider_factory = thunarx_provider_factory_get_default ();
+  providers = thunarx_provider_factory_list_providers (provider_factory, THUNARX_TYPE_MENU_PROVIDER);
+  g_object_unref (provider_factory);
+
+  if (G_UNLIKELY (providers == NULL))
+    return;
+
+  /* load the menu items offered by the menu providers */
+  for (lp_provider = providers; lp_provider != NULL; lp_provider = lp_provider->next)
+    {
+      thunarx_menu_items = thunarx_menu_provider_get_folder_menu_items (lp_provider->data, GTK_WIDGET (window), THUNARX_FILE_INFO (window->current_directory));
+
+      for (lp_item = thunarx_menu_items; lp_item != NULL; lp_item = lp_item->next)
+        {
+          gchar *name;
+
+          g_object_get (G_OBJECT (lp_item->data), "name", &name, NULL);
+          if (strncmp ("uca-action", name, 10) != 0)
+            break;
+
+          if (g_strcmp0 (action_name, name) == 0)
+            thunarx_menu_item_activate (lp_item->data);
+        }
+
+      g_list_free (thunarx_menu_items);
+    }
+  g_list_free_full (providers, g_object_unref);
+}
+
+
+
+GtkWidget*
+thunar_window_location_toolbar_add_uca (ThunarWindow *window,
+                                        GObject      *thunarx_menu_item)
+{
+  gchar         *name, *label_text, *tooltip_text, *icon_name;
+  GtkWidget     *image = NULL;
+  GIcon         *icon = NULL;
+  GtkToolItem   *tool_item;
+  UCAActivation *data;
+
+  g_return_val_if_fail (THUNARX_IS_MENU_ITEM (thunarx_menu_item), NULL);
+  g_return_val_if_fail (THUNAR_IS_WINDOW (window), NULL);
+
+  g_object_get (G_OBJECT (thunarx_menu_item),
+                "name", &name,
+                "label", &label_text,
+                "tooltip", &tooltip_text,
+                "icon", &icon_name,
+                NULL);
+
+  if (icon_name != NULL)
+    icon = g_icon_new_for_string (icon_name, NULL);
+  if (icon != NULL)
+    image = gtk_image_new_from_gicon (icon, GTK_ICON_SIZE_MENU);
+  if (image == NULL)
+    image = gtk_image_new_from_icon_name (icon_name, GTK_ICON_SIZE_LARGE_TOOLBAR);
+
+  tool_item = gtk_tool_button_new (image, label_text);
+  gtk_widget_set_tooltip_text (GTK_WIDGET (tool_item), tooltip_text);
+
+  data = g_slice_new0 (UCAActivation);
+  data->action_name = g_strdup (name);
+  data->window = window;
+  g_signal_connect_data (G_OBJECT (tool_item), "clicked", G_CALLBACK (thunar_window_check_activate_toolbar_uca), data, uca_activation_callback_free, G_CONNECT_SWAPPED);
+
+  gtk_toolbar_insert (GTK_TOOLBAR (window->location_toolbar), tool_item, -1);
+
+  g_free (name);
+  g_free (label_text);
+  g_free (tooltip_text);
+  g_free (icon_name);
+  if (icon != NULL)
+    g_object_unref (icon);
+
+  return GTK_WIDGET (tool_item);
+}
+
+
+
+static void
+thunar_window_location_toolbar_create (ThunarWindow *window)
+{
+  GtkToolItem     *tool_item;
+  guint           *item_order;
+  gboolean         small_icons;
+
+  g_object_get (G_OBJECT (window->preferences), "misc-small-toolbar-icons", &small_icons, NULL);
+
+  /* allocate the new location bar widget */
+  window->location_bar = thunar_location_bar_new ();
+  g_object_bind_property (G_OBJECT (window), "current-directory", G_OBJECT (window->location_bar), "current-directory", G_BINDING_SYNC_CREATE);
+  g_signal_connect_swapped (G_OBJECT (window->location_bar), "change-directory", G_CALLBACK (thunar_window_set_current_directory), window);
+  g_signal_connect_swapped (G_OBJECT (window->location_bar), "open-new-tab", G_CALLBACK (thunar_window_notebook_open_new_tab), window);
+  g_signal_connect_swapped (G_OBJECT (window->location_bar), "entry-done", G_CALLBACK (thunar_window_update_location_bar_visible), window);
+  gtk_widget_show (window->location_bar);
+
+  /* setup the toolbar for the location bar */
+  window->location_toolbar = gtk_toolbar_new ();
+  gtk_toolbar_set_style (GTK_TOOLBAR (window->location_toolbar), GTK_TOOLBAR_ICONS);
+  gtk_toolbar_set_icon_size (GTK_TOOLBAR (window->location_toolbar),
+                             small_icons ? GTK_ICON_SIZE_SMALL_TOOLBAR : GTK_ICON_SIZE_LARGE_TOOLBAR);
+  gtk_widget_set_hexpand (window->location_toolbar, TRUE);
+  gtk_grid_attach (GTK_GRID (window->grid), window->location_toolbar, 0, 1, 1, 1);
+
+  window->location_toolbar_item_back = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_BACK), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_back), "label", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_BACK)->menu_item_label_text), g_free);
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_back), "icon", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_BACK)->menu_item_icon_name), g_free);
+  item_order = g_malloc (sizeof (gint));
+  *item_order = 0;
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_back), "default-order", item_order, g_free);
+  item_order = g_object_get_data (G_OBJECT (window->location_toolbar_item_back), "default-order");
+
+  window->location_toolbar_item_forward = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_FORWARD), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
+  g_object_set_data_full(G_OBJECT (window->location_toolbar_item_forward), "label", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_FORWARD)->menu_item_label_text), g_free);
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_forward), "icon", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_FORWARD)->menu_item_icon_name), g_free);
+  item_order = g_malloc (sizeof (gint));
+  *item_order = 1;
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_forward), "default-order", item_order, g_free);
+
+  window->location_toolbar_item_parent = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_PARENT), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_parent), "label", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_PARENT)->menu_item_label_text), g_free);
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_parent), "icon", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_PARENT)->menu_item_icon_name), g_free);
+  item_order = g_malloc (sizeof (gint));
+  *item_order = 2;
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_parent), "default-order", item_order, g_free);
+
+  window->location_toolbar_item_home = xfce_gtk_tool_button_new_from_action_entry (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_HOME), G_OBJECT (window), GTK_TOOLBAR (window->location_toolbar));
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_home), "label", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_HOME)->menu_item_label_text), g_free);
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_home), "icon", g_strdup (get_action_entry (THUNAR_WINDOW_ACTION_OPEN_HOME)->menu_item_icon_name), g_free);
+  item_order = g_malloc (sizeof (gint));
+  *item_order = 3;
+  g_object_set_data_full (G_OBJECT (window->location_toolbar_item_home), "default-order", item_order, g_free);
+
+  g_signal_connect (G_OBJECT (window->location_toolbar_item_back), "button-press-event", G_CALLBACK (thunar_window_history_clicked), G_OBJECT (window));
+  g_signal_connect (G_OBJECT (window->location_toolbar_item_forward), "button-press-event", G_CALLBACK (thunar_window_history_clicked), G_OBJECT (window));
+  g_signal_connect (G_OBJECT (window->location_toolbar_item_parent), "button-press-event", G_CALLBACK (thunar_window_open_parent_clicked), G_OBJECT (window));
+  g_signal_connect (G_OBJECT (window->location_toolbar_item_home), "button-press-event", G_CALLBACK (thunar_window_open_home_clicked), G_OBJECT (window));
+  g_signal_connect (G_OBJECT (window), "button-press-event", G_CALLBACK (thunar_window_button_press_event), G_OBJECT (window));
+  window->signal_handler_id_history_changed = 0;
+
+  /* The UCA shortcuts need to be checked 'by hand', since we dont want to permanently keep menu items for them */
+  g_signal_connect (window, "key-press-event", G_CALLBACK (thunar_window_check_uca_key_activation), NULL);
+
+  /* add the location bar to the toolbar */
+  tool_item = gtk_tool_item_new ();
+  gtk_tool_item_set_expand (tool_item, TRUE);
+  gtk_toolbar_insert (GTK_TOOLBAR (window->location_toolbar), tool_item, -1);
+  gtk_toolbar_set_show_arrow (GTK_TOOLBAR (window->location_toolbar), FALSE);
+  g_object_set_data_full (G_OBJECT (tool_item), "label", g_strdup ("Location Bar"), g_free);
+  g_object_set_data_full (G_OBJECT (tool_item), "icon", g_strdup(""), g_free);
+  item_order = g_malloc (sizeof (gint));
+  *item_order = 4;
+  g_object_set_data_full (G_OBJECT (tool_item), "default-order", item_order, g_free);
+
+  /* add custom actions to the toolbar */
+  thunar_window_location_toolbar_add_ucas (window);
+
+  /* display the toolbar */
+  gtk_widget_show_all (window->location_toolbar);
+
+  /* add the location bar itself after gtk_widget_show_all to not mess with the visibility of the location buttons */
+  gtk_container_add (GTK_CONTAINER (tool_item), window->location_bar);
+
+  /* load the correct order of items in the toolbar */
+  thunar_window_location_toolbar_load_last_order (window);
+
+  /* run as idle because otherwise it would be called before the window is initialized */
+  g_idle_add ((void*) thunar_window_location_toolbar_load_visibility, window);
+}
+
+
+
+static void
+thunar_window_update_location_toolbar (GFileMonitor     *monitor,
+                                       GFile            *file,
+                                       GFile            *other_file,
+                                       GFileMonitorEvent event_type,
+                                       ThunarWindow     *window)
+{
+  gtk_widget_destroy (window->location_toolbar);
+  thunar_window_location_toolbar_create (window);
+}
+
+
+
+
+static void
+thunar_window_location_toolbar_add_ucas (ThunarWindow *window)
+{
+  ThunarxProviderFactory *provider_factory;
+  GList                  *providers;
+  GList                  *thunarx_menu_items = NULL;
+  GList                  *lp_provider;
+  GList                  *lp_item;
+  GList                  *toolbar_container_children;
+  guint                   item_count;
+
+  /* get number of items in the toolbar */
+  toolbar_container_children = gtk_container_get_children (GTK_CONTAINER (window->location_toolbar));
+  item_count = g_list_length (toolbar_container_children);
+  g_list_free (toolbar_container_children);
+
+  /* load the menu providers from the provider factory */
+  provider_factory = thunarx_provider_factory_get_default ();
+  providers = thunarx_provider_factory_list_providers (provider_factory, THUNARX_TYPE_MENU_PROVIDER);
+  g_object_unref (provider_factory);
+
+  if (G_UNLIKELY (providers != NULL))
+    {
+      /* load the menu items offered by the menu providers */
+      for (lp_provider = providers; lp_provider != NULL; lp_provider = lp_provider->next)
+        {
+          thunarx_menu_items = thunarx_menu_provider_get_folder_menu_items (lp_provider->data, GTK_WIDGET (window), THUNARX_FILE_INFO (thunar_file_get (thunar_g_file_new_for_home (), NULL)));
+
+          for (lp_item = thunarx_menu_items; lp_item != NULL; lp_item = lp_item->next)
+            {
+              gchar     *name, *label_text, *icon_name;
+
+              g_object_get (G_OBJECT (lp_item->data),
+                            "name", &name,
+                            "label", &label_text,
+                            "icon", &icon_name,
+                            NULL);
+
+              if (g_str_has_prefix (name, "uca-action") == TRUE)
+                {
+                  GtkWidget *toolbar_item;
+                  guint *item_order;
+
+                  toolbar_item = thunar_window_location_toolbar_add_uca (window, lp_item->data);
+                  g_object_set_data_full (G_OBJECT (toolbar_item), "label", label_text, g_free);
+                  g_object_set_data_full (G_OBJECT (toolbar_item), "icon", icon_name, g_free);
+                  item_order = g_malloc (sizeof (gint));
+                  *item_order = item_count++;
+                  g_object_set_data_full (G_OBJECT (toolbar_item), "default-order", item_order, g_free);
+                }
+
+              g_free (name);
+            }
+
+          g_list_free_full (thunarx_menu_items, g_object_unref);
+        }
+      g_list_free_full (providers, g_object_unref);
+    }
+}
+
+
+
+/**
+ * thunar_window_location_toolbar_load_last_order:
+ * @window            : a #ThunarWindow instance.
+ *
+ * Load the order of toolbar items stored in `last-toolbar-button-order`.
+ **/
+static void
+thunar_window_location_toolbar_load_last_order (ThunarWindow *window)
+{
+  gchar      **item_order;
+  guint        item_order_length;
+  gchar       *tmp;
+  guint        item_count = thunar_window_toolbar_item_count (window);
+  guint        target_order[item_count];  /* item_order converted to guint and without invalid entries (i.e. entries >= item_count */
+  guint        current_order[item_count];
+
+  /* determine the column order from the preferences */
+  g_object_get (G_OBJECT (window->preferences), "last-toolbar-item-order", &tmp, NULL);
+  item_order = g_strsplit (tmp, ",", -1);
+  item_order_length = g_strv_length (item_order);
+  g_free (tmp);
+
+  /* for this to work the toolbar must be in the default order */
+  for (guint i = 0; i < item_count; i++)
+    current_order[i] = i;
+
+  for (guint i = 0; i < item_count; i++)
+    target_order[i] = i;
+
+  /* convert strings to guints for convenience */
+  for (guint i = 0, j = 0; i < item_order_length; i++)
+    {
+      guint64 n;
+
+      if (g_ascii_string_to_unsigned (item_order[i], 10, 0, UINT_MAX, &n, NULL) == FALSE)
+        g_error ("Invalid entry in \"last-toolbar-button-order\"");
+
+      /* the entry is invalid, it is likely that a custom action was removed and the preference hasn't been updated */
+      if (n >= item_count)
+        continue;
+
+      target_order[j] = n;
+      j++;
+    }
+
+  /* now rearrange the toolbar items, the goal is to make the current_order like the target_order */
+  for (guint i = 0; i < item_count; i++)
+    {
+      guint x = target_order[i];
+      for (guint j = i; j < item_count; j++)
+        {
+          guint y = current_order[j];
+          if (x == y && i != j)
+            {
+              /* swap the positions of the toolbar items */
+              thunar_window_toolbar_swap_items (window, i, j);
+              y = current_order[i];
+              current_order[i] = target_order[i];
+              current_order[j] = y;
+              break;
+            }
+        }
+    }
+
+  /* release the column order */
+  g_strfreev (item_order);
+}
+
+
+
+/**
+ * thunar_window_location_toolbar_load_visibility:
+ * @window            : a #ThunarWindow instance.
+ *
+ * Load the visibility of toolbar items. This should run after thunar_window_location_toolbar_load_last_order because
+ * it depends on the the saved order instead of the default.
+ *
+ * returns FALSE so it can be used as an idle function
+ **/
+static gboolean
+thunar_window_location_toolbar_load_visibility (ThunarWindow *window)
+{
+  gchar      **item_visibility;
+  guint        item_visibility_length;
+  gchar       *item_visibility_string;
+  guint        item_count = thunar_window_toolbar_item_count (window);
+  guint        target_order[item_count];
+
+  /* determine the column order from the preferences */
+  g_object_get (G_OBJECT (window->preferences), "last-toolbar-visible-buttons", &item_visibility_string, NULL);
+  item_visibility = g_strsplit (item_visibility_string, ",", -1);
+  item_visibility_length = g_strv_length (item_visibility);
+  g_free (item_visibility_string);
+
+  for (guint i = 0; i < item_count; i++)
+    target_order[i] = 1; /* default to visible */
+
+  /* convert strings to guints for convenience */
+  for (guint i = 0, j = 0; i < item_visibility_length; i++)
+    {
+      guint64 n;
+
+      if (g_ascii_string_to_unsigned (item_visibility[i], 10, 0, UINT_MAX, &n, NULL) == FALSE)
+        g_error ("Invalid entry in \"last-toolbar-visible-buttons\"");
+
+      target_order[j] = n;
+      j++;
+    }
+
+  for (guint i = 0; i < item_count; i++)
+    {
+      guint visible = target_order[i];
+
+      if (visible == 0)
+        thunar_window_toolbar_toggle_item_visibility (window, i);
+    }
+
+  /* release the column order */
+  g_strfreev (item_visibility);
+
+  return FALSE;
+}
+
+
+
+static guint
+thunar_window_toolbar_item_count (ThunarWindow *window)
+{
+  GList *toolbar_items;
+  guint  count = 0;
+
+  _thunar_return_val_if_fail (THUNAR_IS_WINDOW (window), count);
+
+  if (window->location_toolbar == NULL)
+    return count;
+
+  toolbar_items = gtk_container_get_children (GTK_CONTAINER (window->location_toolbar));
+  count = g_list_length (toolbar_items);
+  g_list_free (toolbar_items);
+
+  return count;
+}
+
+
+
+void
+thunar_window_toolbar_toggle_item_visibility (ThunarWindow *window,
+                                              gint          index)
+{
+  GList *toolbar_items, *lp;
+
+  _thunar_return_if_fail (THUNAR_IS_WINDOW (window));
+  _thunar_return_if_fail (index >= 0);
+
+  if (window->location_toolbar == NULL)
+    return;
+
+  toolbar_items = gtk_container_get_children (GTK_CONTAINER (window->location_toolbar));
+  lp = toolbar_items;
+
+  for (gint i = 0; lp != NULL; lp = lp->next, i++)
+    {
+      GtkWidget *item = lp->data;
+      if (index == i)
+        {
+          gtk_widget_set_visible (item, !gtk_widget_is_visible (item));
+          break;
+        }
+    }
+
+  g_list_free (toolbar_items);
+}
+
+
+
+void
+thunar_window_toolbar_swap_items (ThunarWindow *window,
+                                  gint          index_a,
+                                  gint          index_b)
+{
+  GList     *toolbar_items, *lp;
+  GtkWidget *item_a = NULL;
+  GtkWidget *item_b = NULL;
+
+  _thunar_return_if_fail (THUNAR_IS_WINDOW (window));
+  _thunar_return_if_fail (index_a >= 0);
+  _thunar_return_if_fail (index_b >= 0);
+
+  if (window->location_toolbar == NULL)
+    return;
+
+  toolbar_items = gtk_container_get_children (GTK_CONTAINER (window->location_toolbar));
+  lp = toolbar_items;
+
+  for (gint i = 0; lp != NULL; lp = lp->next, i++)
+    {
+      if (index_a == i)
+        item_a = lp->data;
+      if (index_b == i)
+        item_b = lp->data;
+    }
+
+  if (item_a == NULL || item_b == NULL)
+    {
+      g_error("Unable to swap toolbar items.\n");
+      return;
+    }
+
+  g_object_ref (item_a);
+  gtk_container_remove (GTK_CONTAINER (window->location_toolbar), item_a);
+  gtk_toolbar_insert (GTK_TOOLBAR (window->location_toolbar), GTK_TOOL_ITEM (item_a), index_b);
+  g_object_unref (item_a);
+
+  g_object_ref (item_b);
+  gtk_container_remove (GTK_CONTAINER (window->location_toolbar), item_b);
+  gtk_toolbar_insert (GTK_TOOLBAR (window->location_toolbar), GTK_TOOL_ITEM (item_b), index_a);
+  g_object_unref (item_b);
+
+  g_list_free (toolbar_items);
+}
diff --git a/thunar/thunar-window.h b/thunar/thunar-window.h
index 83a5b2dd..2b8a7892 100644
--- a/thunar/thunar-window.h
+++ b/thunar/thunar-window.h
@@ -63,6 +63,7 @@ typedef enum
   THUNAR_WINDOW_ACTION_TOGGLE_SIDE_PANE,
   THUNAR_WINDOW_ACTION_VIEW_STATUSBAR,
   THUNAR_WINDOW_ACTION_VIEW_MENUBAR,
+  THUNAR_WINDOW_ACTION_CONFIGURE_TOOLBAR,
   THUNAR_WINDOW_ACTION_SHOW_HIDDEN,
   THUNAR_WINDOW_ACTION_ZOOM_IN,
   THUNAR_WINDOW_ACTION_ZOOM_IN_ALT_1,
@@ -148,6 +149,11 @@ void                      thunar_window_update_search                       (Thu
 gboolean                  thunar_window_action_cancel_search                (ThunarWindow        *window);
 gboolean                  thunar_window_action_search                       (ThunarWindow        *window);
 void                      thunar_window_update_statusbar                    (ThunarWindow        *window);
+void                      thunar_window_toolbar_toggle_item_visibility      (ThunarWindow        *window,
+                                                                             gint                 index);
+void                      thunar_window_toolbar_swap_items                  (ThunarWindow        *window,
+                                                                             gint                 index_a,
+                                                                             gint                 index_b);
 
 XfceGtkActionEntry*       thunar_window_get_action_entries                  (void);
 
