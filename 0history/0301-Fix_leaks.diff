diff --git a/thunar/thunar-image.c b/thunar/thunar-image.c
index e3fe3aa6..3d14e0ec 100644
--- a/thunar/thunar-image.c
+++ b/thunar/thunar-image.c
@@ -194,6 +194,7 @@ thunar_image_update (ThunarImage *image)
       gtk_image_set_from_pixbuf (GTK_IMAGE (image), icon);
 
       g_object_unref (icon_factory);
+      g_object_unref (icon);
     }
 }
 
diff --git a/thunar/thunar-location-bar.c b/thunar/thunar-location-bar.c
index 81fcdf65..1b1e8ef2 100644
--- a/thunar/thunar-location-bar.c
+++ b/thunar/thunar-location-bar.c
@@ -45,6 +45,8 @@ struct _ThunarLocationBar
 {
   GtkBin __parent__;
 
+  ThunarPreferences *preferences;
+
   ThunarFile *current_directory;
 
   GtkWidget  *locationEntry;
@@ -133,7 +135,7 @@ thunar_location_bar_class_init (ThunarLocationBarClass *klass)
 static void
 thunar_location_bar_init (ThunarLocationBar *bar)
 {
-  ThunarPreferences *preferences = thunar_preferences_get ();
+  bar->preferences = thunar_preferences_get ();
 
   bar->current_directory = NULL;
   bar->locationEntry = NULL;
@@ -141,7 +143,7 @@ thunar_location_bar_init (ThunarLocationBar *bar)
 
   thunar_location_bar_settings_changed (bar);
 
-  g_signal_connect_object (preferences, "notify::last-location-bar", G_CALLBACK (thunar_location_bar_settings_changed), bar, G_CONNECT_SWAPPED);
+  g_signal_connect_swapped (bar->preferences, "notify::last-location-bar", G_CALLBACK (thunar_location_bar_settings_changed), bar);
 }
 
 
@@ -153,6 +155,10 @@ thunar_location_bar_finalize (GObject *object)
 
   _thunar_return_if_fail (THUNAR_IS_LOCATION_BAR (bar));
 
+  /* disconnect from the preferences */
+  g_signal_handlers_disconnect_by_func (bar->preferences, thunar_location_bar_settings_changed, bar);
+  g_object_unref (bar->preferences);
+
   if (bar->locationEntry)
     g_object_unref (bar->locationEntry);
   if (bar->locationButtons)
@@ -345,7 +351,7 @@ thunar_location_bar_settings_changed (ThunarLocationBar *bar)
   gchar *last_location_bar;
   GType  type;
 
-  g_object_get (thunar_preferences_get(), "last-location-bar", &last_location_bar, NULL);
+  g_object_get (bar->preferences, "last-location-bar", &last_location_bar, NULL);
 
   /* validate it */
   if (!strcmp (last_location_bar, g_type_name (THUNAR_TYPE_LOCATION_BUTTONS)))
diff --git a/thunar/thunar-thumbnailer.c b/thunar/thunar-thumbnailer.c
index 591c61d6..47b474b2 100644
--- a/thunar/thunar-thumbnailer.c
+++ b/thunar/thunar-thumbnailer.c
@@ -164,6 +164,8 @@ struct _ThunarThumbnailer
   ThunarThumbnailerDBus      *thumbnailer_proxy;
   ThunarThumbnailerProxyState proxy_state;
 
+  ThunarPreferences *preferences;
+
   /* running jobs */
   GSList     *jobs;
 
@@ -550,6 +552,9 @@ thunar_thumbnailer_init (ThunarThumbnailer *thumbnailer)
   /* initialize the proxies */
   thunar_thumbnailer_init_thumbnailer_proxy (thumbnailer);
 
+  /* grab a reference on the preferences */
+  thumbnailer->preferences = thunar_preferences_get ();
+
   g_object_bind_property (G_OBJECT (thunar_preferences_get ()),
                           "misc-thumbnail-max-file-size",
                           G_OBJECT (thumbnailer),
@@ -599,9 +604,12 @@ thunar_thumbnailer_finalize (GObject *object)
   /* release the thumbnailer lock */
   _thumbnailer_unlock (thumbnailer);
 
-/* release the mutex */
+  /* release the mutex */
   g_mutex_clear (&thumbnailer->lock);
 
+  /* release our reference on the preferences */
+  g_object_unref (thumbnailer->preferences);
+
   (*G_OBJECT_CLASS (thunar_thumbnailer_parent_class)->finalize) (object);
 }
 
diff --git a/thunar/thunar-toolbar-editor.c b/thunar/thunar-toolbar-editor.c
index bf0acaf1..0fb3f607 100644
--- a/thunar/thunar-toolbar-editor.c
+++ b/thunar/thunar-toolbar-editor.c
@@ -297,19 +297,22 @@ thunar_toolbar_editor_swap_toolbar_items_for_all_windows (GtkListStore *model,
                                                           GtkTreeIter  *item1,
                                                           GtkTreeIter  *item2)
 {
-  GList            *windows;
-  GtkTreePath      *path1;
-  GtkTreePath      *path2;
+  ThunarApplication *application;
+  GList             *windows;
+  GtkTreePath       *path1;
+  GtkTreePath       *path2;
 
   path1 = gtk_tree_model_get_path (GTK_TREE_MODEL (model), item1);
   path2 = gtk_tree_model_get_path (GTK_TREE_MODEL (model), item2);
 
-  windows = thunar_application_get_windows (thunar_application_get ());
+  application = thunar_application_get ();
+  windows = thunar_application_get_windows (application);
   for (GList *lp = windows; lp != NULL; lp = lp->next)
     {
       ThunarWindow *window = lp->data;
       thunar_window_toolbar_swap_items (window, gtk_tree_path_get_indices (path1)[0], gtk_tree_path_get_indices (path2)[0]);
     }
+  g_object_unref (application);
   g_list_free (windows);
 
   gtk_tree_path_free (path1);
@@ -389,11 +392,12 @@ thunar_toolbar_editor_toggle_visibility (ThunarToolbarEditor    *toolbar_editor,
                                          const gchar            *path_string,
                                          GtkCellRendererToggle  *cell_renderer)
 {
-  GtkTreePath *path;
-  GtkTreePath *child_path;
-  GtkTreeIter  iter;
-  gboolean     visible;
-  GList       *windows;
+  ThunarApplication *application;
+  GList             *windows;
+  GtkTreePath       *path;
+  GtkTreePath       *child_path;
+  GtkTreeIter        iter;
+  gboolean           visible;
 
   _thunar_return_if_fail (GTK_IS_CELL_RENDERER_TOGGLE (cell_renderer));
   _thunar_return_if_fail (THUNAR_IS_TOOLBAR_EDITOR (toolbar_editor));
@@ -416,14 +420,16 @@ thunar_toolbar_editor_toggle_visibility (ThunarToolbarEditor    *toolbar_editor,
       gtk_list_store_set (toolbar_editor->model, &iter, 0, !visible, -1);
     }
 
-  windows = thunar_application_get_windows (thunar_application_get ());
+  application = thunar_application_get ();
+  windows = thunar_application_get_windows (application);
   for (GList *lp = windows; lp != NULL; lp = lp->next)
     {
       ThunarWindow *window = lp->data;
       thunar_window_toolbar_toggle_item_visibility (window, gtk_tree_path_get_indices (child_path)[0]);
     }
-
+  g_object_unref (application);
   g_list_free (windows);
+
   gtk_tree_path_free (path);
   gtk_tree_path_free (child_path);
 }
diff --git a/thunar/thunar-window.c b/thunar/thunar-window.c
index 375c401e..36686e06 100644
--- a/thunar/thunar-window.c
+++ b/thunar/thunar-window.c
@@ -371,8 +371,6 @@ struct _ThunarWindow
 
   ThunarPreferences      *preferences;
 
-  ThunarIconFactory      *icon_factory;
-
   /* to be able to change folder on "device-pre-unmount" if required */
   ThunarDeviceMonitor    *device_monitor;
 
@@ -777,8 +775,6 @@ thunar_window_init (ThunarWindow *window)
   g_signal_connect (window->device_monitor, "device-removed", G_CALLBACK (thunar_window_device_changed), window);
   g_signal_connect (window->device_monitor, "device-changed", G_CALLBACK (thunar_window_device_changed), window);
 
-  window->icon_factory = thunar_icon_factory_get_default ();
-
   /* Catch key events before accelerators get processed */
   g_signal_connect (window, "key-press-event", G_CALLBACK (thunar_window_propagate_key_event), NULL);
   g_signal_connect (window, "key-release-event", G_CALLBACK (thunar_window_propagate_key_event), NULL);
@@ -1461,7 +1457,6 @@ thunar_window_finalize (GObject *object)
   g_signal_handlers_disconnect_matched (window->device_monitor, G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, window);
   g_object_unref (window->device_monitor);
 
-  g_object_unref (window->icon_factory);
   g_object_unref (window->action_mgr);
 
   if (window->bookmark_file != NULL)
