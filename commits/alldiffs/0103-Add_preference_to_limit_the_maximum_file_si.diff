diff --git a/thunar/thunar-preferences-dialog.c b/thunar/thunar-preferences-dialog.c
index 89873e93..a6dd7e38 100644
--- a/thunar/thunar-preferences-dialog.c
+++ b/thunar/thunar-preferences-dialog.c
@@ -196,6 +196,33 @@ transform_index_to_enum_value (GBinding     *binding,
 
 
 
+static gboolean
+transform_string_to_uint64 (GBinding     *binding,
+                            const GValue *src_value,
+                            GValue       *dst_value,
+                            gpointer      user_data)
+{
+  const gchar *string = g_value_get_string (src_value);
+  g_value_set_uint64 (dst_value, g_ascii_strtoull (string, NULL, 10));
+  return TRUE;
+}
+
+
+
+static gboolean
+transform_uint64_to_string (GBinding     *binding,
+                            const GValue *src_value,
+                            GValue       *dst_value,
+                            gpointer      user_data)
+{
+  gchar *string = g_strdup_printf ("%ld", g_value_get_uint64 (src_value));
+  g_value_set_string (dst_value, string);
+  g_free (string);
+  return TRUE;
+}
+
+
+
 static void
 thunar_preferences_dialog_class_init (ThunarPreferencesDialogClass *klass)
 {
@@ -352,6 +379,33 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
   gtk_widget_show (combo);
 
+  label = gtk_label_new_with_mnemonic (_("Only create thumbnails for files smaller than:"));
+  gtk_label_set_xalign (GTK_LABEL (label), 0.0f);
+  gtk_grid_attach (GTK_GRID (grid), label, 0, 2, 1, 1);
+  gtk_widget_show (label);
+
+  combo = gtk_combo_box_text_new ();
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "524288", _("512KiB"));
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "1048576", _("1MiB"));
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "10485760", _("10MiB"));
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "104857600", _("100MiB"));
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "1073741824", _("1GiB"));
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "10737418240", _("10GiB"));
+  gtk_combo_box_text_append (GTK_COMBO_BOX_TEXT (combo), "0", _("Unlimited"));
+  g_object_bind_property_full (G_OBJECT (dialog->preferences),
+                               "misc-thumbnail-max-file-size",
+                               G_OBJECT (combo),
+                               "active-id",
+                               G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE,
+                               transform_uint64_to_string,
+                               transform_string_to_uint64,
+                               NULL, NULL);
+  gtk_widget_set_hexpand (combo, TRUE);
+  gtk_grid_attach (GTK_GRID (grid), combo, 1, 2, 1, 1);
+  thunar_gtk_label_set_a11y_relation (GTK_LABEL (label), combo);
+  gtk_label_set_mnemonic_widget (GTK_LABEL (label), combo);
+  gtk_widget_show (combo);
+
   button = gtk_check_button_new_with_mnemonic (_("_Remember view settings for each folder"));
   g_object_bind_property (G_OBJECT (dialog->preferences),
                           "misc-directory-specific-settings",
@@ -361,7 +415,7 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
   gtk_widget_set_tooltip_text (button,
                                _("Select this option to remember view type, zoom level, sort column, and sort order individually for each folder"));
   gtk_widget_set_hexpand (button, TRUE);
-  gtk_grid_attach (GTK_GRID (grid), button, 0, 2, 1, 1);
+  gtk_grid_attach (GTK_GRID (grid), button, 0, 3, 1, 1);
   gtk_widget_show (button);
   if (!thunar_g_vfs_metadata_is_supported ())
     {
@@ -378,7 +432,7 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
                           G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE);
   gtk_widget_set_tooltip_text (button, _("Select this option to draw black frames around thumbnails."));
   gtk_widget_set_hexpand (button, TRUE);
-  gtk_grid_attach (GTK_GRID (grid), button, 0, 3, 2, 1);
+  gtk_grid_attach (GTK_GRID (grid), button, 0, 4, 2, 1);
   gtk_widget_show (button);
 
   button = gtk_check_button_new_with_mnemonic (_("Sort _folders before files"));
@@ -389,7 +443,7 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
                           G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE);
   gtk_widget_set_tooltip_text (button, _("Select this option to list folders before files when you sort a folder."));
   gtk_widget_set_hexpand (button, TRUE);
-  gtk_grid_attach (GTK_GRID (grid), button, 0, 4, 2, 1);
+  gtk_grid_attach (GTK_GRID (grid), button, 0, 5, 2, 1);
   gtk_widget_show (button);
 
   button = gtk_check_button_new_with_mnemonic (_("Show file size in binary format"));
@@ -400,7 +454,7 @@ thunar_preferences_dialog_init (ThunarPreferencesDialog *dialog)
                           G_BINDING_BIDIRECTIONAL | G_BINDING_SYNC_CREATE);
   gtk_widget_set_tooltip_text (button, _("Select this option to show file size in binary format instead of decimal."));
   gtk_widget_set_hexpand (button, TRUE);
-  gtk_grid_attach (GTK_GRID (grid), button, 0, 5, 2, 1);
+  gtk_grid_attach (GTK_GRID (grid), button, 0, 6, 2, 1);
   gtk_widget_show (button);
 
   frame = g_object_new (GTK_TYPE_FRAME, "border-width", 0, "shadow-type", GTK_SHADOW_NONE, NULL);
diff --git a/thunar/thunar-preferences.c b/thunar/thunar-preferences.c
index 071d402a..71fcc1c6 100644
--- a/thunar/thunar-preferences.c
+++ b/thunar/thunar-preferences.c
@@ -102,6 +102,7 @@ enum
   PROP_MISC_TEXT_BESIDE_ICONS,
   PROP_MISC_THUMBNAIL_MODE,
   PROP_MISC_THUMBNAIL_DRAW_FRAMES,
+  PROP_MISC_THUMBNAIL_MAX_FILE_SIZE,
   PROP_MISC_FILE_SIZE_BINARY,
   PROP_MISC_CONFIRM_CLOSE_MULTIPLE_TABS,
   PROP_MISC_PARALLEL_COPY_MODE,
@@ -849,6 +850,19 @@ thunar_preferences_class_init (ThunarPreferencesClass *klass)
                             FALSE,
                             EXO_PARAM_READWRITE);
 
+  /**
+   * ThunarPreferences:misc-thumbnail-max-file-size:
+   *
+   * Maximum file size (in bytes) allowed to be thumbnailed.
+   * 0 means no limit is in place.
+   **/
+  preferences_props[PROP_MISC_THUMBNAIL_MAX_FILE_SIZE] =
+      g_param_spec_uint64 ("misc-thumbnail-max-file-size",
+                           NULL,
+                           NULL,
+                           0, G_MAXUINT64, 0,
+                           EXO_PARAM_READWRITE);
+
   /**
    * ThunarPreferences:misc-file-size-binary:
    *
diff --git a/thunar/thunar-thumbnailer.c b/thunar/thunar-thumbnailer.c
index 5a10bf07..5ef2c34d 100644
--- a/thunar/thunar-thumbnailer.c
+++ b/thunar/thunar-thumbnailer.c
@@ -25,6 +25,7 @@
 
 #include <thunar/thunar-thumbnailer-proxy.h>
 #include <thunar/thunar-marshal.h>
+#include <thunar/thunar-preferences.h>
 #include <thunar/thunar-private.h>
 #include <thunar/thunar-thumbnailer.h>
 
@@ -106,6 +107,7 @@ enum
 {
   PROP_0,
   PROP_THUMBNAIL_SIZE,
+  PROP_THUMBNAIL_MAX_FILE_SIZE,
 };
 
 
@@ -174,6 +176,9 @@ struct _ThunarThumbnailer
   /* size to use to store thumbnails */
   ThunarThumbnailSize thumbnail_size;
 
+  /* maximum file size (in bytes) allowed to be thumbnailed */
+  guint64     thumbnail_max_file_size;
+  
   /* IDs of idle functions */
   GSList     *idles;
 };
@@ -242,7 +247,7 @@ thunar_thumbnailer_class_init (ThunarThumbnailerClass *klass)
                   G_TYPE_NONE, 1, G_TYPE_UINT);
 
   /**
-   * ThunarIconFactory:thumbnail-size:
+   * ThunarThumbnailer:thumbnail-size:
    *
    * Size of the thumbnails to load
    **/
@@ -254,6 +259,19 @@ thunar_thumbnailer_class_init (ThunarThumbnailerClass *klass)
                                                       THUNAR_TYPE_THUMBNAIL_SIZE,
                                                       THUNAR_THUMBNAIL_SIZE_NORMAL,
                                                       EXO_PARAM_READWRITE));
+
+  /**
+   * ThunarThumbnailer:thumbnail-max-file-size:
+   *
+   * Maximum file size (in bytes) allowed to be thumbnailed
+   **/
+  g_object_class_install_property (gobject_class,
+                                   PROP_THUMBNAIL_MAX_FILE_SIZE,
+                                   g_param_spec_uint64 ("thumbnail-max-file-size",
+                                                        "thumbnail-max-file-size",
+                                                        "thumbnail-max-file-size",
+                                                        0, G_MAXUINT64, 0,
+                                                        EXO_PARAM_READWRITE));
 }
 
 
@@ -272,6 +290,10 @@ thunar_thumbnailer_get_property (GObject    *object,
       g_value_set_enum (value, thumbnailer->thumbnail_size);
       break;
 
+    case PROP_THUMBNAIL_MAX_FILE_SIZE:
+      g_value_set_uint64 (value, thumbnailer->thumbnail_max_file_size);
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -294,6 +316,10 @@ thunar_thumbnailer_set_property (GObject      *object,
       thumbnailer->thumbnail_size = g_value_get_enum (value);
       break;
 
+    case PROP_THUMBNAIL_MAX_FILE_SIZE:
+      thumbnailer->thumbnail_max_file_size = g_value_get_uint64 (value);
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -425,6 +451,12 @@ thunar_thumbnailer_begin_job (ThunarThumbnailer *thumbnailer,
       if (thumb_state == THUNAR_FILE_THUMB_STATE_READY
           || thunar_thumbnailer_file_is_supported (thumbnailer, lp->data))
         {
+          guint max_size = thumbnailer->thumbnail_max_file_size;
+
+          /* skip large files */
+          if (max_size > 0 && thunar_file_get_size (lp->data) > max_size)
+            continue;
+
           supported_files = g_list_prepend (supported_files, lp->data);
           n_items++;
         }
@@ -515,6 +547,12 @@ thunar_thumbnailer_init (ThunarThumbnailer *thumbnailer)
 
   /* initialize the proxies */
   thunar_thumbnailer_init_thumbnailer_proxy (thumbnailer);
+
+  g_object_bind_property (G_OBJECT (thunar_preferences_get ()),
+                          "misc-thumbnail-max-file-size",
+                          G_OBJECT (thumbnailer),
+                          "thumbnail-max-file-size",
+                          G_BINDING_SYNC_CREATE);
 }
 
 
