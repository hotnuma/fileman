diff --git a/thunar/thunar-file.c b/thunar/thunar-file.c
index 6ec3cea1..4772841c 100644
--- a/thunar/thunar-file.c
+++ b/thunar/thunar-file.c
@@ -2440,7 +2440,9 @@ thunar_file_get_user (const ThunarFile *file)
 const gchar *
 thunar_file_get_content_type (ThunarFile *file)
 {
-  GFileInfo   *info;
+  gboolean     is_symlink;
+  GFile       *gfile;
+  GFileInfo   *info = NULL;
   GError      *err = NULL;
   const gchar *content_type = NULL;
 
@@ -2465,12 +2467,23 @@ thunar_file_get_content_type (ThunarFile *file)
         }
       else
         {
+          is_symlink = thunar_file_is_symlink (file);
+
+          if (G_UNLIKELY (is_symlink))
+            gfile = thunar_g_file_new_for_symlink_target (thunar_file_get_file (file));
+          else
+            gfile = g_object_ref (file->gfile);
+
           /* async load the content-type */
-          info = g_file_query_info (file->gfile,
-                                    G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE ","
-                                    G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE,
-                                    G_FILE_QUERY_INFO_NONE,
-                                    NULL, &err);
+          if (G_LIKELY (gfile != NULL))
+            {
+              info = g_file_query_info (gfile,
+                                        G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE ","
+                                        G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE,
+                                        G_FILE_QUERY_INFO_NONE,
+                                        NULL, &err);
+              g_object_unref (gfile);
+            }
 
           if (G_LIKELY (info != NULL))
             {
@@ -2485,10 +2498,21 @@ thunar_file_get_content_type (ThunarFile *file)
             }
           else
             {
-              g_warning ("Content type loading failed for %s: %s",
-                         thunar_file_get_display_name (file),
-                         err->message);
-              g_error_free (err);
+              /* If gfile retrieved above is NULL, then g_file_query_info won't be called, thus keeping info NULL.
+               * In this case, err will also be NULL. So it will fallback to "unknown" mime-type */
+              if (G_LIKELY (err != NULL))
+                {
+                  /* The mime-type 'inode/symlink' is  only used for broken links.
+                   * When the link is functional, the mime-type of the link target will be used */
+                  if (G_LIKELY (is_symlink && err->code == G_IO_ERROR_NOT_FOUND))
+                    file->content_type = g_strdup ("inode/symlink");
+                  else
+                    g_warning ("Content type loading failed for %s: %s",
+                              thunar_file_get_display_name (file),
+                              err->message);
+
+                  g_error_free (err);
+                }
             }
 
           /* always provide a fallback */
@@ -2506,6 +2530,41 @@ thunar_file_get_content_type (ThunarFile *file)
 
 
 
+/**
+ * thunar_file_get_content_type_description:
+ * @file : a #ThunarFile.
+ *
+ * Returns the content type description of @file.
+ * Free the returned string with g_free().
+ *
+ * Return value: (non-nullable) (transfer full): content type description of @file.
+ **/
+gchar *
+thunar_file_get_content_type_desc (ThunarFile *file)
+{
+  const gchar *content_type;
+  gchar       *description;
+  gchar       *temp;
+
+  /* thunar_file_get_content_type always provides fallback, hence no NULL check needed */
+  content_type = thunar_file_get_content_type (file);
+
+  if (G_LIKELY (!thunar_file_is_symlink (file)))
+    return g_content_type_get_description (content_type);
+
+  /* handle broken symlink */
+  if (G_UNLIKELY (g_content_type_equals (content_type, "inode/symlink")))
+    return g_strdup ("broken link");
+
+  /* append " (link)" to description if link is not broken */
+  temp = g_content_type_get_description (content_type);
+  description = g_strdup_printf ("%s (link)", temp);
+  g_free (temp);
+  return description;
+}
+
+
+
 gboolean
 thunar_file_load_content_type (ThunarFile *file)
 {
diff --git a/thunar/thunar-file.h b/thunar/thunar-file.h
index 6fb43cbb..459dfa0b 100644
--- a/thunar/thunar-file.h
+++ b/thunar/thunar-file.h
@@ -187,6 +187,7 @@ ThunarGroup      *thunar_file_get_group                  (const ThunarFile
 ThunarUser       *thunar_file_get_user                   (const ThunarFile       *file);
 
 const gchar      *thunar_file_get_content_type           (ThunarFile             *file);
+gchar            *thunar_file_get_content_type_desc      (ThunarFile             *file);
 gboolean          thunar_file_load_content_type          (ThunarFile             *file);
 const gchar      *thunar_file_get_symlink_target         (const ThunarFile       *file);
 const gchar      *thunar_file_get_basename               (const ThunarFile       *file) G_GNUC_CONST;
diff --git a/thunar/thunar-gio-extensions.c b/thunar/thunar-gio-extensions.c
index d3e3ce43..1708c268 100644
--- a/thunar/thunar-gio-extensions.c
+++ b/thunar/thunar-gio-extensions.c
@@ -148,6 +148,61 @@ thunar_g_file_new_for_bookmarks (void)
 
 
 
+/**
+ * thunar_g_file_new_for_symlink_target:
+ * @file : a #GFile.
+ *
+ * Returns the symlink target of @file as a GFile.
+ *
+ * Return value: (nullable) (transfer full): A #GFile on success and %NULL on failure.
+ **/
+GFile *
+thunar_g_file_new_for_symlink_target (GFile *file)
+{
+  const gchar *target_path;
+  gchar       *file_path;
+  GFile       *file_parent = NULL;
+  GFile       *target_gfile = NULL;
+  GFileInfo   *info = NULL;
+  GError      *error = NULL;
+
+  _thunar_return_val_if_fail (G_IS_FILE (file), NULL);
+
+  /* Intialise the GFileInfo for querying symlink target */
+  info = g_file_query_info (file,
+                            G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET,
+                            G_FILE_QUERY_INFO_NONE,
+                            NULL, &error);
+
+  if (info == NULL)
+    {
+      file_path = g_file_get_path (file);
+      g_warning ("Symlink target loading failed for %s: %s",
+                 file_path,
+                 error->message);
+      g_free (file_path);
+      g_error_free (error);
+      return NULL;
+    }
+
+  target_path = g_file_info_get_symlink_target (info);
+  file_parent = g_file_get_parent (file);
+
+  /* if target_path is an absolute path, the target_gfile is created using only the target_path
+  ** else if target_path is relative then it is resolved with respect to the parent of the symlink (@file) */
+  if (G_LIKELY (target_path != NULL && file_parent != NULL))
+    target_gfile = g_file_resolve_relative_path (file_parent, target_path);
+
+  /* free allocated resources */
+  if (G_LIKELY (file_parent != NULL))
+    g_object_unref (file_parent);
+  g_object_unref (info);
+
+  return target_gfile;
+}
+
+
+
 gboolean
 thunar_g_file_is_root (GFile *file)
 {
diff --git a/thunar/thunar-gio-extensions.h b/thunar/thunar-gio-extensions.h
index 7957f9ac..7698a7e0 100644
--- a/thunar/thunar-gio-extensions.h
+++ b/thunar/thunar-gio-extensions.h
@@ -34,6 +34,8 @@ GFile       *thunar_g_file_new_for_computer         (void);
 GFile       *thunar_g_file_new_for_network          (void);
 GFile       *thunar_g_file_new_for_bookmarks        (void);
 
+GFile       *thunar_g_file_new_for_symlink_target   (GFile                *file);
+
 gboolean     thunar_g_file_is_root                  (GFile                *file);
 gboolean     thunar_g_file_is_trashed               (GFile                *file);
 gboolean     thunar_g_file_is_in_recent             (GFile                *file);
diff --git a/thunar/thunar-list-model.c b/thunar/thunar-list-model.c
index dcf96e32..e6df5929 100644
--- a/thunar/thunar-list-model.c
+++ b/thunar/thunar-list-model.c
@@ -775,7 +775,6 @@ thunar_list_model_get_value (GtkTreeModel *model,
                              GValue       *value)
 {
   ThunarGroup *group;
-  const gchar *content_type;
   const gchar *device_type;
   const gchar *name;
   const gchar *real_name;
@@ -917,23 +916,13 @@ thunar_list_model_get_value (GtkTreeModel *model,
 
     case THUNAR_COLUMN_TYPE:
       g_value_init (value, G_TYPE_STRING);
-      if (G_UNLIKELY (thunar_file_is_symlink (file)))
-        {
-          g_value_take_string (value, g_strdup_printf (_("link to %s"), thunar_file_get_symlink_target (file)));
-          break;
-        }
       device_type = thunar_file_get_device_type (file);
       if (device_type != NULL)
         {
           g_value_take_string (value, g_strdup (device_type));
           break;
         }
-      content_type = thunar_file_get_content_type (file);
-      if (content_type != NULL)
-        {
-          g_value_take_string (value, g_content_type_get_description (content_type));
-          break;
-        }
+      g_value_take_string (value, thunar_file_get_content_type_desc (file));
       break;
 
     case THUNAR_COLUMN_FILE:
@@ -1840,36 +1829,16 @@ sort_by_type (const ThunarFile *a,
               const ThunarFile *b,
               gboolean          case_sensitive)
 {
-  const gchar *content_type_a;
-  const gchar *content_type_b;
   gchar       *description_a = NULL;
   gchar       *description_b = NULL;
   gint         result;
 
   /* we alter the description of symlinks here because they are
-   * displayed as "link to ..." in the detailed list view as well */
-
-  if (thunar_file_is_symlink (a))
-    {
-      description_a = g_strdup_printf (_("link to %s"),
-                                       thunar_file_get_symlink_target (a));
-    }
-  else
-    {
-      content_type_a = thunar_file_get_content_type (THUNAR_FILE (a));
-      description_a = g_content_type_get_description (content_type_a);
-    }
+   * displayed as "... (link)" in the detailed list view as well */
 
-  if (thunar_file_is_symlink (b))
-    {
-      description_b = g_strdup_printf (_("link to %s"),
-                                       thunar_file_get_symlink_target (b));
-    }
-  else
-    {
-      content_type_b = thunar_file_get_content_type (THUNAR_FILE (b));
-      description_b = g_content_type_get_description (content_type_b);
-    }
+  /* fetch the content type description for @file(s) a & b */
+  description_a = thunar_file_get_content_type_desc (THUNAR_FILE (a));
+  description_b = thunar_file_get_content_type_desc (THUNAR_FILE (b));
 
   /* avoid calling strcasecmp with NULL parameters */
   if (description_a == NULL || description_b == NULL)
diff --git a/thunar/thunar-properties-dialog.c b/thunar/thunar-properties-dialog.c
index ab8576d8..a016777c 100644
--- a/thunar/thunar-properties-dialog.c
+++ b/thunar/thunar-properties-dialog.c
@@ -1007,6 +1007,7 @@ thunar_properties_dialog_update_single (ThunarPropertiesDialog *dialog)
   gchar             *display_name;
   gchar             *fs_string;
   gchar             *str;
+  gchar             *content_type_desc = NULL;
   gchar             *volume_name;
   gchar             *volume_id;
   gchar             *volume_label;
@@ -1090,15 +1091,10 @@ thunar_properties_dialog_update_single (ThunarPropertiesDialog *dialog)
   content_type = thunar_file_get_content_type (file);
   if (content_type != NULL)
     {
-      if (G_UNLIKELY (g_content_type_equals (content_type, "inode/symlink")))
-        str = g_strdup (_("broken link"));
-      else if (G_UNLIKELY (thunar_file_is_symlink (file)))
-        str = g_strdup_printf (_("link to %s"), thunar_file_get_symlink_target (file));
-      else
-        str = g_content_type_get_description (content_type);
+      content_type_desc = thunar_file_get_content_type_desc (file);
       gtk_widget_set_tooltip_text (dialog->kind_ebox, content_type);
-      gtk_label_set_text (GTK_LABEL (dialog->kind_label), str);
-      g_free (str);
+      gtk_label_set_text (GTK_LABEL (dialog->kind_label), content_type_desc);
+      g_free (content_type_desc);
     }
   else
     {
